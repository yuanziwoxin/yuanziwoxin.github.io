<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YuanTechnology</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuanziwoxin.github.io/"/>
  <updated>2019-04-20T02:57:30.959Z</updated>
  <id>https://yuanziwoxin.github.io/</id>
  
  <author>
    <name>yuanziwoxin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Solidity学习笔记</title>
    <link href="https://yuanziwoxin.github.io/2019/04/19/Solidity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://yuanziwoxin.github.io/2019/04/19/Solidity学习笔记/</id>
    <published>2019-04-19T01:35:02.000Z</published>
    <updated>2019-04-20T02:57:30.959Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/04/19/Solidity学习笔记/Solidity学习笔记.png" title="Learn Solidity and Ethereum"><a id="more"></a><p>[TOC]</p><h1 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h1><p>Solidity是一门静态类型语言，支持继承、库和复杂的用户自定义类型等特性。</p><h1 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h1><h2 id="1-地址（address）"><a href="#1-地址（address）" class="headerlink" title="1. 地址（address）"></a>1. 地址（address）</h2><ul><li>以太坊中的地址为160位，即20个字节大小，所以可以用一个uint160表示。</li><li><a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md" target="_blank" rel="noopener">eip-55:有关验证地址的合法性</a></li><li>在合约内部，this表示当前合约本身，由于合约也是一个address类型（<strong>contract是从address继承的</strong>），所以this其实也是address类型的值。</li></ul><h2 id="2-类型转换"><a href="#2-类型转换" class="headerlink" title="2. 类型转换"></a>2. 类型转换</h2><h3 id="1-隐式转换"><a href="#1-隐式转换" class="headerlink" title="(1) 隐式转换"></a>(1) 隐式转换</h3><p>（1）无符号整数（uint）可以转换为<strong>相同或更大尺寸</strong>的<strong>字节类型（bytes）</strong>,但是反过来不可以转换。<br>（2）任何可以转换为<strong>uint160</strong>类型的变量都可以转换为<strong>地址类型（address）</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.17</span>;</span><br><span class="line"></span><br><span class="line">contract convert&#123;</span><br><span class="line">    int8  a = <span class="number">1</span>;</span><br><span class="line">    int16  b = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 返回的类型必须是int16，如果返回int8类型会报错，这边运算符已经帮我们隐式转换了类型</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">int16</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="comment">// a+b 的结果会隐式的转换为int16</span></span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-显式转换"><a href="#2-显式转换" class="headerlink" title="(2)显式转换"></a>(2)显式转换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int8  public  c = <span class="number">-2</span>;</span><br><span class="line">uint8  public  d = uint8(c);</span><br><span class="line"><span class="comment">// 此时的d为254</span></span><br><span class="line">uint  public e = uint(c);</span><br><span class="line"><span class="comment">// e = </span></span><br><span class="line"><span class="number">115792089237316195423570985008687907853269984665640564039457584007913129639934</span></span><br></pre></td></tr></table></figure><h2 id="3-发送以太币的两种方法"><a href="#3-发送以太币的两种方法" class="headerlink" title="3. 发送以太币的两种方法"></a>3. 发送以太币的两种方法</h2><h3 id="（1）transfer"><a href="#（1）transfer" class="headerlink" title="（1）transfer"></a>（1）transfer</h3><p>transfer从<strong>合约发起方</strong>向某个地址转入以太币，当<strong>地址无效</strong>或者<strong>发起方余额不足</strong>时，transfer将<strong>抛出异常</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向addressA转入一个以太币</span></span><br><span class="line">addressA.transfer(<span class="number">1</span> ether);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or </span></span><br><span class="line"><span class="comment">// 附带 gas</span></span><br><span class="line">addressA.transfer.gas(<span class="number">120000</span>)(<span class="number">1</span> ether);</span><br></pre></td></tr></table></figure></p><h3 id="（2）send"><a href="#（2）send" class="headerlink" title="（2）send"></a>（2）send</h3><p>send是transfer的<strong>低级版本</strong>。当<strong>合约执行失败</strong>时，send会<strong>返回false</strong>。当转账成功，则返回true。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">owner.send(SOME_BALANCE); <span class="comment">// 失败时返回false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(owner.send(SOME_BALANCE))&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>使用send时需注意以下三点：</p><ul><li>（1）send方法<strong>需包裹在if中</strong>，因为在调用send函数时，合约可能会有函数执行，这些函数<strong>可能会执行失败</strong>。</li><li>（2）在用send方法发送以太币之前，请先执行减少账户余额的操作，因为可能会有递归调用消耗完合约余额的风险。</li><li>（3）用户可以重载send方法。</li></ul><p><strong>总结：</strong><br>x.transfer(y)等价于if(!x.send(y)) throw; ,send是transfer的底层实现，建议尽可能使用transfer。</p></blockquote><h2 id="4-字节数组"><a href="#4-字节数组" class="headerlink" title="4. 字节数组"></a>4. 字节数组</h2><h3 id="（1）固定长字节数组"><a href="#（1）固定长字节数组" class="headerlink" title="（1）固定长字节数组"></a>（1）固定长字节数组</h3><p>固定长度字节数组是以<strong>bytes加上数字后缀</strong>的方式定义的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">byte a;  // byte 等同于bytes1 a</span><br><span class="line">bytes2 b;</span><br><span class="line"> ...</span><br><span class="line">bytes32 c;</span><br></pre></td></tr></table></figure></p><p> <strong>索引访问</strong>：bytes1~bytes32 支持索引访问，但是这种索引访问是<strong>只读的</strong>，<strong>不能使用进行赋值</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bytes10  b</span><br><span class="line">b[0]   // 获取第1个字节</span><br><span class="line">b[1]   // 获取第2个字节</span><br><span class="line">...</span><br><span class="line">b[9]   // 获取第9个字节</span><br><span class="line"></span><br><span class="line">b[0] = x  // 不能使用索引的形式进行赋值，因为这种索引访问是只读的。</span><br></pre></td></tr></table></figure></p><blockquote><p>可以将 <strong>byte[]</strong> 当作<strong>字节数组</strong>使用，但这种方式<strong>非常浪费存储空间</strong>，准确来说，是<strong>在传入调用时</strong>，<strong>每个元素会浪费 31 字节</strong>。 更好地做法是<strong>使用 bytes</strong>。</p></blockquote><h3 id="（2）动态长度字节数组"><a href="#（2）动态长度字节数组" class="headerlink" title="（2）动态长度字节数组"></a>（2）动态长度字节数组</h3><h4 id="bytes：动态长度字节数组"><a href="#bytes：动态长度字节数组" class="headerlink" title="bytes：动态长度字节数组"></a>bytes：动态长度字节数组</h4><p>一种特殊的数组。bytes类似于byte[]，在外部函数作为参数时，会进行压缩打包以便节省空间，所以尽量用bytes。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bytes m;</span><br></pre></td></tr></table></figure></p><h4 id="string：动态长度字符数串"><a href="#string：动态长度字符数串" class="headerlink" title="string：动态长度字符数串"></a>string：动态长度字符数串</h4><ul><li>（1）字符串以UTF-8的形式编码</li><li>（2）类似bytes，但不提供长度和按索引的访问方式。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 字符串是双引号</span><br><span class="line">string n = &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">// 不支持长度访问</span><br><span class="line">n.length</span><br><span class="line"></span><br><span class="line">// 不支持按索引访问</span><br><span class="line">n[0]</span><br></pre></td></tr></table></figure></li></ul><blockquote><ul><li><strong>（1）</strong> <strong>string不支持通过索引访问</strong>，但可以通过string类型的值转换为bytes类型的值，然后就可以使用索引访问字符串的特定字节。</li><li><strong>（2）</strong> 由于<strong>bytes类型的值是可读写的</strong>，所以要修改string类型的值，可以先将string类型的值<strong>转换为</strong>bytes类型的值，修改完后，再将bytes类型的值<strong>转换为</strong>string类型的值。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value2 = typename ( value1 );  //类型转换</span><br></pre></td></tr></table></figure></li></ul><p>其中typename表示类型名，如string、bytes等。</p></blockquote><p>string类型有一些缺陷：如，不能直接使用加号（+）进行连接，但可以通过bytes类型间接将两个或多个字符串连接起来。</p><p><strong>字符串连接的基本原理</strong>：</p><ul><li>（1）创建一个尺寸与所有参与连接的字符串尺寸之和相同的大字符串；</li><li>（2）将该大字符串转换为bytes类型；</li><li>（3）依次迭代参与连接的字符串，将字符串中的字符逐一添加到bytes类型的值中；</li><li>（4）将这个bytes类型的值转换为string类型的值。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// internal表示函数只能被合约内部调用，函数在合约外不可见</span><br><span class="line">function strConcat(string memory _str1,string memory _str2) internal pure returns(string memory) &#123;</span><br><span class="line">    // 先将string转化为bytes类型的值</span><br><span class="line">    bytes memory _bytesValue1 = bytes(_str1);</span><br><span class="line">    bytes memory _bytesValue2 = bytes(_str2);</span><br><span class="line">    // 创建一个能容纳_str1和_str2的string对象</span><br><span class="line">    string memory resultStr = new string(_bytesValue1.length + _bytesValue2.length);</span><br><span class="line">    // 创建与_str1和_str2总和同样尺寸的bytes对象</span><br><span class="line">    bytes memory resultBytes = bytes(resultStr);</span><br><span class="line"></span><br><span class="line">    uint index = 0;</span><br><span class="line"></span><br><span class="line">    for(uint i=0;i&lt;_bytesValue1.length;i++)&#123;</span><br><span class="line">        resultBytes[index++] = _bytesValue1[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(uint i=0;i&lt;_bytesValue2.length;i++)&#123;</span><br><span class="line">        resultBytes[index++] = _bytesValue2[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return string(resultBytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-枚举类型（enum）"><a href="#5-枚举类型（enum）" class="headerlink" title="5. 枚举类型（enum）"></a>5. 枚举类型（enum）</h2><p>枚举是Solidity中的<strong>自定义数据类型</strong>。枚举<strong>可以显式转为整型</strong>，但是<strong>不能与整型隐式转换</strong>，枚举在一般程序中可以当作状态机使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 定义枚举类型（类型名为enumName）</span><br><span class="line">enum enumName&#123; value1, value2, ... , valueN&#125;</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个枚举类型名为Country的枚举类型，每一个枚举值都对应一个整数索引，China表示0，America表示1，以此类推。(不用添加分号)</span><br><span class="line">   enum Country &#123;China,America,Japan,Australia,Canada,South_Korea&#125;</span><br><span class="line">   </span><br><span class="line">   // 定义枚举Country类型的变量</span><br><span class="line">   Country country;</span><br><span class="line">   </span><br><span class="line">   // 赋值</span><br><span class="line">   country = Country.China;   //使用枚举值进行赋值</span><br><span class="line">   // or</span><br><span class="line">   country = Country(0);   //使用整数值进行赋值（必须显式类型转换）</span><br><span class="line">   </span><br><span class="line">   // 枚举可以显式转化为整型</span><br><span class="line">   uint currentCountry = uint(Country.China);  // 0</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意：</strong></p><ul><li>（1）在合约中可以使用<strong>枚举值</strong>设置枚举变量，也可以使用<strong>整数值</strong>设置枚举变量，<strong>后者必须显式类型转换</strong>。</li><li>（2）在<strong>remix</strong>环境中测试智能合约时，再输入测试数据时<strong>不能直接输入Country.China或其他枚举值</strong>，而<strong>需要输入整数</strong>，如0,1,2,3等。</li></ul></blockquote><h2 id="6-函数类型"><a href="#6-函数类型" class="headerlink" title="6. 函数类型"></a>6. 函数类型</h2><ul><li>（1）函数声明的类型称为<strong>函数类型</strong>。（注意：强调的是<strong>类型</strong>，类似我们常见的uint，string类型）</li><li>（2）<strong>函数类型</strong>可以作为函数参数<strong>的</strong>类型和函数返回值<strong>的</strong>类型。</li><li>（3）只要函数的<strong>参数个数</strong>、<strong>参数类型</strong>和<strong>函数返回值</strong>与<strong>函数类型</strong>一样，<strong>该函数</strong>就可以赋给一个<strong>函数类型</strong>的<strong>变量</strong>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//func是一个函数类型变量</span><br><span class="line">function (uint,uint) returns(uint) func; </span><br><span class="line">function add(uint x, uint y) public returns(uint)&#123;</span><br><span class="line">return x+y;</span><br><span class="line">&#125;</span><br><span class="line">function test() public&#123;</span><br><span class="line">// 将add函数赋给函数类型变量func</span><br><span class="line">func = add;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-函数和状态变量的4种可见性（访问权限）"><a href="#7-函数和状态变量的4种可见性（访问权限）" class="headerlink" title="7. 函数和状态变量的4种可见性（访问权限）"></a>7. 函数和状态变量的4种可见性（访问权限）</h2><h3 id="（1）访问权限"><a href="#（1）访问权限" class="headerlink" title="（1）访问权限"></a>（1）访问权限</h3><p><strong>（1）</strong> 如果<strong>不为函数指定访问权限</strong>，默认为<strong>public</strong>。<br><strong>（2）</strong> 合约的<strong>状态变量不能用external修饰</strong>，否则无法编译通过。<br><strong>（3）</strong> 如果<strong>不为状态变量指定访问权限</strong>，默认为<strong>internal</strong>。</p><p><strong>4类可见性（访问权限）</strong> 指定：</p><ul><li><strong>public</strong>：智能合约<strong>外部和内部</strong>都可使用的方法；<blockquote><p><strong>用public声明的状态变量</strong>，会自动产生一个<strong>getter函数</strong>。</p></blockquote></li><li><strong>internal</strong>：<strong>智能合约（包括派生合约，子合约）内部</strong>才可调用的方法；internal修饰的状态变量只能通过在内部的方式访问；</li><li><strong>external</strong>：可通过<strong>其他合约和交易</strong>进行调用的方法；<blockquote><p>（1）external函数不能直接调用，前面需要<strong>加this</strong>, 如this.func( )。<br>（2）在接收大量数据时，external函数有时更有效率。</p></blockquote></li><li><strong>private</strong>：只有<strong>在定义的合约中</strong>才可以调用，<strong>即使派生的合约也无法调用</strong>；用private修饰的状态变量也是如此，只在当前合约中可以访问（子合约也不能访问）。</li></ul><h3 id="（2）getter函数"><a href="#（2）getter函数" class="headerlink" title="（2）getter函数"></a>（2）getter函数</h3><p>如果合约的<strong>状态变量使用public修饰</strong>，Solidity编译器会自动为状态变量生成一个<strong>与状态变量同名</strong>的<strong>getter函数</strong>，<strong>用于获取状态变量的值</strong>。</p><ul><li>（1）如果状态变量的数据类型比较复杂，如mapping，生成的getter函数会带一些参数。</li><li>（2）尽管自动生成的getter函数使用external修饰，但是不能在合约内使用this调用。（尽管不会产生编译错误，但是无法成功部署合约）</li><li>（3）在合约内部，getter函数会解析为状态变量。<blockquote><p>例如，如果状态变量persons是mapping类型，在<strong>合约内部</strong>应该使用<strong>persons[key]</strong>, 而不是this.persons(key)形式。<br>不过在<strong>合约外部</strong>必须使用<strong>getter函数形式</strong>引用persons。（如：my.persons(key), my为创建的合约对象名，persons(key)即为状态变量persons的getter函数形式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.20 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">contract MyContract&#123;</span><br><span class="line">    uint public data = 115;</span><br><span class="line">    string public personName;</span><br><span class="line">    uint public personAge;</span><br><span class="line">    struct Person&#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint age;</span><br><span class="line">    &#125;</span><br><span class="line">    mapping(uint=&gt;Person) public persons;</span><br><span class="line"></span><br><span class="line">    constructor() public&#123;</span><br><span class="line">        data = 200;</span><br><span class="line">        // 创建Person结构体的实例</span><br><span class="line">        Person memory person = Person(&#123;</span><br><span class="line">            name:&quot;Lebron James&quot;,</span><br><span class="line">            age:34</span><br><span class="line">        &#125;);</span><br><span class="line">        // 将person添加到persons映射中</span><br><span class="line">        persons[10] = person;</span><br><span class="line">        // 在合约内部不能使用persons的getter函数形式引用persons映射，</span><br><span class="line">        // 所以尽管下面的代码编译不会出错，但无法成功部署在以太坊上。</span><br><span class="line">        // (string memory name,uint age) = this.persons(10);</span><br><span class="line">        </span><br><span class="line">        string memory name = persons[10].name;</span><br><span class="line">        uint age = persons[10].age;</span><br><span class="line">        personName = name;</span><br><span class="line">        personAge = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract GetterContract&#123;</span><br><span class="line">    MyContract my = new MyContract();</span><br><span class="line">    function getData() public view returns(uint)&#123;</span><br><span class="line">        // 调用MyContract合约中的data状态变量对应的getter函数（data函数）</span><br><span class="line">        return my.data();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getPerson(uint id) public view returns(string memory,uint)&#123;</span><br><span class="line">        // 调用MyContract合约中persons状态变量对应的getter函数（persons函数）</span><br><span class="line">        // 该函数返回了多个值，这些值都是Person结构体的成员，</span><br><span class="line">        // 如果这个结构体的某个成员的数据类型无法通过函数返回（如mapping），那么系统就会忽略这个结构体成员。</span><br><span class="line">        (string memory name,uint age) = my.persons(id);</span><br><span class="line">        return (name,age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="8-数组（稍有不同）"><a href="#8-数组（稍有不同）" class="headerlink" title="8. 数组（稍有不同）"></a>8. 数组（稍有不同）</h2><h3 id="（1）不同之处"><a href="#（1）不同之处" class="headerlink" title="（1）不同之处"></a>（1）不同之处</h3><p>solidity中数组与大多数语言稍有不同。具体如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个j行i列的二维数组（注意：定义的时候列在前面，行在后面）</span><br><span class="line">int[i][j]  arrayName;</span><br><span class="line">// 为数组arrayName的第m行第n列元素赋值，赋值为20.( 注意：赋值的时候，行在前面，列在后面)</span><br><span class="line">arrayName[m][n] = 20;</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>（1）<strong>定义的时候列在前面，行在后面</strong>；</li><li>（2）<strong>赋值的时候，行在前面，列在后面</strong>；</li></ul></blockquote><h3 id="（2）注意事项（一）"><a href="#（2）注意事项（一）" class="headerlink" title="（2）注意事项（一）"></a>（2）注意事项（一）</h3><ul><li>对于<strong>storage</strong>数组，<strong>可以保存任意类型的数据</strong>，包括另一个数组、映射或结构体。</li><li>但对于<strong>memory</strong>数组，<strong>不能存储映射类型的数据</strong>。</li><li>如果作为 <strong>public 函数的参数</strong>，它<strong>只能是 ABI 类型</strong>。<h3 id="（3）注意事项（二）"><a href="#（3）注意事项（二）" class="headerlink" title="（3）注意事项（二）"></a>（3）注意事项（二）</h3></li><li><strong>（1）</strong> 如果你在一个空数组中使用.length，这将会造成向下溢出(不减小反而增大)，导致长度变为2^256-1。</li><li><strong>（2）</strong> 增加一个storage数组的长度花费的gas成本是一个常量值，因为storage变量被当作是zero-initialised(领初始化)的；<br>而减少storage数组的长度花费的gas成本至少是线性增长的（但事实上，大多数都要高于线性增长），因为其包含了显式清除要被删除的元素（类似于调用delete方法）。</li><li><strong>（3）</strong> 外部函数中暂时还不支持使用多维数组（但在public函数是支持的）。</li></ul><h3 id="（4）数组成员"><a href="#（4）数组成员" class="headerlink" title="（4）数组成员"></a>（4）数组成员</h3><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><p>数组的成员变量length表示当前数组的长度。 </p><ul><li>（1）动态数组可以在storage中通过改变成员变量 .length 改变数组大小（在memory中是不可以的）。 </li><li>（2）并<strong>不能通过访问超出当前数组长度</strong>的方式实现<strong>自动扩展数组的长度</strong>。</li><li>（3）一经创建，memory数组的大小就是固定的（但却是动态的，也就是说，它依赖于运行时的参数）。</li><li>（4）如果你尝试<strong>改变</strong>一个<strong>不在storage中的非动态数组的大小</strong>，你将会收到一个“<strong>Value must be an Ivalue</strong>”的错误。</li></ul><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p>storage的动态数组以及 bytes类型（字节数组）都有一个叫做 push 的成员函数，它用来添加新的元素到数组末尾。 这个函数将返回<strong>新的数组长度</strong>。</p><blockquote><p>注意：<strong>string即字节数组是没有push方法的</strong>。</p></blockquote><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><p>storage的动态数组和bytes数组（字节数组）都有一个叫做pop的成员函数，用于从数组的末尾删除元素。<br>其在删除元素的时候隐式地调用了delete方法。</p><blockquote><p>注意：<strong>string即字节数组是没有pop方法的</strong>。</p></blockquote><h3 id="（5）实例"><a href="#（5）实例" class="headerlink" title="（5）实例"></a>（5）实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.16 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract ArrayContract &#123;</span><br><span class="line">    uint[2**20] m_aLotOfIntegers; // 数组大小为2的20次方</span><br><span class="line">    // m_pairsOfFlags不是一对动态数组，而是一个数组元素为两个变量的动态数组（说白了就是其每个元素是一个长度为2的数组）</span><br><span class="line">    bool[2][] m_pairsOfFlags; // 列数为2，行数为动态的</span><br><span class="line"></span><br><span class="line">    // newPairs是一个数组元素为两个bool类型变量的动态数组（其每个元素是一个包含两个bool变量的数组）</span><br><span class="line">    function setAllFlagPairs(bool[2][] memory newPairs) public &#123;</span><br><span class="line">        // 将newPairs数组赋值给storage数组的m_pairsOfFlags,m_pairsOfFlags的值将会被newPairs中的值替换。</span><br><span class="line">        m_pairsOfFlags = newPairs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct StructType &#123;</span><br><span class="line">        uint[] contents;</span><br><span class="line">        uint moreInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    StructType s;</span><br><span class="line"></span><br><span class="line">    function f(uint[] memory c) public &#123;</span><br><span class="line">        // 将类型为StructType结构体变量s的指针（引用）赋值给g</span><br><span class="line">        StructType storage g = s;</span><br><span class="line">        // 改变结构体变量g中的成员属性值，其实也在改变s中的成员属性值（因为s和g指向同一块数据区域）</span><br><span class="line">        g.moreInfo = 2;</span><br><span class="line">        // 将c的值赋值给g.contents（虽然g.contents不是一个局部变量，但它是某个局部变量的一个成员）</span><br><span class="line">        g.contents = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setFlagPair(uint index, bool flagA, bool flagB) public &#123;</span><br><span class="line">        // 访问一个不存在数组下标会抛异常</span><br><span class="line">        m_pairsOfFlags[index][0] = flagA; // 将flagA赋值给第index行第0列的元素</span><br><span class="line">        m_pairsOfFlags[index][1] = flagB; // 将flagB赋值给第index行第1列的元素</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changeFlagArraySize(uint newSize) public &#123;</span><br><span class="line">        // 如果所赋给的新长度值小于原数组长度值，则会把原数组在新长度之外的元素删除。</span><br><span class="line">        m_pairsOfFlags.length = newSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function clear() public &#123;</span><br><span class="line">        // 将数组清空</span><br><span class="line">        delete m_pairsOfFlags;</span><br><span class="line">        delete m_aLotOfIntegers;</span><br><span class="line">        // 与上面效果相同（清空数组）</span><br><span class="line">        m_pairsOfFlags.length = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bytes m_byteData;</span><br><span class="line"></span><br><span class="line">    function byteArrays(bytes memory data) public &#123;</span><br><span class="line">        // 字节数组（bytes）是不一样的,因为它们不是填充式存储，但是它们可以被当作和uint8[]一样对待。</span><br><span class="line">        m_byteData = data;</span><br><span class="line">        m_byteData.length += 7;</span><br><span class="line">        m_byteData[3] = 0x08;</span><br><span class="line">        delete m_byteData[2];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function addFlag(bool[2] memory flag) public returns (uint) &#123;</span><br><span class="line">        return m_pairsOfFlags.push(flag); // 向二维动态数组添加新元素（这里添加的元素是一个长度为2的数组），给二维数组增加一行</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function createMemoryArray(uint size) public pure returns (bytes memory) &#123;</span><br><span class="line">        // 使用new关键字进行动态数组的创建</span><br><span class="line">        uint[2][] memory arrayOfPairs = new uint[2][](size);</span><br><span class="line"></span><br><span class="line">        // 内联数组总是静态大小的，如果你只是使用字面量，则你必须提供至少一种类型。</span><br><span class="line">        arrayOfPairs[0] = [uint(1), 2];</span><br><span class="line"></span><br><span class="line">        // 创建一个动态数组</span><br><span class="line">        bytes memory b = new bytes(200);</span><br><span class="line">        for (uint i = 0; i &lt; b.length; i++)</span><br><span class="line">            b[i] = byte(uint8(i));</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://solidity.readthedocs.io/en/latest/types.html#arrays" target="_blank" rel="noopener">Array</a></p><h2 id="9-结构体（struct）"><a href="#9-结构体（struct）" class="headerlink" title="9. 结构体（struct）"></a>9. 结构体（struct）</h2><h3 id="（1）定义"><a href="#（1）定义" class="headerlink" title="（1）定义"></a>（1）定义</h3><p>结构体用于自定义数据类型，结构体成员可以是任何数据类型，甚至可以是结构体本身。</p><ul><li>（1）结构体<strong>可用于函数返回值</strong>，但是要在智能合约<strong>内部调用</strong>，否则会抛出异常。</li><li>（2）如果<strong>要返回结构体中成员的值</strong>，可以使用<strong>返回多个值的函数</strong>。<h3 id="（2）实例"><a href="#（2）实例" class="headerlink" title="（2）实例"></a>（2）实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.16 &lt;= 0.7.0;</span><br><span class="line"></span><br><span class="line">contract StructContract_1&#123;</span><br><span class="line">    // 定义结构体类型</span><br><span class="line">    struct Job&#123;</span><br><span class="line">        uint id;</span><br><span class="line">        string name;</span><br><span class="line">        string company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct Person&#123;</span><br><span class="line">        uint id;</span><br><span class="line">        string name;</span><br><span class="line">        uint age;</span><br><span class="line">        Job job; // 结构体类型中引用结构体变量（结构体变量作为结构体类型的成员）</span><br><span class="line">    &#125;</span><br><span class="line">    // Job public job;</span><br><span class="line">    // 声明一个Person类型的变量</span><br><span class="line">    Person  person;</span><br><span class="line">    </span><br><span class="line">    // 初始化结构体 </span><br><span class="line">    // 方法一：按照结构体中命名参数进行初始化</span><br><span class="line">    Person personA = Person(&#123;</span><br><span class="line">        id:10002,</span><br><span class="line">        name:&quot;Kobe Bryant&quot;,</span><br><span class="line">        age:39,</span><br><span class="line">        job:Job(&#123;   //结构体中包含结构体</span><br><span class="line">            id:102,</span><br><span class="line">            name:&quot;Basketball Player&quot;,</span><br><span class="line">            company:&quot;NBA&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    // 方法二：按照结构体中定义的顺序初始化</span><br><span class="line">    Job jobA = Job(103,&quot;NBA Retired Players&quot;,&quot;Home&quot;);</span><br><span class="line">    Person personB = Person(10003,&quot;Dwyane Wade&quot;,36,Job(104,&quot;LiNing Spokeman&quot;,&quot;LiNing&quot;));</span><br><span class="line">    Person personC = Person(10004,&quot;Chris Bosh&quot;,35,jobA);</span><br><span class="line">    //通过构造函数初始化结构体类型变量</span><br><span class="line">    constructor (uint personId,string memory name,uint age) public&#123;</span><br><span class="line">        // 初始化结构体变量</span><br><span class="line">        Job memory job = Job(&#123;</span><br><span class="line">            id:101,</span><br><span class="line">            name:&quot;Software Engineer&quot;,</span><br><span class="line">            company:&quot;Google&quot;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">       person = Person(&#123;</span><br><span class="line">            id:personId,</span><br><span class="line">            name:name,</span><br><span class="line">            age:age,</span><br><span class="line">            job:job</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 修改工作属性（修改结构体变量的值）</span><br><span class="line">    function setJob(string memory jobName,string memory company) public&#123;</span><br><span class="line">        // job.name = jobName;</span><br><span class="line">        // job.company = company;</span><br><span class="line">        person.job.name = jobName;</span><br><span class="line">        person.job.company = company;</span><br><span class="line">        // 重置为初始值，把struct中的所有变量的值设置为0，除了mapping类型</span><br><span class="line">        // delete person; //也须写在函数内部</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 要用结构体当作返回值，必须将函数定义为internal，即合约内部可见（函数仅在合约内部可调用）</span><br><span class="line">    // 必须在内部调用（需要使用internal声明函数），否则会抛出异常</span><br><span class="line">    function getPerson() internal view returns(Person memory)&#123;</span><br><span class="line">        return person; // 返回构造体类型的值</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 获取人员的姓名、年龄、工作等信息（获取结构体的成员值）</span><br><span class="line">    function callGetPerson() public  returns(string memory,uint,string memory,string memory)&#123;</span><br><span class="line">        person = getPerson();</span><br><span class="line">        return (person.name,person.age,person.job.name,person.job.company);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 1,&quot;Lebron James&quot;,34    &quot;BasketBall Player&quot;,&quot;NBA&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="10-映射（mapping）"><a href="#10-映射（mapping）" class="headerlink" title="10. 映射（mapping）"></a>10. 映射（mapping）</h2><h3 id="（1）定义-1"><a href="#（1）定义-1" class="headerlink" title="（1）定义"></a>（1）定义</h3><p>映射与字典类似，<strong>通过key获取对应的value值</strong>。</p><ul><li><strong>key</strong>：可以是<strong>除了映射外</strong>的任何数据类型；</li><li><strong>value</strong>：任何数据类型；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapping(keyType=&gt;valueType) varName;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（2）实例-1"><a href="#（2）实例-1" class="headerlink" title="（2）实例"></a>（2）实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.16 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">contract MappingContract&#123;</span><br><span class="line">    //声明映射类型的变量names</span><br><span class="line">    mapping(uint=&gt;string) public names;</span><br><span class="line">    // 定义Person结构体类型</span><br><span class="line">    struct Person&#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint age;</span><br><span class="line">        string job;</span><br><span class="line">    &#125;</span><br><span class="line">    //声明映射类型的变量persons</span><br><span class="line">    mapping(uint=&gt;Person) public persons;</span><br><span class="line">    // 通过合约的构造函数向映射变量names添加值</span><br><span class="line">    constructor (uint id,string memory name) public&#123;</span><br><span class="line">        names[id] = name; //映射变量的赋值</span><br><span class="line">    &#125;</span><br><span class="line">    // 根据key值从映射类型变量中获取相应的value值</span><br><span class="line">    function getValue(uint id) public view returns(string memory)&#123;</span><br><span class="line">        return names[id];</span><br><span class="line">    &#125;</span><br><span class="line">    // 向映射类型变量中添加值</span><br><span class="line">    function addPerson(uint id,string memory name,uint age,string memory job) public&#123;</span><br><span class="line">        // 先初始化结构体</span><br><span class="line">        Person memory person = Person(&#123;</span><br><span class="line">            name:name,</span><br><span class="line">            age:age,</span><br><span class="line">            job:job</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        persons[id] = person; //增加一个person（向映射类型变量中添加值）</span><br><span class="line">    &#125;</span><br><span class="line">    // 根据id(key)从persons映射获取Person对象，并通过返回多值函数返回Person结构体的成员</span><br><span class="line">    </span><br><span class="line">    function getPerson(uint id) public view returns(string memory name,uint age,string memory job)&#123;</span><br><span class="line">        // 返回多个值</span><br><span class="line">        // 方法一：多返回值函数可以通过定义具体的函数返回值接收多个返回值，而不使用return关键字</span><br><span class="line">        name = persons[id].name;</span><br><span class="line">        age = persons[id].age;</span><br><span class="line">        job = persons[id].job;</span><br><span class="line">        // 方法二：使用return关键字(多个返回值，需用括号括起来)</span><br><span class="line">        // return (persons[id].name,persons[id].age,persons[id].job);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 测试数据</span><br><span class="line">// 1001,&quot;Lebron James&quot;</span><br><span class="line">// 1002,&quot;Dwyane Wade&quot;,36,&quot;NBA Player&quot;</span><br><span class="line">// 1003,&quot;Kobe Bryant&quot;,39,&quot;World Cup Spokeman&quot;</span><br></pre></td></tr></table></figure><blockquote><p>实例中有提到两种不同的方式返回多个值</p><h2 id="11-函数参数和函数返回值"><a href="#11-函数参数和函数返回值" class="headerlink" title="11.函数参数和函数返回值"></a>11.函数参数和函数返回值</h2><h3 id="（1）函数参数"><a href="#（1）函数参数" class="headerlink" title="（1）函数参数"></a>（1）函数参数</h3><p>在函数中，如果某个<strong>参数未使用</strong>，<strong>只需保留参数类型</strong>，参数名可以省略。</p><h3 id="（2）函数返回值"><a href="#（2）函数返回值" class="headerlink" title="（2）函数返回值"></a>（2）函数返回值</h3><p><strong>函数返回值</strong>可以直接指定<strong>返回值类型</strong>，也可以<strong>为返回值指定变量名</strong>，声明返回值类型的方式与声明函数参数的方式相同，所以也可以将函数返回值称为<strong>函数输出和参数</strong>。</p><ul><li>返回值类型要使用returns指定，多个返回值类型中间用逗号（ , ）分隔；</li><li>如果<strong>为函数返回值指定变量名</strong>，<strong>可以不使用return返回</strong>，直接<strong>为函数输出参数变量赋值</strong>即可。</li></ul></blockquote><p>返回多个值的两种方法</p><ul><li><p><strong>方法一：</strong> 函数可以通过设置<strong>多个具体的函数返回值变量</strong>接收多个返回值，而不使用return关键字，就可实现多个值的返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> function getPerson(uint id) public view returns(string memory name,uint age,string memory job)&#123;</span><br><span class="line">        name = persons[id].name;</span><br><span class="line">        age = persons[id].age;</span><br><span class="line">        job = persons[id].job;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方法二：</strong> 使用return关键字(多个返回值，需用括号括起来)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> function getPerson(uint id) public view returns(string memory, uint ,string memory)&#123;</span><br><span class="line">        return (persons[id].name,persons[id].age,persons[id].job);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="12-调用其他合约中的函数"><a href="#12-调用其他合约中的函数" class="headerlink" title="12. 调用其他合约中的函数"></a>12. 调用其他合约中的函数</h2><h3 id="（1）定义-2"><a href="#（1）定义-2" class="headerlink" title="（1）定义"></a>（1）定义</h3><p>当前合约中的函数调用其他合约中的函数的两个前提条件：</p><ul><li>（1）<strong>被调用函数所在的合约</strong>必须<strong>已经成功部署在以太坊网络上</strong>（或在本地的测试环境）。</li><li>（2）需要知道<strong>被调用函数所在的合约的地址</strong>。</li></ul><h3 id="（2）实例-2"><a href="#（2）实例-2" class="headerlink" title="（2）实例"></a>（2）实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// CallOtherContract.sol</span><br><span class="line">pragma solidity &gt;=0.4.16 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">注意：</span><br><span class="line"> （1）在部署FunCallContract之前，必须先部署FactorialContract合约，否则就无法获得FactorialContract的地址。</span><br><span class="line"> （2）部署完FactorialContract合约之后，将FactorialContract合约的地址作为FunCallContract合约的构造参数</span><br><span class="line">       传入FunCallContract合约，然后部署FunCallContract合约。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 用于计算阶乘的合约</span><br><span class="line">contract FactorialContract&#123;</span><br><span class="line">    // 计算阶乘的函数</span><br><span class="line">    function getFactorial(uint n) public returns(uint)&#123;</span><br><span class="line">        if(n==0 || n==1)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            return getFactorial(n-1)*n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 调用FactorialContract.getFactorial函数计算阶乘</span><br><span class="line">contract FunCallContract&#123;</span><br><span class="line">    FactorialContract factorial;</span><br><span class="line">    //在构造函数中创建FactorialContract合约的实例，</span><br><span class="line">    // 必须通过FunCallContract构造函数的参数指定FactorialContract合约的地址。</span><br><span class="line">    constructor(address addr) public&#123;</span><br><span class="line">        factorial = FactorialContract(addr);//实例化合约实例的时候需要传入其合约的地址</span><br><span class="line">    &#125;</span><br><span class="line">    // 计算阶乘</span><br><span class="line">    function jiecheng(uint n) public returns(uint)&#123;</span><br><span class="line">        return factorial.getFactorial(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-通过new关键字创建合约对象"><a href="#12-通过new关键字创建合约对象" class="headerlink" title="12. 通过new关键字创建合约对象"></a>12. 通过new关键字创建合约对象</h2><p>通过new关键字创建合约对象<strong>最大的优势</strong>：<br><strong>不需要</strong>先部署被调用函数所在的合约，并先获取被调用函数所在合约的地址，<strong>然后</strong>才能部署调用函数的合约。</p><blockquote><p>换句话说就是，合约A调用合约B中的函数还需要先部署合约B是比较麻烦的。但是通过new关键字创建合约对象，则不需要部署合约B就可以调用B中的函数。</p></blockquote><p>相对于上面CallOtherContract.sol的代码,只需将FunCallContract的构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">constructor(address addr) public&#123;</span><br><span class="line">        factorial = FactorialContract(addr);//实例化合约实例的时候需要传入其合约的地址</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// CallOtherContract_1.sol</span><br><span class="line">constructor() public&#123;</span><br><span class="line">         // 通过new关键字创建合约对象（此时不需要传入该合约对象的合约地址）</span><br><span class="line">        factorial = new FactorialContract();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其他不用变化。</p><blockquote><p>这样使用new关键字创建合约对象，就不需要先部署FactorialContract合约，并获取其合约的地址后，然后才能部署FunCallContract合约，在其合约内部调用其FactorialContract合约中的函数。<br>这里可以直接部署FunCallContract合约。</p><h2 id="13-函数的命名参数"><a href="#13-函数的命名参数" class="headerlink" title="13. 函数的命名参数"></a>13. 函数的命名参数</h2><p>在solidity语言中<strong>调用函数时可以指定命名参数</strong>，通过命名参数，<strong>可以不按<em>被调用函数的参数的定义的顺序</em>传入参数值</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.16 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">// 命名参数的使用</span><br><span class="line">contract NamedParameter&#123;</span><br><span class="line">    function sub(int n1,int n2) public pure returns(int) &#123;</span><br><span class="line">        return n1-n2;</span><br><span class="line">    &#125;</span><br><span class="line">    function fun() public pure returns(int)&#123;</span><br><span class="line">        // 通过函数的命名参数，可以不按被调用函数中的参数的定义顺序进行赋值</span><br><span class="line">        // 命名参数要通过&#123;...&#125;传递，有点类似于javascript中的对象</span><br><span class="line">        return sub(&#123;n2:66,n1:32&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="15-函数多返回值解构和元组赋值"><a href="#15-函数多返回值解构和元组赋值" class="headerlink" title="15. 函数多返回值解构和元组赋值"></a>15. 函数多返回值解构和元组赋值</h2><ul><li>（1）<strong>多返回值解构</strong>：如果函数返回多个值，可以支持将<strong>多个返回值</strong>分别赋给<strong>相应数目的变量</strong>。</li><li>（2）<strong>元组赋值</strong>：指赋值运算符（=）左侧和右侧都有n个变量。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.24 &lt;=0.7.0; //注意：只有0.4.24及以上版本才支持多返回值解构和元组赋值</span><br><span class="line"></span><br><span class="line">contract AssignmentContract&#123;</span><br><span class="line">    uint[] data;</span><br><span class="line">    function mulValueFun() public pure returns(uint,bool,uint)&#123;</span><br><span class="line">        return (2018,true,2019);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function assignment() public returns(uint xx,uint yy,bool bb,uint length)&#123;</span><br><span class="line">        // 多返回值解构赋值，x、b和y分别等于mulValueFun函数的3个返回值</span><br><span class="line">        (uint x,bool b,uint y) = mulValueFun();</span><br><span class="line">        // 交换x和y的值</span><br><span class="line">        (x,y)=(y,x);  //元组赋值</span><br><span class="line">        // 这里只指定了一个变量（data.length）,所以mulValueFun函数的其他返回值会被忽略</span><br><span class="line">        (data.length,,) = mulValueFun(); //未指定的变量，通过逗号（,）将位置留着</span><br><span class="line">        // 重新设置y变量的值</span><br><span class="line">        y = 123;</span><br><span class="line">        // 设置返回值</span><br><span class="line">        xx = x;</span><br><span class="line">        yy = y;</span><br><span class="line">        bb = b;</span><br><span class="line">        length = data.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="16-变量声明和作用域"><a href="#16-变量声明和作用域" class="headerlink" title="16. 变量声明和作用域"></a>16. 变量声明和作用域</h2><h3 id="（1）0-5-0版本之前"><a href="#（1）0-5-0版本之前" class="headerlink" title="（1）0.5.0版本之前"></a>（1）0.5.0版本之前</h3><p>在Solidity 0.5.0之前，Solidity语言的作用域规则继承自JavaScript。<br>在if、while、for循环中定义的变量仍然作用于{…}外面，也就是说 <strong>{…}中声明的变量</strong>，在 <strong>{…}外仍然可以使用</strong>。<br>换句话说，就是无论{..}内还是{…}外，都不能有同名的变量。</p><h3 id="（2）0-5-0版本之后"><a href="#（2）0-5-0版本之后" class="headerlink" title="（2）0.5.0版本之后"></a>（2）0.5.0版本之后</h3><p>在Solidity 0.5.0之后, 开始支持声明块（{…}）变量，也就是在 <strong>{…}中声明的变量只在{…}中有效</strong>，这就意味着在多个{…}中可以声明多个同名的变量。</p><h2 id="17-错误处理"><a href="#17-错误处理" class="headerlink" title="17. 错误处理"></a>17. 错误处理</h2><p>Solidity语言有3种与错误处理相关的函数：</p><ul><li>（1）<strong>require</strong>：用于<strong>校检外部输入</strong>，如函数的参数、调用外部函数的返回值等。</li><li>（2）<strong>assert</strong>：用于<strong>校检合约的内部错误</strong>。</li><li>（3）<strong>revert</strong>：<strong>抛出错误</strong>。</li></ul><p>Solidity语言的<strong>错误处理</strong>与数据库中的<strong>事务回滚</strong>类似，<strong>一旦发生错误</strong>，<strong>以前做的所有操作都将回滚</strong>，因为合约很可能涉及到转账等敏感操作，所以一旦有任何异常，必须全部恢复到最初的状态，以避免数据不一致的情况发生。</p><h2 id="18-全局变量"><a href="#18-全局变量" class="headerlink" title="18. 全局变量"></a>18. 全局变量</h2><h3 id="（1）block变量"><a href="#（1）block变量" class="headerlink" title="（1）block变量"></a>（1）block变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.20 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">contract BlockContract&#123;</span><br><span class="line">    function getBlockInfo() public view returns(address coinbase,uint difficulty,</span><br><span class="line">    uint gaslimit,uint number,uint timestamp)&#123;</span><br><span class="line">        coinbase = block.coinbase; //获取挖出当前区块的矿工的地址；</span><br><span class="line">        difficulty = block.difficulty; //获取当前区块的挖矿难度；</span><br><span class="line">        gaslimit = block.gaslimit; //获取当前区块的gas限制；</span><br><span class="line">        number = block.number; //获取当前区块的编号</span><br><span class="line">        timestamp = block.timestamp; //获取当前区块的时间戳（从Unix epoch即Unix纪元，从1970年1月1日开始）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）msg变量"><a href="#（2）msg变量" class="headerlink" title="（2）msg变量"></a>（2）msg变量</h3><ul><li>（1）执行函数包含参数：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.20 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">contract MsgContract&#123;</span><br><span class="line">    // 获取相关的系统信息</span><br><span class="line">    function getMsgInfo(uint x) public payable returns(bytes memory data,uint gas,address sender,bytes4 sig,uint value)&#123;</span><br><span class="line">        data = msg.data; //获取当前执行函数的调用数据（包含函数标识，即sha3散列值的前8位，若执行函数有参数，则还包含参数值）</span><br><span class="line">        // gas = msg.gas; // msg.gas已经被gasleft()函数取代</span><br><span class="line">        gas = gasleft(); // 获取剩余的gas</span><br><span class="line">        sender = msg.sender; // 获取当前执行函数的调用地址</span><br><span class="line">        sig = msg.sig; // 获取当前执行函数的标识（sha3散列值的前8位）</span><br><span class="line">        value = msg.value; // 当前被发送的wei的数量（使用该属性的函数要使用payable关键字修饰）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><img src="/2019/04/19/Solidity学习笔记/6c0db3c9538ce7d77d1515eec56b5731.png" title="The steps are as follows"><p><strong>结果：</strong><br><img src="/2019/04/19/Solidity学习笔记/ecd072b990c8c19ea00559dd3976b686.png" title="The result_1 are as follows"></p><ul><li>（2）执行函数不包含参数：</li></ul><p>把上述合约函数中的getMsgInfo(uint x)修改为getMsgInfo( ), 即去掉函数的参数。<br><strong>结果：</strong><br><img src="/2019/04/19/Solidity学习笔记/f356c1f6f0404c72d5d1658e5a27baa9.png" title="The result_2 are as follows"></p><blockquote><ul><li>msg.data表示当前执行函数的调用数据，包含函数标识（即sha3散列值的前8位）。如果<strong>执行函数包含参数</strong>，则<strong>其还包含参数值</strong>。</li><li>msg.sig表示当前执行函数的标识（即sha3散列值的前8位）。</li><li>换句话说，如果<strong>执行函数不包含参数</strong>，则msg.data(只包含函数标识)与msg.sig（函数标识）是<strong>一样的</strong>。</li></ul></blockquote><p>例如，若当前执行的函数是getMsgInfo( ),那么可以使用下面的Node.js代码获取该函数sha3散列值的前8位。该值与msg.data属性返回的值相同(即都是只包含函数标识)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Web3 = <span class="built_in">require</span>(<span class="string">'Web3'</span>);</span><br><span class="line">web3 = <span class="keyword">new</span> Web3( );</span><br><span class="line"><span class="comment">// 由于sha3函数返回的值前两位是表示十六进制的0x,所以从第3个字符开始截取，截取的长度为8位</span></span><br><span class="line">sign = web3.sha3(<span class="string">"getMsgInfo( )"</span>).substr(<span class="number">2</span>,<span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sign); <span class="comment">//输出 4c668374</span></span><br></pre></td></tr></table></figure></p><h3 id="（3）其他全局变量"><a href="#（3）其他全局变量" class="headerlink" title="（3）其他全局变量"></a>（3）其他全局变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.22 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">// 其他全局变量</span><br><span class="line">contract OtherGlobalContract&#123;</span><br><span class="line">    // 获取其他全局变量的值</span><br><span class="line">    function getOtherGlobal() public view returns(bytes32 hash,uint nowTime,uint gasPrice,address origin)&#123;</span><br><span class="line">        // 获取指定区块的哈希值（要传入区块号）</span><br><span class="line">        hash = blockhash(1001);</span><br><span class="line">        // 获取当前区块的时间戳（与block.timestamp属性返回的值相同）</span><br><span class="line">        nowTime = now;</span><br><span class="line">        // 获取交易的gas价格</span><br><span class="line">        gasPrice = tx.gasprice;</span><br><span class="line">        // 获取发送交易的地址</span><br><span class="line">        origin = tx.origin; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-自定义修饰符（modifier）"><a href="#19-自定义修饰符（modifier）" class="headerlink" title="19. 自定义修饰符（modifier）"></a>19. 自定义修饰符（modifier）</h2><p>modifier常用于<strong>在函数执行前检查某种前置条件是否满足</strong>，modifier是一种合约属性，<strong>可以被继承</strong>（子合约可以使用父合约中定义的modifier），同时<strong>还可被派生的合约重写</strong>（override）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modifier  modiferName&#123;</span><br><span class="line">    //校检代码</span><br><span class="line">    _;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>校检代码</strong>用于校检<strong>使用自定义修饰符的函数</strong>，后面必须跟一个下划线（_）,而且下划线后面跟分号（ ; ）。如果通过校检，将<strong>使用该定义修饰符的函数的函数体</strong>插入到下划线的位置。也可以认为自定义修饰符其实就是<strong>多个函数相同代码的抽象</strong>，除了校检代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.20 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract OwnerContract&#123;</span><br><span class="line">    address owner;</span><br><span class="line">    // 保存部署合约的账号</span><br><span class="line">    constructor() public&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    // 定义用于检测msg.sender是否为部署合约的账号，如果不是，终止执行函数</span><br><span class="line">    modifier onlyOwner&#123;</span><br><span class="line">        require(msg.sender == owner,&quot;Only owner can call this function.&quot;);</span><br><span class="line">        _;   // 如果校检通过，会将使用onlyOwner函数的函数体插到这个位置。</span><br><span class="line">    &#125;</span><br><span class="line">    // 校检地址是否可以为空</span><br><span class="line">    // 当输入的_address为0x0000000000000000000000000000000000000000(0x后40个0)，会抛出“_address can not be 0!”</span><br><span class="line">    modifier notNull(address _address)&#123;</span><br><span class="line">        require(_address != address(0),&quot;_address can not be 0!&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    // 一个函数可以有多个修饰符，多个修饰符之间用空格或回车分隔，修饰符的生效顺序与定义顺序是一样的</span><br><span class="line">    // 修改合约所有者</span><br><span class="line">    function changeOwner(address newOwner) notNull(newOwner) onlyOwner() public&#123;</span><br><span class="line">        owner = newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//从OwnerContract继承 </span><br><span class="line">contract AddContract is OwnerContract&#123;</span><br><span class="line">    // 使用onlyOwner修饰函数</span><br><span class="line">    function add(uint m,uint n)  public view onlyOwner() returns(uint)&#123;</span><br><span class="line">        return m+n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract RestrictContract&#123;</span><br><span class="line">    uint public mm;</span><br><span class="line">    uint public nn;</span><br><span class="line">    // 用于校检 m是否大于或等于n,如果不满足条件，相当于将使用restrict1函数的函数体删除</span><br><span class="line">    modifier restrict1(uint m,uint n)&#123;</span><br><span class="line">        if(m&gt;=n)&#123; //如果不满足条件，相当于将使用restrict1函数的函数体删除</span><br><span class="line">            _;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 除了校检m是否大于n外，还将m和n分别保存在mm和nn变量中</span><br><span class="line">    modifier restrict2(uint m,uint n)&#123;</span><br><span class="line">        require(m&gt;=n,&quot;m can not less than n&quot;);</span><br><span class="line">        mm = m;</span><br><span class="line">        nn = n;</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 从RestrictContract合约继承</span><br><span class="line">contract SubContract is RestrictContract&#123;</span><br><span class="line">    // 使用restrict1修饰sub1函数</span><br><span class="line">    function sub1(uint m,uint n) public pure restrict1(m,n) returns(uint)&#123;</span><br><span class="line">        return m-n;</span><br><span class="line">    &#125;</span><br><span class="line">    // 使用restrict2修饰sub2函数</span><br><span class="line">    function sub2(uint m,uint n) public restrict2(m,n) returns(uint)&#123;</span><br><span class="line">        return m-n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="20-pure和view"><a href="#20-pure和view" class="headerlink" title="20. pure和view"></a>20. pure和view</h2><h3 id="（1）pure"><a href="#（1）pure" class="headerlink" title="（1）pure"></a>（1）pure</h3><p>使用<strong>pure</strong>关键字修饰的函数<strong>不允许<em>读写</em> 状态变量</strong>，否则会编译出错。<br>下面几种情况会被认为是读写状态变量，在这些情况下，用pure关键字修饰函数就会编译错误：</p><ul><li>（1）直接读取状态变量；</li><li>（2）访问 <strong>this.balance</strong>或 <strong><address>.balance</address></strong>；</li><li>（3）<strong>访问任何block、tx、msg变量中的成员</strong>，但<strong>msg.sig和msg.data除外</strong>。</li><li>（4）<strong>调用任何没有使用pure修饰的函数</strong>，哪怕是这个函数中确实没有读写任何状态变量。</li><li>（5）内嵌用于操作状态变量的汇编代码的函数。</li></ul><h3 id="（2）view"><a href="#（2）view" class="headerlink" title="（2）view"></a>（2）view</h3><p>使用<strong>view</strong>关键字修饰函数时，表示该函数<strong>不会修改状态变量</strong>。<br>下面几种情况表明函数会修改合约的状态变：</p><ul><li>（1）只写修改状态变量；</li><li>（2）<strong>触发事件</strong>；</li><li>（3）<strong>创建其他合约的实例</strong>；</li><li>（4）调用<strong>selfdestruct</strong>函数销毁合约；</li><li>（5）<strong>通过call函数方发送以太币</strong>；</li><li>（6）调用<strong>任何未标记view或pure函数</strong>；</li><li>（7）使用底层的call函数；</li><li>（8）内嵌用于操作状态变量的汇编代码的函数；<blockquote><p><strong>需要注意的是</strong>：用view修饰的函数<strong>并不会阻止函数中修改状态变量</strong>，<strong>只是</strong>在用view修饰的函数中修改状态变量<strong>会出现警告</strong>。（不报错，只出现警告）</p></blockquote></li></ul><h2 id="21-fallback函数（回调函数）"><a href="#21-fallback函数（回调函数）" class="headerlink" title="21. fallback函数（回调函数）*"></a>21. fallback函数（回调函数）*</h2><p>fallback函数：一个没有函数名、参数和返回值的函数。必须用external进行修饰。<br>在下面两种情况下会调用fallback函数：</p><ul><li><p><strong>（1）</strong> 合约中<strong>没有匹配的函数标识</strong>。</p><blockquote><p>换句话说，就是</p><ol><li>该合约没有其他函数；</li><li>调用合约时，如果没有匹配上该合约中的任何一个函数，就会调用回调函数。</li></ol></blockquote></li><li><p><strong>（2）</strong> <strong>合约接收到以太币（交易中没有附带任何其他数据）</strong>，也会调用回调函数。</p><blockquote><p><strong>注意：</strong></p><ol><li>这种情况下，fallback函数要使用<strong>payable</strong>关键字修饰，否则<strong>给包含fallback函数的合约发送以太币时</strong>会<strong>出现编译错误</strong>。</li><li>即使 <strong>fallback 函数不能有参数</strong>，<strong>仍然可以</strong>使用 <strong>msg.data</strong> 来<strong>获取随调用提供的任何有效数据</strong>。</li></ol></blockquote></li></ul><p>另外，还需注意以下几点：</p><ul><li><strong>（1）</strong> 如果调用者想调用一个不存在的函数，fallback函数将会被执行。</li><li><strong>（2）</strong> 如果你<strong>只想为了接收以太币</strong>而实现fallback函数，你需要<strong>增加一些校检</strong>（如 <strong>require(msg.data.length == 0 )</strong> ）去避免一些无效的调用。</li><li><strong>（3）</strong> 一个没有定义fallback函数（回调函数）的合约直接接收以太币（没有函数调用，如使用send或transfer），则会抛出一个异常，并返还以太币（有些行为在Solidity V0.4.0之前有些不同）。因此如果你要使你的合约接收以太币，你就必须实现一个被payable修饰的fallback函数。<blockquote><p>一个没有 payable fallback 函数的合约，可以作为 <strong>coinbase transaction</strong> （又名 miner block reward ）<strong>的接收者</strong>或者作为 <strong>selfdestruct 的目标</strong>来接收以太币。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.5.0 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">contract Test&#123;</span><br><span class="line">    uint x;</span><br><span class="line">    // （1）给这个合约发送任何消息都会调用这个函数（因为合约没有其他函数）</span><br><span class="line">    // 定义一个fallback函数，在该函数中设置了状态变量x。</span><br><span class="line">    // （2）向这个合约发送以太币将会抛出一个异常，因为这个回调函数没有用“payable”修饰符修饰。</span><br><span class="line">    function() external&#123; x=101; &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Sink&#123;</span><br><span class="line">    // 定义了一个fallback函数，该函数使用payable修饰，表明可以接受其他地址发过来的以太币。</span><br><span class="line">    function() external payable&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Caller&#123;</span><br><span class="line">    function callTest(Test test) public returns(bool)&#123;</span><br><span class="line">        // 这里调用一个不存在的函数，由于匹配不到函数，所以将调用Test合约中的回调函数。</span><br><span class="line">        (bool success,) = address(test).call(abi.encodeWithSignature(&quot;nonExitingFunction()&quot;));</span><br><span class="line">        require(success);</span><br><span class="line">        // address(test)不允许直接调用“send”方法，因为“test”没有被“payable”修饰的回调函数。</span><br><span class="line">        // 其必须通过“uint160”进行一个中间转换，然后再转换为“address payable”类型才能调用“send”方法。</span><br><span class="line">        address payable testPayable = address(uint160(address(test)));</span><br><span class="line">        // 如果某人发送以太币给那个合约，这笔交易将会失败（例如，这里将会返回false）</span><br><span class="line">        return testPayable.send(2 ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function callSink(address payable sinkAddress) public returns(bool)&#123;</span><br><span class="line">        Sink sink = Sink(sinkAddress);</span><br><span class="line">        // 如果向Sink合约发送以太币时发送成功，Sink中的fallback函数会被调用</span><br><span class="line">        return address(sink).send(5 ether);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>参考：<a href="https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function" target="_blank" rel="noopener">Fallback Function</a></p><h2 id="22-函数重载"><a href="#22-函数重载" class="headerlink" title="22. 函数重载"></a>22. 函数重载</h2><h3 id="（1）定义-3"><a href="#（1）定义-3" class="headerlink" title="（1）定义"></a>（1）定义</h3><p><strong>函数重载</strong>是指一个合约中定义了<strong>多个函数名相同</strong>，但<strong>参数个数和类型不同</strong>的函数。（不考虑返回值）</p><blockquote><p><strong>需要注意的是</strong>：<br>如果<strong>函数参数类型是可以转换的</strong>，例如合约和address，Solidity编译器就<strong>会认为它们是同一个数据类型</strong>，因此会产生<strong>编译错误</strong>。</p></blockquote><h3 id="（2）实例-3"><a href="#（2）实例-3" class="headerlink" title="（2）实例"></a>（2）实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.20 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">// 拥有4个同名的重载函数</span><br><span class="line">contract OverloadContract1&#123;</span><br><span class="line">    // 拥有2个uint类型的参数</span><br><span class="line">    function add(uint m,uint n) public pure returns(uint)&#123;</span><br><span class="line">        return m+n;</span><br><span class="line">    &#125;</span><br><span class="line">    // 没有参数</span><br><span class="line">    function add() public pure returns(uint)&#123;</span><br><span class="line">        return 11+22;</span><br><span class="line">    &#125;</span><br><span class="line">    // 有一个bool类型参数</span><br><span class="line">    function add(bool b) public pure returns(bool)&#123;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">    // 有3个uint类型的参数</span><br><span class="line">    function add(uint l,uint m,uint n) public pure returns(uint)&#123;</span><br><span class="line">        return l+m+n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract A&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 从表面上看第一个和第二个test函数的参数不一样，其实是一样的。因为合约A本身就是一个address类型</span><br><span class="line">// 所以OverloadContract2合约编译会失败，因为前两个test函数无法实现函数重载</span><br><span class="line">contract OverloadContract2&#123;</span><br><span class="line">    // 函数重载失败</span><br><span class="line">    function test(address addr) public view returns(uint)&#123;</span><br><span class="line">        return addr.balance;</span><br><span class="line">    &#125;</span><br><span class="line">    // 函数重载失败,具体报错：Function overload clash during conversion to external types for arguments.</span><br><span class="line">    // function test(A a) public view returns(uint)&#123;</span><br><span class="line">    //     return address(a).balance;</span><br><span class="line">    // &#125;</span><br><span class="line"></span><br><span class="line">    // 函数重载成功</span><br><span class="line">    function test(A a,uint b) public view returns(uint,uint)&#123;</span><br><span class="line">        return (address(a).balance,b);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="23-事件（event）"><a href="#23-事件（event）" class="headerlink" title="23. 事件（event）"></a>23. 事件（event）</h2><h3 id="（1）定义-4"><a href="#（1）定义-4" class="headerlink" title="（1）定义"></a>（1）定义</h3><p>如果将合约部署在<strong>TestRPC环境或者以太坊网络</strong>上，在<strong>执行以太坊函数时</strong>是<strong>无法直接获得函数的返回值的</strong>，但是可以<strong>通过事件将计算结果返回给客户端</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event EventName( typeName  parameter,... );</span><br></pre></td></tr></table></figure></p><h3 id="（2）实例-4"><a href="#（2）实例-4" class="headerlink" title="（2）实例"></a>（2）实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.20 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">contract EventContract&#123;</span><br><span class="line">    // 定义MyEvent事件</span><br><span class="line">    event MyEvent(</span><br><span class="line">        uint m,</span><br><span class="line">        uint n,</span><br><span class="line">        uint results</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    function add(uint m,uint n) public returns(uint)&#123;</span><br><span class="line">        uint results = m+n;</span><br><span class="line">        // 使用emit指令触发MyEvent事件，并通过事件参数传递m、n和m+n的计算结果（传递到客户端）</span><br><span class="line">        emit MyEvent(m,n,results);</span><br><span class="line">        return results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="24-合约继承"><a href="#24-合约继承" class="headerlink" title="24. 合约继承"></a>24. 合约继承</h2><p>合约继承，使用<strong>is</strong>关键字指定父合约。</p><ul><li><strong>（1）</strong> Solidity合约<strong>支持多继承</strong>，如果要指定多个合约，合约之间<strong>用逗号（ , ）分隔</strong>。</li><li><strong>（2）</strong> 尽管<strong>可以指定多个父合约</strong>，但是<strong>只会创建一个合约实例</strong>，将其他父合约中的代码复制到这个合约实例中。</li><li><strong>（3）</strong> 如果<strong>多个父合约实现了同样的函数</strong>，那么<strong>以最后一个父合约的函数为准</strong>。</li></ul><h2 id="25-合约构造函数"><a href="#25-合约构造函数" class="headerlink" title="25. 合约构造函数"></a>25. 合约构造函数</h2><ul><li>（1）老版本的solidity语言中，合约的构造函数与普通函数类似，<strong>只是函数名与合约名相同</strong>。</li><li><p>（2）新版本的solidity语言中，使用<strong>constructor</strong>作为<strong>构造函数的名字</strong>。</p><blockquote><p>这样做的好处是，一旦改变了合约的名字，也不用修改其构造函数的名字。</p></blockquote></li><li><p>（3）合约构造函数允许使用<strong>public</strong>或<strong>internal</strong>修饰。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.20 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">contract Contract1&#123;</span><br><span class="line">    uint public a;</span><br><span class="line">    // 带参数的构造函数，假设用internal修饰</span><br><span class="line">    constructor(uint _a) internal&#123;</span><br><span class="line">        a = _a; //用来初始化状态变量</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 从Contract1继承，并将构造函数重新用public修饰，变成外部可访问的构造函数。</span><br><span class="line">// 由于Contract1合约的构造函数有一个参数，所以在继承时需要指定Contract1合约构造函数的参数值。</span><br><span class="line">contract Contract2 is Contract1(100)&#123;</span><br><span class="line">    constructor() public&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Contract3 is Contract1&#123;</span><br><span class="line">    uint aa;</span><br><span class="line">    uint bb;</span><br><span class="line">    // 如果构造参数的参数需要用某些变量设置，如构造函数的参数，可以在构造函数后面指定父合约构造函数的参数值</span><br><span class="line">    constructor(uint _a,uint _b) Contract1(_a*_b) public&#123;</span><br><span class="line">        aa = _a;</span><br><span class="line">        bb = _b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="26-抽象合约"><a href="#26-抽象合约" class="headerlink" title="26. 抽象合约"></a>26. 抽象合约</h2><p><strong>抽象合约</strong>： 至少有一个函数没有实现的合约。</p><blockquote><p>如果合约从一个抽象合约继承，而且<strong>没有全部实现</strong>抽象合约中的函数，那么这个合约就会继承<strong>这些未实现的函数</strong>，所以这个合约也是<strong>抽象合约</strong>。（说白了，就是这个合约继承了一个抽象合约，但是还有些继承自抽象合约的函数没有实现，于是这个合约也就有了一些函数没有实现，所以这个合约也就是抽象合约了。）</p></blockquote><p><strong>抽象合约</strong>通常来实现<strong>多态</strong>，也就是<strong>用抽象合约的多个子合约创建多个实例</strong>，将这些实例赋给<strong>抽象合约类型</strong>的<strong>变量</strong>。<br>由于<strong>这些子合约都实现了抽象合约中的函数</strong>，所以<strong>调用抽象合约中的函数</strong>会根据<strong>抽象合约类型变量的值</strong>不同，<strong>调用结果</strong>也不同，这就是称为<strong>多态</strong>。（调用同一个函数，会有多种不同表现形态）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.5.0 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    在MyContract合约中的test1和test2函数中分别创建了 MyContract1和MyContract2的实例，</span><br><span class="line">    且将这两个合约的实例都赋值给了AbstractContract类型（抽象合约类型）的变量。</span><br><span class="line">    在test1和test2函数中都调用了AbstractContract合约（父合约）中的add函数，且输入相同的实参值，</span><br><span class="line">    不过返回结果却不一样，这就是多态。</span><br><span class="line">    实际上，本质上调用的是MyContract1（子合约）和MyContract2合约（子合约）中的add函数。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">contract AbstractContract&#123;</span><br><span class="line">    // add函数没有实现</span><br><span class="line">    function add(uint m,uint n) public returns(uint);</span><br><span class="line">    // 完整实现了sub函数</span><br><span class="line">    function sub(int m,int n) public pure returns(int)&#123;</span><br><span class="line">        return m-n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 该合约从AbstractContract继承(即MyContract1是AbstractContract的一个子合约)</span><br><span class="line">contract MyContract1 is AbstractContract&#123;</span><br><span class="line">    // 实现了抽象合约中的add函数</span><br><span class="line">    function add(uint m,uint n) public returns(uint)&#123;</span><br><span class="line">        return m+n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 该合约从AbstractContract继承(即MyContract2是AbstractContract的另一个子合约)</span><br><span class="line">contract MyContract2 is AbstractContract&#123;</span><br><span class="line">    // 实现了抽象合约中的add函数</span><br><span class="line">    function add(uint m,uint n) public returns(uint)&#123;</span><br><span class="line">        return 4*(m+n);  //不同于MyContract1中add函数的实现</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">// 该合约从MyContract1 继承，即继承了add函数和sub函数</span><br><span class="line">contract MyContract is MyContract1&#123;</span><br><span class="line">    function test1(uint m,uint n) public returns(uint)&#123;</span><br><span class="line">        // 创建MyContract1 合约的实例</span><br><span class="line">        AbstractContract abstractContract = new MyContract1();</span><br><span class="line">        // 实际是调用了MyContract1 合约中的add函数</span><br><span class="line">        return abstractContract.add(m,n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function test2(uint m,uint n) public returns(uint)&#123;</span><br><span class="line">        // 创建MyContract2 合约的实例</span><br><span class="line">        AbstractContract abstractContract = new MyContract2();</span><br><span class="line">        // 实际是调用了MyContract1 合约中的add函数</span><br><span class="line">        return abstractContract.add(m,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="27-接口"><a href="#27-接口" class="headerlink" title="27. 接口"></a>27. 接口</h2><p>接口与抽象合约类似，但是<strong>不能实现任何函数</strong>。（即所有接口中的方法都是未实现的）<br>此外，接口还有如下限制：</p><ul><li>（1）<strong>不能继承其他合约或接口</strong>；</li><li>（2）不能定义构造函数；</li><li>（3）不能定义变量；</li><li>（4）不能定义结构体；</li><li>（5）不能定义枚举类型。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface interfaceName&#123;</span><br><span class="line">    //抽象方法（未被实现的方法）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：<br>（1）<strong>接口应该定义在合约的外部</strong>（与合约是同一等级）；<br>（2）接口中定义的方法必须被<strong>external</strong>修饰；</p></blockquote><p>合约实现接口的方法与继承合约或抽象合约的方法类似, 使用is关键字.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.5.0 &lt;=0.7.0;</span><br><span class="line"></span><br><span class="line">// 定义接口(定义在合约外面)</span><br><span class="line">interface MyInterface&#123;</span><br><span class="line">    function add(uint m,uint n) external returns(uint);</span><br><span class="line">    function sub(int m,int n) external returns(int);</span><br><span class="line">&#125;</span><br><span class="line">// InterfaceContract实现了MyInterface</span><br><span class="line">contract InterfaceContract is MyInterface&#123;</span><br><span class="line">    function add(uint m,uint n) public returns(uint)&#123;</span><br><span class="line">        return m+n;</span><br><span class="line">    &#125;</span><br><span class="line">    function sub(int m,int n) public returns(int)&#123;</span><br><span class="line">        return m-n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="28-gas-limit和gas-price"><a href="#28-gas-limit和gas-price" class="headerlink" title="28. gas limit和gas price"></a>28. gas limit和gas price</h2><h3 id="（1）gas-limit"><a href="#（1）gas-limit" class="headerlink" title="（1）gas limit"></a>（1）gas limit</h3><ul><li><strong>（1）</strong> gas limit 表示完成转账交易最大消耗的gas数，如果超过这个gas数，交易就会失败，整个交易过程都会回滚。</li><li><strong>（2）</strong> gas limit 主要是为了<strong>防止</strong>由于发布交易<strong>消耗过多的gas</strong>。</li></ul><h3 id="（2）gas-price"><a href="#（2）gas-price" class="headerlink" title="（2）gas price"></a>（2）gas price</h3><ul><li>表示你愿意<strong>为单位gas支付的费用</strong>，以gwei为单位表示。<br><code>1 gwei = 10^9 wei</code></li></ul><h3 id="（3）两者的作用"><a href="#（3）两者的作用" class="headerlink" title="（3）两者的作用"></a>（3）两者的作用</h3><ul><li>（1）在交易中gasPrice是由发起交易人来决定的，每个矿工接收到交易请求之后，会根据gasPrice的高低来决定是否要打包进区块。</li><li>（2）每个交易中必须包含gas limit和gas price的值。gas limit代表了这个交易执行过程中最多被允许消耗的gas数量。</li><li>（3）gas limit和gas price 代表着交易发送者愿意为执行交易支付的wei的最大值。<br><code>付款金额（单位 wei）= Gas数量 × GasPrice</code></li><li>（4）交易执行完成后，如果实际消耗的gas小于gaslimit，那么剩余的gas会以Ether的方式返回给交易发起者。</li><li>（5）如果在交易过程中，<strong>实际消耗的gas大于gas limit</strong>,那么就会出现“gas不足”的错误，这种情况下交易会被终止，交易之前的所有修改的状态会被回滚，同时在<strong>交易执行过程中所消耗的gas</strong>是<strong>不会回退给交易发起者的</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/04/19/Solidity学习笔记/Solidity学习笔记.png&quot; title=&quot;Learn Solidity and Ethereum&quot;&gt;
    
    </summary>
    
    
      <category term="Ethereum" scheme="https://yuanziwoxin.github.io/tags/Ethereum/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习笔记</title>
    <link href="https://yuanziwoxin.github.io/2018/02/02/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    <id>https://yuanziwoxin.github.io/2018/02/02/C语言笔记/</id>
    <published>2018-02-02T02:30:02.000Z</published>
    <updated>2019-04-19T15:26:27.416Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/02/02/C语言笔记/C语言笔记.png" title="Learn C Language"><a id="more"></a><h2 id="1-输入a和b两个整数-按先大后小的顺序输出a和b"><a href="#1-输入a和b两个整数-按先大后小的顺序输出a和b" class="headerlink" title="1.输入a和b两个整数,按先大后小的顺序输出a和b"></a>1.输入a和b两个整数,按先大后小的顺序输出a和b</h2><p><strong>方法一：</strong> 利用改变指针变量的值来实现（即改变指针的指向）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入a和b两个整数，按先大后小的顺序输出a和b; </span></span><br><span class="line"><span class="comment">方法一：利用改变指针变量的值来实现（即改变指针的指向） </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p1,*p2,a,b;</span><br><span class="line"><span class="keyword">int</span> *temp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please enter two numbers:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);<span class="comment">//注意在运行时，输入数据的格式要和scanf中的格式相同； </span></span><br><span class="line">p1=&amp;a;</span><br><span class="line">p2=&amp;b;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b)</span><br><span class="line">&#123;</span><br><span class="line">temp=p1;</span><br><span class="line">p1=p2;</span><br><span class="line">p2=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Max=%d,Min=%d"</span>,*p1,*p2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>方法二：</strong> 利用交换指针变量指向的变量值（即交换a和b的值）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法二：利用交换指针变量指向的变量值（即交换a和b的值） </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p1,*p2,a,b;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please enter two numbers:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;a,&amp;b);</span><br><span class="line">p1=&amp;a;</span><br><span class="line">p2=&amp;b;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// *p1和*p2实际就是表示指针变量p1和 p2指向的变量（即a 和 b） </span></span><br><span class="line">temp=*p1;</span><br><span class="line">*p1=*p2;</span><br><span class="line">*p2=temp;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>,a,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>方法三：</strong> 使用函数处理，将指向两个整型变量的指针变量作为实参传递给swap函数的形参指针变量，在函数中通过指针变量实现交换两个变量的值。</p><p><strong>注：</strong></p><p>（1）在函数调用时，将实参变量的值传递给形参变量，采取的依然是<strong>单向</strong>传送的“值传递”方式。（实参—&gt;形参）</p><p>（2）<strong>不能企图通过改变指针形参的值而改变指针实参的值</strong>。因为 C语言中实参变量和形参变量之间的数据传递是单向的”值传递”方式。用指针变量作为函数参数依然要遵循这一规则。 </p><p>（3）不可能通过执行调用函数来改变实参指针变量的值，<strong>但是可以改变实参指针变量所指向变量的值</strong></p><p><strong>（1）</strong>下面这段代码就是<strong>试图通过实参变量的值传入形参变量，然后再改变形参变量的值</strong>，然后<strong>又传回到实参变量。这显然是无法实现的</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2)</span></span>;</span><br><span class="line"><span class="keyword">int</span> *pointer_1,*pointer_2,a,b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please enter two numbers:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;a,&amp;b);</span><br><span class="line">pointer_1=&amp;a;</span><br><span class="line">pointer_2=&amp;b;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line">&#123;</span><br><span class="line">swap(pointer_1,pointer_2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>,*pointer_1,*pointer_2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//交换形参指针变量的值</span></span><br><span class="line"><span class="keyword">int</span> *temp;</span><br><span class="line">temp=p1;</span><br><span class="line">p1=p2;</span><br><span class="line">p2=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果并不能实现a和b的值交换，因为改变形参指针变量p1和p2的值并不能改变实参指针变量pointer_1和pointer_2的值。<br><strong>（2）</strong>通过执行调用函数来改变实参指针变量<strong>所指向变量的值</strong>。（可以实现两个输入的整数按从小到大的顺序输出）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法三：通过执行调用函数来改变实参指针变量所指向变量的值，从而实现a和b的值交换*/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2)</span></span>;</span><br><span class="line"><span class="keyword">int</span> *pointer_1,*pointer_2,a,b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please enter two numbers:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;a,&amp;b);</span><br><span class="line">pointer_1=&amp;a;</span><br><span class="line">pointer_2=&amp;b;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line">&#123;</span><br><span class="line">swap(pointer_1,pointer_2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>,*pointer_1,*pointer_2);<span class="comment">//通过执行调用函数可以实现改变实参指针变量所指向变量的值。 </span></span><br><span class="line"><span class="comment">//printf("%d %d",a,b);  //两种输出效果一样，因为*pointer_1和a是一个意思 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">temp=*p1;</span><br><span class="line">*p1=*p2;</span><br><span class="line">*p2=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注：</strong><br><strong>函数的调用可以（且只可以）得到一个返回值（即函数值），而使用指针变量作参数，可以得到多个变化了的值。</strong></p><p><strong>拓展：</strong><br>输入3个整数a,b,c, 要求按照从小到大的顺序将它们输出，用函数实现。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">输入3个整数a,b,c,要求按照从小到大的顺序输出，利用函数的形式 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2,<span class="keyword">int</span> *p3)</span></span>;</span><br><span class="line"><span class="keyword">int</span> *pointer_1,*pointer_2,*pointer_3,a,b,c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please enter three numbers:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">pointer_1=&amp;a;</span><br><span class="line">pointer_2=&amp;b;</span><br><span class="line">pointer_3=&amp;c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,pointer_1); </span><br><span class="line">exchange(pointer_1,pointer_2,pointer_3);  <span class="comment">//注意：exchange函数中的参数都是指针变量 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,*pointer_1,*pointer_2,*pointer_3); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,pointer_1); <span class="comment">//可以发现实参指针变量在执行完调用函数后依然没有改变 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2,<span class="keyword">int</span> *p3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p_1,<span class="keyword">int</span> *p_2)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(*p1&gt;*p2)</span><br><span class="line">swap(p1,p2);  <span class="comment">//swap函数中的参数是指针变量，但其中交换的是指针变量指向的变量的值 </span></span><br><span class="line"><span class="keyword">if</span>(*p2&gt;*p3)</span><br><span class="line">swap(p2,p3);</span><br><span class="line"><span class="keyword">if</span>(*p1&gt;*p3)</span><br><span class="line">swap(p1,p3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p_1,<span class="keyword">int</span> *p_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">temp=*p_1;</span><br><span class="line">*p_1=*p_2;</span><br><span class="line">*p_2=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong><br>main函数中的3个实参指针变量的值在执行完调用函数并未改变，这就正好说明前面所说的<strong>“执行完调用函数，并不能改变实参指针变量的值，但是可以改变实参指针变量指向的变量的值”</strong></p><h2 id="2-如何遍历数组中的全部元素"><a href="#2-如何遍历数组中的全部元素" class="headerlink" title="2. 如何遍历数组中的全部元素"></a>2. 如何遍历数组中的全部元素</h2><p>引用一个数组元素主要有以下两种方法：</p><p>（1）下标法：如 a[i];</p><p>（2）指针法：</p><table><thead><tr><th style="text-align:center">格 式</th><th style="text-align:center">具体说明</th></tr></thead><tbody><tr><td style="text-align:center">*(a+i)</td><td style="text-align:center">a是数组名，通过数组名和元素序号计算元素地址，从而找到该元素</td></tr><tr><td style="text-align:center">*(p+i)</td><td style="text-align:center">p是指向数组元素的指针变量，其初值为p=a</td></tr></tbody></table><p>  <strong>注：</strong></p><p>  (1)其实上面两者与a[i]是等价的;</p><p>  (2)*(a+i)即使按数组首元素的地址加上相对位移量得到要找的元素的地址，然后找出该地址的内容。<br>  相对位移量=i * 基本类型的字节长度；（如int类型一般就是4个字节，而char型一般就是1个字节）</p><p>输出一个拥有10个元素的整形数组的全部元素。 </p><p>方法 一：利用数组下标的方式访问数组元素<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i,j,length;</span><br><span class="line">length=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>); <span class="comment">//求出数组的长度 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;length;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法二：通过计算数组名计算数组元素地址，从而找出元素的值。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i,length;</span><br><span class="line">length=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>,*(a+i)); <span class="comment">//通过数组名和元素序号计算元素地址，再找到该元素。 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>方法三：利用指针变量指向数组元素的方式访问数组元素 （这样不必每次都重新计算地址）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="comment">//p=a;   //与p=&amp;a[0]等价</span></span><br><span class="line"><span class="keyword">for</span>(p=a;p&lt;(a+<span class="number">10</span>);p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,p);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(p=a;p&lt;(a+<span class="number">10</span>);p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>,*p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>注意一个易错点：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i,length,*p;</span><br><span class="line">length=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">p=a;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,p++);</span><br><span class="line">&#125;</span><br><span class="line">p=a; <span class="comment">//注意：这里一定要重新将 &amp;a[0]的初始值赋给p,不然此时的p在下一个for循环的初始值就为 &amp;a[10]了。 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++,p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>,*p); <span class="comment">//通过数组名和元素序号计算元素地址，再找到该元素。 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>上面的第二个for循环也可以稍作修改，效果完全一样<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)  <span class="comment">//注意修改的部分 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>,*p++); <span class="comment">//通过数组名和元素序号计算元素地址，再找到该元素。 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h2 id="3-通过指针引用数组元素的一些注意事项"><a href="#3-通过指针引用数组元素的一些注意事项" class="headerlink" title="3. 通过指针引用数组元素的一些注意事项"></a>3. 通过指针引用数组元素的一些注意事项</h2><p><strong>（1）</strong> <strong>指向数组的指针变量也可以带下标</strong>，如p[i],.因为在程序编译时，对下标的处理方法是转换为地址的，<strong>对p[i]处理成*(p+i)</strong>,因此<strong>如果</strong>p是指向一个整型数组元素a[0]，则p[i]代表a[i].</p><p><strong>（2） *p++</strong>   （注意理解）<br>由于++和*同优先级，且结合方向为<strong>自右向左</strong>，因此它等价于*(p++)。<strong>先引用p的值，实现*p的运算，然后再使p自增1。</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*p++相当于*(p++),也就是下面两步的组合：</span><br><span class="line">第一步：*p</span><br><span class="line">第二步：p++</span><br><span class="line"><span class="comment">//先取*p,再使p值加1；</span></span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*(++p)则是下面两步的组合：</span><br><span class="line">第一步：p++</span><br><span class="line">第二步：*p</span><br><span class="line"><span class="comment">//先使p值加1，再取*p；</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">++(*p)则表示p所指向的元素值加<span class="number">1</span>，如果p=a,则++(*p)相当于++a[<span class="number">0</span>].</span><br></pre></td></tr></table></figure><p><strong>（3）如果p当前指向a数组中第i个元素a[i],则下列表达形式一一对应：</strong></p><table><thead><tr><th style="text-align:center">第一种表达方式</th><th style="text-align:center">对应的第二种表达方式</th></tr></thead><tbody><tr><td style="text-align:center">*(p- -)</td><td style="text-align:center">a[i++]</td></tr><tr><td style="text-align:center">*(++p)</td><td style="text-align:center">a[++i]</td></tr><tr><td style="text-align:center">*(- -p)</td><td style="text-align:center">a[- -i]</td></tr></tbody></table><h2 id="4-用数组名作函数参数和用变量名作函数参数"><a href="#4-用数组名作函数参数和用变量名作函数参数" class="headerlink" title="4. 用数组名作函数参数和用变量名作函数参数"></a>4. 用数组名作函数参数和用变量名作函数参数</h2><p><strong>(1)</strong>当用<strong>数组名作函数参数</strong>时，如果形参数组中各元素的值发生变化，则<strong>实参数组元素的值</strong>也随之发生<strong>变化</strong>。（常使用这种方法改变实参数组的值）<br>实参数组名代表数组首元素的地址，而形参是用来接收来自实参传递过来的数组首元素地址的。因此，形参应该是一个指针变量（只有指针变量才能存放地址）。实际上，C编译都是将形参数组名作为指针变量来处理的。</p><p>例：<br>函数fun的参数写成数组形式<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fun(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n) </span><br><span class="line"><span class="comment">//arr为形参数组名</span></span><br></pre></td></tr></table></figure></p><p>但程序在编译时是将形参数组名arr按指针变量处理的，相当于将fun的首部写成<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun(<span class="keyword">int</span> *arr,<span class="keyword">int</span> n)</span><br></pre></td></tr></table></figure></p><p>这两种写法完全等价。</p><p><strong>（2）</strong> 以变量名和数组名作为函数参数的比较</p><table><thead><tr><th style="text-align:center">实参类型</th><th style="text-align:center">变量名</th><th style="text-align:center">数组名</th></tr></thead><tbody><tr><td style="text-align:center">要求形参的类型</td><td style="text-align:center">变量名</td><td style="text-align:center">数组名或指针变量</td></tr><tr><td style="text-align:center">传递的信息</td><td style="text-align:center">变量的值</td><td style="text-align:center">实参数组首元素的地址</td></tr><tr><td style="text-align:center">通过函数调用能否改变实参的值</td><td style="text-align:center">不能<strong>实参变量</strong>的值</td><td style="text-align:center"><strong>能</strong>改变<strong>实参数组</strong>的值</td></tr></tbody></table><p><strong>注：</strong><br><strong>实参数组名</strong>代表一个<strong>固定的地址</strong>，或者说是<strong>指针常量</strong>，但<strong>形参数组名</strong>并不是一个固定的地址，而是按<strong>指针变量</strong>处理。<br><strong>（3）</strong> 用数组名作函数参数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将数组a中n个整数按相反顺序存放。 (两头的元素相互交换)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i,length;</span><br><span class="line">length=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The original order is:\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">inv(a,length);<span class="comment">//两头交换顺序 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The new order is:\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span> <span class="comment">//写成int *arr也可以 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j,temp;</span><br><span class="line"><span class="keyword">int</span> flag=n/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;flag)</span><br><span class="line">&#123;</span><br><span class="line">j=n-i<span class="number">-1</span>;</span><br><span class="line">temp=arr[i];</span><br><span class="line">arr[i]=arr[j];</span><br><span class="line">arr[j]=temp;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>（4）</strong> 用指针变量作函数参数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i,length;</span><br><span class="line">length=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The original order is:\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">inv(a,length);<span class="comment">//两头交换顺序 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The new order is:\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改进之后</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *i,*j,*p,temp;</span><br><span class="line"><span class="keyword">int</span> flag=n/<span class="number">2</span>;</span><br><span class="line">i=arr;</span><br><span class="line">j=arr+n<span class="number">-1</span>;</span><br><span class="line">p=arr+flag;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;p;i++,j--)</span><br><span class="line">&#123;</span><br><span class="line">temp=*i;</span><br><span class="line">*i=*j;</span><br><span class="line">*j=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p><strong>（5）</strong> 如果用<strong>指针变量作实参</strong>，必须<strong>先使指针变量有一个确定值</strong>，指向一个已定义的对象。<br>如下面是不正确的：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> *x,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">int</span> *p;<span class="comment">//指针变量未指向数组元素（或者说一个已定义的对象）。</span></span><br><span class="line">...</span><br><span class="line">f(p,<span class="number">10</span>);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> *x,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译时出错，原因是指针变量p没有确定值，谈不上指向哪个变量。</p><h2 id="5-使用指针引用多维数组"><a href="#5-使用指针引用多维数组" class="headerlink" title="5. 使用指针引用多维数组"></a>5. 使用指针引用多维数组</h2><p><strong>（1）</strong> 二维数组a的有关指针</p><table><thead><tr><th style="text-align:center">表示形式</th><th style="text-align:center">含义</th><th style="text-align:center">地址</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">二维数组名，指向一维数组a[0],即0行首地址</td><td style="text-align:center">2000</td></tr><tr><td style="text-align:center">a[0],*(a+0),*a</td><td style="text-align:center">0行0列元素地址</td><td style="text-align:center">2000</td></tr><tr><td style="text-align:center">a+1,&amp;a[1]</td><td style="text-align:center">1行首地址</td><td style="text-align:center">2016</td></tr><tr><td style="text-align:center">a[1],*(a+1)</td><td style="text-align:center">1行0列的地址，即&amp;a[1][0]</td><td style="text-align:center">2016</td></tr><tr><td style="text-align:center">a[1]+2,*(a+1)+2,&amp;a[1][2]</td><td style="text-align:center">1行2列元素地址,即&amp;a[1][2]</td><td style="text-align:center">2024</td></tr><tr><td style="text-align:center">*(a[1]+2),*(*(a+1)+2),a[1][2]</td><td style="text-align:center">1行2列元素的值，即a[1][2]</td><td style="text-align:center">元素值为13</td></tr></tbody></table><p><strong>注：</strong><br>(1) 二维数组a的定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;,&#123;<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>&#125;,&#123;<span class="number">17</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">23</span>&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>且假设二维数组a的首行的首地址为2000.</p><p>(2) C语言规定了数组名代表数组首元素的地址。所以<br>a为二维数组名，指向一维数组a[0]（二维数组的首元素），即0行首地址；<br>a[0]为一维数组名，指向一维数组的首元素即a[0][0]，即0行0列元素地址；</p><p>(3) a+1是二维数组a中序号为1的行的首地址（序号从0算起），即1行首地址，因为a是二维数组名，指向一维数组a[0]，表示0行首地址。<strong>千万不要和a[0]+1搞混,</strong> a[0]+1表示0行1列元素的地址。</p><p>(4) *(a+1)表示1行0列元素地址，即&amp;a[1][0]，和a[1]等价。</p><p>(5) <strong>二维数组名</strong>（如a）是指向<strong>行</strong>的。因此a+1中的‘1’代表一行中全部元素所占的字节数（一行有4个整形元素，所以占16个字节）。<strong>一维数组名</strong>（如a[0],a[1]）是指向<strong>列元素</strong>的。因此a[0]+1中的‘1’代表一个元素所占的字节数（一个整形元素，所以占4个字节）。</p><p>(6) 在<strong>指向行的指针</strong>前面加一个*号，就转换为<strong>指向列的指针</strong>。</p><p>(7) 在<strong>指向列的指针</strong>前面加一个&amp;号，就转换为<strong>指向行的指针</strong>。</p><p>(8) a[0]指向0行0列元素的指针，&amp;a[0]则指向二维数组的0行，与a等价。因为a[0]与*(a+0)等价，因此&amp;a[0]与&amp;*a等价，也就是与a等价，它指向二维数组的0行。</p><p>(9) &amp;a[i]和a[i]的值虽然一样，但它们的含义不一样。<strong>&amp;a[i]</strong>或<strong>a+i</strong>指向<strong>行</strong>，而<strong>a[i]</strong>或<strong>*(a+i)</strong>指向<strong>列</strong>。</p><h2 id="6-指向多维数组元素的指针变量"><a href="#6-指向多维数组元素的指针变量" class="headerlink" title="6. 指向多维数组元素的指针变量"></a>6. 指向多维数组元素的指针变量</h2><p><strong>(1)</strong>指向<strong>数组元素</strong>的指针变量<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">指向多维数组元素的指针变量</span></span><br><span class="line"><span class="comment">(1)指向数组元素的指针变量 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//用指向元素的指针变量输出二维数组各元素的值。 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">23</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="keyword">for</span>(p=a[<span class="number">0</span>];p&lt;a[<span class="number">0</span>]+<span class="number">12</span>;p++)  <span class="comment">//注意：p是指向整形元素的，如这里p初始指向a[0][0]; </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((p-a[<span class="number">0</span>])%<span class="number">4</span>==<span class="number">0</span>) <span class="comment">//p移动4次后换行 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(1) %4d表示输出的整形数据宽度为4位，且右对齐，如果整形数据不够4位则前面补空格;</span></span><br><span class="line"><span class="comment">//(2) 如果要左对齐，则在%后加"-"号即可，如"%-4d" ;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%-4d"</span>,*p); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>(2)</strong>指向由m个元素组成的<strong>一维数组</strong>的指针变量<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">指向m个元素组成的一维数组的指针变量 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">21</span>,<span class="number">23</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>],i,j;</span><br><span class="line">p=a;   <span class="comment">// p的值是一维数组a[0]的起始地址;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please enter row and column:\t"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;i,&amp;j);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a[%d,%d]=%d\n"</span>,i,j,*(*(p+i)+j));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注：</strong></p><p>（1）int (*p)[4]表示定义p为一个指针变量，它指向包含4个整形元素的一维数组.</p><p>（2）*p两侧的括号不可以缺少， 若写成*p[4]则表示指针数组。（因为方括号[ ]的运算优先级别高）</p><p>（3）</p><table><thead><tr><th style="text-align:center">格式</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">int a[4]</td><td style="text-align:center">a有4个元素，每个元素都是整型</td></tr><tr><td style="text-align:center">int (*p)[4]</td><td style="text-align:center">*p有4个元素，每个元素为整型。也即p所指的对象是有4个整型元素的数组，即p是指向一维数组的指针。</td></tr></tbody></table><p>（4）int (*p)[4]中的<strong>p</strong>的类型不是int *类型，而是int (*)[4]型，p被定义为指向一维整形数组的指针变量，一维数组有4个元素，因此p的基类型为一维数组，其长度是16字节。</p><p><strong>（3）</strong> 一个需要注意的地方<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;; <span class="comment">//这里是一维数组</span></span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>];</span><br><span class="line"><span class="comment">//不能写成 p=a,因为这样写表示p的值是&amp;a[0],指向a[0],一维数组名表示首元素的地址; </span></span><br><span class="line">p=&amp;a;  <span class="comment">//表示p指向一维数组（行） </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(*p)[<span class="number">2</span>]);<span class="comment">//表示访问p所指向一维数组（行）中的序号为2的元素; </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="7-引用一个字符串的方法"><a href="#7-引用一个字符串的方法" class="headerlink" title="7. 引用一个字符串的方法"></a>7. 引用一个字符串的方法</h2><p><strong>(1)</strong> 用<strong>字符数组</strong>存放一个字符串，可以通过<strong>数组名和下标</strong>引用字符串中一个字符，也可通过<strong>数组名和格式声明”%s”</strong>输出该字符串。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="built_in">string</span>[]=<span class="string">"I love China!"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="built_in">string</span>);<span class="comment">//用%s格式声明输出string,可以输出整个字符串。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,<span class="built_in">string</span>[<span class="number">3</span>]);<span class="comment">//使用%c格式输出一个字符数组元素。</span></span><br></pre></td></tr></table></figure></p><p><strong>(2)</strong>用<strong>字符指针变量</strong>指向一个<strong>字符串常量</strong>，通过字符指针变量引用字符串常量。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针变量string指向字符串的第1个字符</span></span><br><span class="line"><span class="keyword">char</span> *<span class="built_in">string</span>=<span class="string">"I love China!"</span>;<span class="comment">//定义指针变量并初始化。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="built_in">string</span>);</span><br></pre></td></tr></table></figure></p><p><strong>注：</strong></p><p>（1）C语言中只有字符变量，<strong>没有字符串变量</strong>。</p><p>（2）这两者是等价的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *<span class="built_in">string</span>=<span class="string">"I am a student"</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *<span class="built_in">string</span>;</span><br><span class="line"><span class="built_in">string</span>=<span class="string">"I am a student"</span>;</span><br></pre></td></tr></table></figure><p>上述语句都是将字符串的第一个字符的地址赋给指针变量string，此后string就指向“I am a student”.<br>当然也可以对string重新赋值，从而改变string的指向。</p><p>（3）%s是输出字符串时所用的格式符，在输出项中给出字符指针变量名string，则系统会输出string所指向的第一个字符，<strong>然后自动使string加1</strong>，使之指向下一个字符，再输出该字符……如此直到遇到字符串结束标志’\0’为止。</p><h2 id="8-复制一个字符数组到另外一个字符数组（字符串间的复制）——-一种效果的多种实现方式"><a href="#8-复制一个字符数组到另外一个字符数组（字符串间的复制）——-一种效果的多种实现方式" class="headerlink" title="8.复制一个字符数组到另外一个字符数组（字符串间的复制）—— 一种效果的多种实现方式"></a>8.复制一个字符数组到另外一个字符数组（字符串间的复制）—— 一种效果的多种实现方式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span>;</span><br><span class="line"><span class="keyword">char</span> a[]=<span class="string">"I am a teacher."</span>;</span><br><span class="line"><span class="keyword">char</span> b[]=<span class="string">"You are a student."</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"String a is: %s\n"</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"String b is: %s\n"</span>,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"copy string a to string b:\n"</span>);</span><br><span class="line">copy_string(a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"String a is: %s\n"</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"String b is: %s\n"</span>,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;*b++=*a++;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上述copy_string函数中可以有多种不同方式而实现相同的效果。</strong></p><p><strong>(1)</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(*a!=<span class="string">'\0'</span>)</span><br><span class="line">&#123;</span><br><span class="line">*b++=*a++;</span><br><span class="line">&#125;</span><br><span class="line">*b=<span class="string">'\0'</span>;</span><br><span class="line">```</span><br><span class="line">**(<span class="number">2</span>)**</span><br><span class="line">```C</span><br><span class="line"><span class="keyword">while</span>((*b=*a)!=<span class="string">'\0'</span>)</span><br><span class="line">&#123;</span><br><span class="line">b++;</span><br><span class="line">a++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>(3)</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>((*b++=*a++)!=<span class="string">'\0'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>(4)</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意"\0"的ASCII码为0; </span></span><br><span class="line"><span class="keyword">while</span>((*b++=*a++)!=<span class="number">0</span>);<span class="comment">//千万不要忘了加";"</span></span><br></pre></td></tr></table></figure></p><p>也可以写成<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">while</span>(*b++=*a++);</span><br><span class="line">``` </span><br><span class="line">**注：** </span><br><span class="line">不等于<span class="number">0</span>也就是表示为真, 这里表示先把\*a的值赋值给\*b,再判断\*b是否为<span class="number">0</span>（<span class="string">'\0'</span>的ASCII值为<span class="number">0</span>），为<span class="number">0</span>则跳出<span class="keyword">while</span>循环，否则继续将a数组中的未复制的字符复制到b数组中去。</span><br><span class="line">**(<span class="number">5</span>)**</span><br><span class="line">```C</span><br><span class="line"><span class="keyword">for</span>(;*b++=*a++;);</span><br></pre></td></tr></table></figure></p><p> 或<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;(*b++=*a++)!=<span class="number">0</span>;);</span><br></pre></td></tr></table></figure></p><h2 id="9-用字符指针作为函数参数时，实参与形参的类型的对应关系有如下几种："><a href="#9-用字符指针作为函数参数时，实参与形参的类型的对应关系有如下几种：" class="headerlink" title="9. 用字符指针作为函数参数时，实参与形参的类型的对应关系有如下几种："></a>9. 用字符指针作为函数参数时，实参与形参的类型的对应关系有如下几种：</h2><table><thead><tr><th style="text-align:center">实参</th><th style="text-align:center">形参</th></tr></thead><tbody><tr><td style="text-align:center">字符数组名</td><td style="text-align:center">字符数组名</td></tr><tr><td style="text-align:center">字符数组名</td><td style="text-align:center">字符指针变量</td></tr><tr><td style="text-align:center">字符指针变量</td><td style="text-align:center">字符指针变量</td></tr><tr><td style="text-align:center">字符指针变量</td><td style="text-align:center">字符数组名</td></tr></tbody></table><h2 id="10-字符指针变量和字符数组的比较（七个小点）"><a href="#10-字符指针变量和字符数组的比较（七个小点）" class="headerlink" title="10. 字符指针变量和字符数组的比较（七个小点）"></a>10. 字符指针变量和字符数组的比较（七个小点）</h2><p><strong>（1）</strong> 字符数组由若干个元素组成，每个元素中放一个字符。而字符指针变量中存放的是地址（字符串中第一个字符的地址）。</p><p><strong>（2）赋值方式:</strong> 可以对字符指针变量赋值，但不能对数组名赋值。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *a;<span class="comment">//定义a为字符指针变量</span></span><br><span class="line">a=<span class="string">"I love China!"</span>;<span class="comment">//将字符串首元素的地址赋给指针变量。合法。</span></span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">14</span>];</span><br><span class="line">str[<span class="number">0</span>]=<span class="string">'I'</span>;<span class="comment">//对字符数组元素赋值，合法。</span></span><br><span class="line">str=<span class="string">"I love China!"</span>;<span class="comment">//数组名是地址，是常量，不能被赋值，非法。</span></span><br></pre></td></tr></table></figure><p><strong>（3）</strong> 初始化</p><p><strong>字符指针变量的赋值</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *a=<span class="string">"I love China!"</span>;<span class="comment">//定义并赋值。</span></span><br></pre></td></tr></table></figure></p><p>等价于<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *a;<span class="comment">//先定义</span></span><br><span class="line">a=<span class="string">"I love China!"</span>; <span class="comment">//再赋值</span></span><br></pre></td></tr></table></figure></p><p><strong>数组的初始化</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">14</span>]=<span class="string">"I love China!"</span>;<span class="comment">//定义字符数组str，并把字符串赋给数组中各元素。合法。</span></span><br></pre></td></tr></table></figure></p><p><strong>不</strong>等价于（下面这种字符数组的初始化是<strong>非法的</strong>）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">14</span>];</span><br><span class="line">str[]=<span class="string">"I love China!"</span>;<span class="comment">//企图把字符串赋给数组中各元素。错误。</span></span><br></pre></td></tr></table></figure></p><p><strong>注：</strong></p><p><strong>数组可以在定义时对各元素赋初值，但不能用赋值语句对字符数组中全部元素整体赋值。</strong></p><p><strong>（4）</strong>存储单元的内容。编译时<strong>字符数组</strong>分配<strong>若干存储单元</strong>，以存放各元素的值；而对<strong>字符指针变量</strong>，只分配<strong>一个存储单元</strong>（Visual C++为指针变量分配4个字节）。</p><p><strong>（5）</strong>如果定义了<strong>字符数组</strong>，但未对它赋值，这时数组中的元素的值是<strong>不可预料的</strong>。可以引用（如输出）这些值，结果显然是<strong>无意义的</strong>，但不会造成严重的后果，容易发现和改正。</p><p>如果定义<strong>字符指针变量</strong>，应当及时把一个字符变量（或字符数组元素）的地址赋值给它，使它指向一个字符型数据，如果未对它赋予一个地址值，它并未具体指向一个确定的对象。此时如果向该指针变量所指向的对象输入数据，<strong>可能</strong>会造成<strong>严重的后果</strong>。（<strong>定义了字符指针变量应及时赋值</strong>）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *a;<span class="comment">//定义字符指针变量a</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);<span class="comment">//企图从键盘输入一个字符串，使a指向该字符串。错误。</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong> 此时a的值是不可预料的，它可能指向内存中空白的（未用的）用户存储区（好的情况），也有可能指向内存中已存储指令或数据的有用内存段，这就会破坏程序或有用数据，甚至破坏了系统，会造成严重的结果。<br>因此在定义指针变量后，及时指定其指向，如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *a,str[<span class="number">10</span>];</span><br><span class="line">a=str;<span class="comment">//使a指向str数组的首元素</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);<span class="comment">//从键盘输入一个字符串存放到a所指向的一段存储单元中。正确。</span></span><br></pre></td></tr></table></figure></p><p><strong>（5）</strong> <strong>指针变量的值</strong>是<strong>可改变的</strong>；而<strong>数组名</strong>代表一个<strong>固定的值</strong>（数组元素的地址），是<strong>不可改变的</strong>。</p><p>改变指针变量的值<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *a=<span class="string">"I love China!"</span>;</span><br><span class="line">a=a+<span class="number">7</span>;<span class="comment">//改变指针变量的值，使a指向字符串中的第7个字符。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,a);<span class="comment">//输出的结果为“China！”</span></span><br></pre></td></tr></table></figure></p><p>下面是错误的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[]=&#123;<span class="string">"I love China!"</span>&#125;;</span><br><span class="line">str=str+<span class="number">7</span>;<span class="comment">//错误</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,str);</span><br></pre></td></tr></table></figure></p><p><strong>（6）</strong> <strong>字符数组</strong>中<strong>各元素的值</strong>是可以改变的（<strong>可以</strong>对它们<strong>再赋值</strong>）；但<strong>字符指针变量指向的字符串常量中的内容</strong>是不可以被取代的（<strong>不能</strong>对它们<strong>再赋值</strong>）。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a[]=<span class="string">"House"</span>;</span><br><span class="line"><span class="keyword">char</span> *b=<span class="string">"House"</span>;</span><br><span class="line">a[<span class="number">2</span>]=<span class="string">'r'</span>;<span class="comment">//合法，r取代a数组元素a[2]的原值u.</span></span><br><span class="line">b[<span class="number">2</span>]=<span class="string">'r'</span>;<span class="comment">//非法。字符串常量不能改变。</span></span><br></pre></td></tr></table></figure></p><p><strong>（7）</strong> 用指针变量指向一个格式字符串，可以用它代替printf函数中的格式字符串。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *format;</span><br><span class="line">format=<span class="string">"a=%d,b=%f\n"</span>;<span class="comment">//使format指向一个字符串。</span></span><br><span class="line"><span class="built_in">printf</span>(format,a,b);<span class="comment">//这种printf函数称为可变格式输出函数。</span></span><br></pre></td></tr></table></figure></p><h2 id="11-用函数指针变量调用函数"><a href="#11-用函数指针变量调用函数" class="headerlink" title="11.用函数指针变量调用函数"></a>11.用函数指针变量调用函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//方法一：通过函数名调用函数 </span></span><br><span class="line"><span class="comment">//略......</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：通过函数指针变量调用函数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="comment">//定义p是一个指向函数的指针变量，它可指向函数的类型为整型且有两个整型参数的函数。</span></span><br><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span> x,<span class="keyword">int</span> y); <span class="comment">//p的类型用int(*)(int,int)表示。 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please enter a and b:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="comment">//可通过改变p的指向,并结合if...else...或switch...case...,从而根据不同情况调用不同的函数。</span></span><br><span class="line">p=max;<span class="comment">//使p指向max函数，函数名代表函数入口地址。 </span></span><br><span class="line">c=(*p)(a,b);<span class="comment">//通过指针变量调用max函数。 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a=%d\nb=%d\nmax=%d\n"</span>,a,b,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> max;</span><br><span class="line"><span class="keyword">if</span>(x&gt;y)</span><br><span class="line">max=x;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">max=y;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><p>（1）*p的括号不能省去，这表示p先与*号结合，是指针变量，然后再与后面的()结合，()表示函数，即该指针变量不是指向一般的变量,而是指向函数,最前面的int表示函数值（函数返回值为整型）。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span>,<span class="keyword">int</span>);<span class="comment">//p是指向函数的指针。</span></span><br></pre></td></tr></table></figure></p><p>（2）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">p</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;<span class="comment">//p是一个返回int*型指针的函数。</span></span><br></pre></td></tr></table></figure></p><p>由于（）优先级高于*号，它相当于<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *(p(<span class="keyword">int</span>,<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure></p><p>就变成了声明一个p 函数(这个函数的返回值是指向整型变量的指针)。</p><p>（3）用<strong>函数名调用函数</strong>，只能调用一个指定的函数；而通过<strong>指针变量调用函数</strong>比较灵活，可<strong>根据不同情况</strong>调用<strong>不同的函数</strong>。因为可以改变指针变量的值从而使其指向不同的函数。</p><h2 id="12-指向m个元素组成的一维数组的指针变量与指向数组元素的指针变量（难点）"><a href="#12-指向m个元素组成的一维数组的指针变量与指向数组元素的指针变量（难点）" class="headerlink" title="12. 指向m个元素组成的一维数组的指针变量与指向数组元素的指针变量（难点）"></a>12. 指向m个元素组成的一维数组的指针变量与指向数组元素的指针变量（<em>难点</em>）</h2><p>（1）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p;</span><br></pre></td></tr></table></figure></p><p>p是指向整形数据的，<strong>p+1</strong>所指向的元素是p所指向的<strong>列元素的下一元素</strong>（按在内存中的存储的下一个整型元素）。<br>（2）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>];</span><br></pre></td></tr></table></figure></p><p>p是指向一个包含4个元素的一维数组。如果这时p指向a[0]（即p=&amp;a[0]）,则<strong>p+1</strong>不是指向a[0][1]，<strong>而</strong>是<strong>指向a[1]</strong>（第一行的首地址，是指向行），p的值以<strong>一维数组的长度</strong>为<strong>单位</strong>。所以“p+1”是加上一个一维数组的长度。</p><h2 id="13-指针数组和多重指针"><a href="#13-指针数组和多重指针" class="headerlink" title="13. 指针数组和多重指针"></a>13. 指针数组和多重指针</h2><p><strong>（1）指针数组：</strong>一个<strong>其数组元素均为指针型数据</strong>的数组。即指针数组中每一个元素都存放一个地址，相当于一个指针变量。如定义一个指针数组：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p[<span class="number">4</span>];</span><br></pre></td></tr></table></figure></p><p>由于[ ]比*优先级高，所以p先与[4]结合，形成p[4]形式，这显然是数组形式，。然后再与p前面的 * 结合，*表示此数组是指针类型的，每个数组元素（相当于一个指针变量）都可指向一个整型变量。<br><strong>注意不要写成</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>];<span class="comment">//这是指向一维数组的指针变量。</span></span><br></pre></td></tr></table></figure></p><p><strong>（2）</strong> 要用到指针数组的情况：指针数组比较适合用来指向若干字符串（<strong>各字符串的长短不一</strong>）。</p><p><strong>a.</strong> 按一般方法，字符串本身就是一个字符数组。因此要设计一个二维的字符数组才能存放多个字符串，<strong>但</strong>定义二维数组时<strong>要指定列数</strong>，也就是二维数组中每一行包含的<strong>元素个数（即列数）相等</strong>。<strong>而</strong>实际各字符串（如书名）的<strong>长短</strong>一般是<strong>不一样</strong>的。如按最长的字符串来定义列数，则会浪费许多内存单元。</p><p><strong>b.</strong> 使用<strong>指针数组</strong>的方法则可以很灵活地对字符串进行处理：可分别定义一些字符串，然后用<strong>指针数组中的元素</strong>分别<strong>指向各字符串</strong>。如：name[0]中存放字符串”Follow me”的首字符的地址，name[1]中则存放字符串”BASIC”的首字符的地址……如果想对字符串排序，只须改变指针数组中各元素的指向（即改变各元素的值，这些值是各字符串的首地址）。<br><strong>（3）</strong>定义指针数组，并赋初值。如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义指针数组name，它有5个元素，其初值分别为 "Python","Java","C#",".NET","JavaScript"的首字符的地址。 </span></span><br><span class="line"><span class="keyword">char</span> *name[]=&#123;<span class="string">"Python"</span>,<span class="string">"Java"</span>,<span class="string">"C#"</span>,<span class="string">".NET"</span>,<span class="string">"JavaScript"</span>&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>（4）字符比较函数strcmp使用时一个需注意的地方</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">(<span class="number">1</span>) <span class="built_in">strcmp</span>(str1,str2),所以应分别传入的是两个字符串的首字符的地址。</span><br><span class="line">如：<span class="built_in">strcmp</span>(<span class="string">"Hello"</span>,<span class="string">"World"</span>),其中实质分别传入的是<span class="string">"Hello"</span>、<span class="string">"World"</span>这两个字符串的首字符的地址。</span><br><span class="line">(<span class="number">2</span>) 其原型为<span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">strcmp</span><span class="params">(<span class="keyword">char</span> *s1,<span class="keyword">char</span> *s2)</span></span>; </span><br><span class="line">(<span class="number">3</span>) 使用字符串处理函数时，应在程序头文件上加上</span><br><span class="line"><span class="string">"#include &lt;string.h&gt;"</span></span><br></pre></td></tr></table></figure></p><p><strong>（5）指向指针数据的指针</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> **p;</span><br></pre></td></tr></table></figure></p><p>相当于<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *(*p);</span><br></pre></td></tr></table></figure></p><p>可把它分为两个部分来看：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * 和 (*p)</span><br></pre></td></tr></table></figure></p><p>前面的char *表示p指向的是char *型的数据，也就是说p指向一个字符指针变量（这个字符指针变量指向一个字符型数据）。<br>如果引用*p，就得到p所指向的字符指针变量的值。如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *name[]=&#123;<span class="string">"Python"</span>,<span class="string">"Java"</span>,<span class="string">"C#"</span>,<span class="string">".NET"</span>,<span class="string">"JavaScript"</span>&#125;;</span><br><span class="line">p=name+<span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,*p);<span class="comment">//输出name[2]的值（一个地址）</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,*p);<span class="comment">//输出字符串“C#”</span></span><br></pre></td></tr></table></figure></p><p><strong>（6）小结</strong><br>利用指针变量访问另一个变量就是”<strong>间接访问</strong>“。<br>如果在一个指针变量中存放一个目标变量的地址，这就是“<strong>单级间址</strong>”；<br>指向指针数据的指针用的则是”<strong>二级间址</strong>“。<br>从理论上说，间址方法可以延伸到更多的即，即<strong>多重指针</strong>，即<strong>多级间接访问</strong>。</p><h2 id="14-内存的动态分配"><a href="#14-内存的动态分配" class="headerlink" title="14. 内存的动态分配"></a>14. 内存的动态分配</h2><p><strong>(1)</strong> <strong>全局变量</strong>是分配在内存中的<strong>静态存储区</strong>的；非静态的<strong>局部变量</strong>（包括形参）是分配在内存中的<strong>动态存储区</strong>的，这个存储区是一个称为<strong>栈</strong>(Stack)的区域。</p><p><strong>(2)</strong> 此外，C语言还允许建立<strong>内存动态分配区域</strong>，以存放一些临时用的数据，这些数据不必在程序的声明中定义，也不必等到函数结束时才释放，而是<strong>需要时随时开辟，不需要时随时释放</strong>。这些数据临时存放在一个特别的自由存储区，称为<strong>堆</strong>区。</p><p>可以根据需要，向系统申请所需大小的空间。由于<strong>未</strong>在声明部分定义它们为变量或数组，因此<strong>不能</strong>通过变量名或数组名去引用这些数据，<strong>只能</strong>通过<strong>指针</strong>来引用。</p><h2 id="15-建立内存的动态分配"><a href="#15-建立内存的动态分配" class="headerlink" title="15. 建立内存的动态分配"></a>15. 建立内存的动态分配</h2><p>对内存的动态分配是通过系统提供的库函数来实现的，主要有malloc，calloc，free，realloc这4个函数。<br>以上四个函数的声明在stdlib.h头文件中，在用到这些函数时，应当用”#include <stdlib.h>“指令。<br><strong>（1）malloc函数</strong><br>其函数原型是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure></stdlib.h></p><p>其作用是在内存的动态存储区中分配<strong>一个</strong>长度为size的连续空间。<br>形参size的类型定为无符号整型（不允许为负数）。<br>此<strong>函数的值</strong>（即“返回值”）是<strong>所分配区域的第一个字节的地址</strong>，或者说此函数是一个指针函数，返回的地址指向该分配区域的开头位置。如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(<span class="number">100</span>);<span class="comment">//开辟100字节的临时分配区域，函数值为其第1个字节的地址。</span></span><br></pre></td></tr></table></figure></p><p>注意：<br><strong>指针的基类型</strong>为<strong>void</strong>，即<strong>不指向任何类型的数据</strong>，只提供一个地址。<br><strong>（2）calloc函数</strong><br>其函数原型为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">calloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> n,<span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure></p><p>其作用是在内存的动态存储区中分配<strong>n个</strong>长度为size的连续存储空间，这个空间一般比较大，足以<strong>保存一个数组</strong>。</p><p>用calloc函数可以为<strong>一维数组</strong>开辟动态存储空间，n为数组元素个数，每个元素长度为size。这就是 <strong>动态数组</strong>。函数返回指向所分配的起始位置的指针；如果分配不成功，返回NULL。如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p=callol(<span class="number">50</span>,<span class="number">4</span>);<span class="comment">//开辟50*4个字节的临时分配域，把起始地址赋给指针变量p。</span></span><br></pre></td></tr></table></figure></p><p><strong>（3）free函数</strong><br>其函数原型为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *p)</span></span>;</span><br></pre></td></tr></table></figure></p><p>其作用是释放指针变量p所指向的动态空间，使这部分空间能重新被其他变量使用。<br>p应是最近一次调用calloc或malloc函数时得到的函数返回值。如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p);<span class="comment">//释放指针变量p所指向的已分配的动态空间。free函数无返回值。</span></span><br></pre></td></tr></table></figure></p><p><strong>（4）realloc函数</strong><br>其函数原型为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">realloc</span><span class="params">(<span class="keyword">void</span> *p,<span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure></p><p>若已通过malloc或calloc函数获得了动态空间，可用realloc函数对动态空间大小进行<strong>重新分配</strong>。</p><p><strong>（5）一个值得注意的点</strong><br><strong>以前的C版本</strong>提供的malloc和calloc函数得到的是指向<strong>字符型数据</strong>的指针，其原型为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span>;<span class="comment">//返回字符型数据的指针</span></span><br></pre></td></tr></table></figure></p><p>因此若开辟的空间用来存放整数，则要进行<strong>类型转换</strong>，如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *pt;</span><br><span class="line">pt=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);<span class="comment">//将指向字符数据的指针转换为指向整型数据的指针。</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong></p><p>（1）<strong>类型转换</strong>只是<strong>产生了一个临时的中间值</strong>赋给了pt，<strong>但没有</strong>改变malloc函数本身的类型。</p><p>（2）C99标准把malloc，calloc，realloc函数的<strong>基类型定为void类型</strong>，这种指针称为<strong>无类型指针</strong>，即<strong>不指向哪一种具体的类型数据</strong>，只表示用来指向一个<strong>抽象</strong>的类型的数据，即<strong>仅提供一个纯地址</strong>，而<strong>不能指向任何具体的对象</strong>。</p><h2 id="16-void指针类型"><a href="#16-void指针类型" class="headerlink" title="16. void指针类型"></a>16. void指针类型</h2><p>可以定义一个基类型为void的指针变量（即void *型变量），<strong>它不指向任何类型的数据</strong>。</p><p><strong>请注意：</strong></p><p>（1）不要把”<strong>指向void类型</strong>“理解为能指向”<strong>任何的类型</strong>“的数据，而应该理解成<strong>“指向空类型”</strong>或<strong>“不指向确定的类型”</strong>的数据。</p><p>（2）在将void指针的值赋给另一指针变量时由系统对它进行类型转换，使之适合于被赋值的变量的类型。</p><h2 id="17-指针的优点"><a href="#17-指针的优点" class="headerlink" title="17. 指针的优点"></a>17. 指针的优点</h2><p><strong>(1)</strong> 提高程序效率；</p><p><strong>(2)</strong> 在调用函数时当指针指向的变量的值改变时，这些值能够为主调函数使用，即可以<strong>从函数调用得到多个可改变的值</strong>；</p><p><strong>(3)</strong> 可以实现<strong>动态存储分配</strong>。</p><h2 id="18-宏定义（易错点）"><a href="#18-宏定义（易错点）" class="headerlink" title="18. 宏定义（易错点）"></a>18. 宏定义（易错点）</h2><p>宏定义：用宏名来表示一个字符串，在宏展开时又以该字符串取代宏名。</p><p>注意：</p><p>（1）宏名在宏展开时被<strong>直接</strong>替换为宏定义时宏名后面的字符串。 </p><p>（2）字符串中可以含任何字符，可以是常数，也可以是表达式。</p><p>（3）宏定义必须写在函数之外，其作用域为宏定义命令起到源程序结束。如要终止其作用域可使用#undef命令。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M N+1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 2*M+1 </span></span><br><span class="line"><span class="comment">//这时候NUM=2*N+1+1=6，即用N+1直接替换M</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"N=%d\n"</span>,N);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"M=%d\n"</span>,M);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NUM=%d\n"</span>,NUM);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=NUM;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>宏定义是由源程序中的宏定义命令#define完成的，宏代换是由<strong>预处理程序</strong>完成的。</p><p>宏定义的一般形式为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  宏名  字符串</span></span><br></pre></td></tr></table></figure></p><p>表示这是一条<strong>预处理命令</strong>，所有的预处理命令都以#开头。define是预处理命令。宏名是标识符的一种，命名规则和标识符相同。字符串可以是常数、表达式等。<br>这里所说的字符串是一般意义上的字符序列，<strong>不要和C语言中的字符串等同</strong>，它<strong>不需要双引号</strong>。</p><h2 id="19-定义结构体"><a href="#19-定义结构体" class="headerlink" title="19. 定义结构体"></a>19. 定义结构体</h2><p> <strong>（1）</strong> 先声明结构体类型，再定义该类型的变量。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="keyword">char</span> addr[<span class="number">30</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//struct Student为结构体类型名，student1，student2是结构体变量名。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student1</span>,<span class="title">student2</span>;</span></span><br></pre></td></tr></table></figure></p><p><strong>（2）</strong> 在声明类型的同时定义变量<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="keyword">char</span> addr[<span class="number">30</span>];</span><br><span class="line">&#125; student1,student2;</span><br></pre></td></tr></table></figure></p><p><strong>（3）不指定类型名</strong>而直接定义结构体类型变量<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="keyword">char</span> addr[<span class="number">30</span>];</span><br><span class="line">&#125; student1,student2;</span><br></pre></td></tr></table></figure></p><p><strong>(4) 结构体的初始化需注意的一个地方</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">float</span> f;</span><br><span class="line">&#125; a;</span><br><span class="line"><span class="comment">//a.i = 65;//错误，“a.d = 65;”是一个可执行代码，需放在函数中才能执行。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a.i = <span class="number">65</span>;<span class="comment">//正确</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">float</span> f;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span> <span class="title">c</span>;</span><span class="comment">//错误的,为可执行代码，应放在函数中</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span> <span class="title">a</span> = &#123;</span><span class="number">65</span>,<span class="string">'H'</span>,<span class="number">30.0</span>&#125;;<span class="comment">//正确</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span> <span class="title">b</span> = &#123;</span>.i= <span class="number">0</span>, .ch = <span class="string">'H'</span>,.f = <span class="number">30.0</span>&#125;;<span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//不能使用赋值语句对结构体变量中的全部成员整体赋值。(字符数组也是这个道理)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct Data d;</span></span><br><span class="line"><span class="comment">d=&#123;86,'K',63.0&#125;;//错误</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span> <span class="title">d</span>=&#123;</span><span class="number">86</span>,<span class="string">'K'</span>,<span class="number">63.0</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct Data a;</span></span><br><span class="line"><span class="comment">a.i= 0; is not a simple initializer, it is executable code; it cannot occur outside of a function. Use a proper initializer for a.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">struct Data a = &#123;65,'H',30.0&#125;;</span></span><br><span class="line"><span class="comment">or with named initializer syntax (not available in all compilers, and as yet only in C):</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">struct Data a = &#123;.i= 0, .ch = 'H',.f = 30.0&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="20-结构体指针"><a href="#20-结构体指针" class="headerlink" title="20.  结构体指针"></a>20.  结构体指针</h2><p><strong>（1）</strong> 指向结构体对象的指针变量既可以指向<strong>结构体变量</strong>，也可以指向<strong>结构体数组中的元素</strong>。</p><p><strong>（2） 3种访问结构体变量的成员的方法：</strong></p><p>如果p指向一个结构体变量stu，下列三种用法等价：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> stu.成员名  （如stu.name）</span><br><span class="line"><span class="number">2.</span> (*p).成员名  (如(*p).name)</span><br><span class="line"><span class="number">3.</span> p-&gt;成员名    (如p-&gt;name)</span><br></pre></td></tr></table></figure></p><p><strong>（3）用结构体变量和结构体变量的指针作函数参数</strong></p><p><strong>a.</strong>  用结构体变量的成员作实参；<br>如用stu[1].name作实参，将实参值传给形参。</p><p><strong>b.</strong>  用结构体变量作实参；<br>注意：在函数调用期间形参也要占用内存单元，空间和时间开销较大。</p><p><strong>c.</strong>  用指向结构体变量（或数组元素）的指针作实参，将结构体变量（或数组元素）的地址传给形参；</p><h2 id="21-用指针处理链表"><a href="#21-用指针处理链表" class="headerlink" title="21. 用指针处理链表"></a>21. 用指针处理链表</h2><p><strong>(1)  静态链表</strong></p><p><strong>(2)  动态链表</strong> </p><h2 id="22-共用体类型"><a href="#22-共用体类型" class="headerlink" title="22. 共用体类型"></a>22. 共用体类型</h2><p><strong>(1)</strong> 几个<strong>不同类型</strong>的变量<strong>共享同一段内存</strong>的结构，称为“<strong>共用体</strong>”类型的结构。</p><p><strong>(2) 结构体和共用体的区别</strong><br><strong>结构体变量</strong>所占内存长度是<strong>各成员占的内存长度之和</strong>，每个成员分别占有其自己的内存单元。<br>而<strong>共用体变量</strong>所占的内存长度等于<strong>最长的成员所占的内存长度</strong>，每个成员存储的起始地址是相同的。</p><h2 id="23-共用体数据类型的特点"><a href="#23-共用体数据类型的特点" class="headerlink" title="23. 共用体数据类型的特点"></a>23. 共用体数据类型的特点</h2><p><strong>(1)</strong> 同一个内存段可以用来存放几种不同数据类型的成员，但在每一瞬间只能存放其中一个成员，而不是同时存放几个。即<strong>每一瞬间，共用体变量中只能存放一个值</strong>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> Data</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">float</span> f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a.i=65;//错误的</span></span><br><span class="line"><span class="comment">//union Data a = &#123;65,'H',30.0&#125;;//注意：不能同时初始化共同体的3个成员，因为它们占用同一段存储单元。 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a.i=<span class="number">65</span>;<span class="comment">//注意赋值不能在函数外 ,因为"a.i=65"是一段可执行的代码，必须放在函数中才能执行。 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a.i);<span class="comment">//输出整数65</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,a.ch);<span class="comment">//输出字符‘a’</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>,a.f);<span class="comment">//输出实数0.000000（难点）</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>(2)</strong> 共用体初始化表中只能有一个常量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> Data</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">float</span> f;</span><br><span class="line">&#125; a=&#123;<span class="number">1</span>,<span class="string">'a'</span>,<span class="number">2.5</span>&#125;;<span class="comment">//错误，不能同时初始化3个成员，因为它们占用同一段存储单元。</span></span><br><span class="line">union Data b=&#123;2,'b','1.5'&#125;;//也是错误，理由同上。</span><br><span class="line"><span class="keyword">union</span> Data c=&#123;<span class="number">16</span>&#125;;<span class="comment">//正确，对第一个成员初始化</span></span><br><span class="line"><span class="keyword">union</span> Data d=&#123;.ch=<span class="string">'h'</span>&#125;;<span class="comment">//正确，C99允许对指定的一个成员初始化。</span></span><br></pre></td></tr></table></figure><p><strong>(3)</strong> 共用体变量中其作用的成员是<strong>最后一次被赋值的成员</strong>(前面的赋值会被后面的赋值所覆盖)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.ch=<span class="string">'a'</span>;</span><br><span class="line">a.f=<span class="number">2.5</span>;</span><br><span class="line">a.i=<span class="number">66</span>;</span><br></pre></td></tr></table></figure><p>在完成上述3个赋值运算后，变量存储单元存放的是最后存入的40，原来的’a’和1.5都被覆盖了。<br>如果此时用<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a.ch);<span class="comment">//输出的是字符'b'（因为ASCII码为66，正好为字符'b'）</span></span><br></pre></td></tr></table></figure></p><p><strong>(4)</strong> 共用体变量的地址和它的各成员的地址都是同一地址（起始地址相同）。</p><p><strong>(5)</strong> C99允许同类型的共用体变量相互赋值。如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b=a;<span class="comment">//a和b是同类型的共用体变量，合法</span></span><br></pre></td></tr></table></figure></p><p><strong>(6)</strong> 以前的的C规定不能用共用体变量作为函数参数，但可以使用<strong>指向共用体变量的指针</strong>作函数参数。<strong>C99允许用共用体变量作为函数参数</strong>。</p><p><strong>(7)</strong> 共用体类型可以出现在结构体类型定义中，也可以定义共用体数组。反之，结构体也可以出现在共用体类型定义中，数组也可以作为共用体的成员。</p><h2 id="24-枚举类型"><a href="#24-枚举类型" class="headerlink" title="24. 枚举类型"></a>24. 枚举类型</h2><p>如果一个变量只有几种可能的值，则可以定义为<strong>枚举类型</strong>。所谓<strong>枚举</strong>就是把可能的值一一列举出来，变量的值<strong>只限于列举出来的值的范围内</strong>。</p><p><strong>(1)</strong> C编译对枚举类型的枚举元素<strong>按常量处理</strong>，故称<strong>枚举常量</strong>。不要因为它们是标识符（有名字）而把它们看作变量，不能对它们赋值。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Weekday&#123;sun,mon,tue,wed,thu,fri,sat&#125;;</span><br><span class="line">sun=<span class="number">7</span>;<span class="comment">//错误，不能对枚举元素赋值。</span></span><br><span class="line">mon=<span class="number">1</span>;<span class="comment">//错误，不能对枚举元素赋值。</span></span><br></pre></td></tr></table></figure></p><p><strong>(2)</strong> 每一个枚举元素都代表一个整数，C语言编译按定义时的顺序默认为它们的值为0,1,2,3,4,5…。如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Weekday&#123;sun,mon,tue,wed,thu,fri,sat&#125;;</span><br></pre></td></tr></table></figure></p><p>这里默认sun的值为0，mon的值为1，…sat的值为6。<br>如果有赋值语句：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workday=mon;</span><br></pre></td></tr></table></figure></p><p>相当于<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workday=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>也可以人为地指定枚举元素的数值，在定义枚举类型时显式地指定，例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Weekday&#123;sun=<span class="number">7</span>,mon=<span class="number">1</span>;tue,wed,thu,fri,sat&#125; workday,week_end;</span><br></pre></td></tr></table></figure></p><p>指定枚举常量sun的值为7，mon为1，以后顺序加1，sat为6。</p><p><strong>注：</strong></p><p>由于枚举型变量的值是整数，因此C99把枚举类型也作为<strong>整型数据中的一种</strong>，即<strong>用户自行定义的整型类型</strong>。</p><p><strong>(3)</strong> 枚举类型可以用来<strong>作判断比较</strong>。例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(workday==mon)...</span><br><span class="line"><span class="keyword">if</span>(workday&gt;sun)...</span><br></pre></td></tr></table></figure></p><h2 id="25-用typedef声明新类型名"><a href="#25-用typedef声明新类型名" class="headerlink" title="25. 用typedef声明新类型名"></a>25. 用typedef声明新类型名</h2><p><strong>(1)</strong> 简单地用一个<strong>新的类型名</strong>代替<strong>原有的类型名</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Integer;<span class="comment">//指定用Integer为类型名，作用与int相同。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> Real;<span class="comment">//指定Real为类型名，作用与float相同。</span></span><br></pre></td></tr></table></figure><p>下面两行等价：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i,j; <span class="keyword">float</span> a,b;</span><br><span class="line">Integer i,j; Real a,b;</span><br></pre></td></tr></table></figure></p><p><strong>(2)</strong> 命名一个<strong>简单的类型名</strong>代替一个<strong>复杂的类型表示方法</strong>。</p><p><strong>a.</strong> 命名一个<strong>新的类型名</strong>代表<strong>结构体类型</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line">&#125; Date;</span><br></pre></td></tr></table></figure></p><p>以上声明了一个新类型名Date，代表上面的一个结构体类型。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date birthday;<span class="comment">//定义结构体变量birthday，不要写成struct Date birthday；</span></span><br><span class="line">Date *p;<span class="comment">//定义结构体指针变量p，指向此结构体类型数据。</span></span><br></pre></td></tr></table></figure></p><p><strong>b.</strong> 命名一个<strong>新的类型名</strong>代表<strong>数组类型</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Num[<span class="number">100</span>];<span class="comment">//声明Num为整型数组类型名。</span></span><br><span class="line">Num a;<span class="comment">//定义a为整型数组名，其包括100个元素。相当于int a[100];</span></span><br></pre></td></tr></table></figure></p><p><strong>c.</strong> 命名一个<strong>新的类型名</strong>代表<strong>指针类型</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> * String;<span class="comment">//声明String为字符指针类型名</span></span><br><span class="line">String p,s[<span class="number">10</span>];<span class="comment">//定义p为字符指针变量，s为字符指针数组。</span></span><br></pre></td></tr></table></figure></p><p><strong>d.</strong> 命名一个<strong>新的类型名</strong>代表<strong>指向函数的指针类型</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*Pointer)</span><span class="params">()</span></span>;<span class="comment">//声明Pointer为指向函数的指针类型名，该函数返回int类型的数值。</span></span><br><span class="line">Pointer p1,p2;<span class="comment">//定义p1,p2为指向函数的指针变量。</span></span><br></pre></td></tr></table></figure></p><p><strong>注：</strong></p><p><strong>声明一个新的类型名的方法就是</strong>：</p><p>按定义变量的方式，把<strong>变量名</strong>换成<strong>新的类型名</strong>，并且在最前面加上一个<strong>typedef</strong>,就声明了新类型名代表原来的类型。</p><p><strong>(3) typedef 与 #define表面上有相似之处,但是两者是不同的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Count;</span><br></pre></td></tr></table></figure><p>和<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Count int</span></span><br></pre></td></tr></table></figure></p><p>从表面上看，它们都是用Count代表int。但事实上，它们二者是有区别的。</p><p><strong>a.  #define</strong> 是在<strong>预编译时</strong>处理的，它只能<strong>作简单的字符串替换</strong>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Count int</span></span><br><span class="line">Count a;</span><br></pre></td></tr></table></figure></p><p>这里<strong>只是简单地</strong>用Count这个字符来代替int而已。</p><p><strong>b. typedef</strong>是在<strong>编译阶段</strong>处理的，它<strong>并不是</strong>作简单的字符串替换。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Num[<span class="number">10</span>];</span><br><span class="line">Num a;</span><br></pre></td></tr></table></figure></p><p>并不是用“Num[10]”去代替“int”，而是如同定义变量的方法那样<strong>先</strong>生成一个<strong>类型名</strong>，然后再去定义变量。</p><p><strong>(4)</strong> 当<strong>不同源文件中用到同一类型数据</strong>（尤其是像数组、指针、结构体、共用体等类型数据）时，常用<strong>typedef</strong>声明一些数据类型。可以把<strong>所有的typedef名称声明</strong>单独<strong>放到一个头文件中</strong>，然后在需要用到它们的文件中用<strong>#include 指令</strong>把它们包含在文件中。这样就<strong>不需要在各文件中</strong>自己定义<strong>typedef名称</strong>了。</p><p><strong>(5) 使用typedef名称有利于程序的通用和移植。</strong></p><p>例如有的计算机系统int类型数据占用两个字节（假设为A系统），有的系统则占用4个字节（假设为B系统）。如果把一个C程序从B系统移植到A系统中，按照一般方法则是要将定义变量中的每个int改为long，如果程序中有多处用int定义变量，则需要修改多处。（4个字节表示一个整数，其数值范围为-21亿到+21亿，要想它在2个字节表示一个整数的系统中存储下来，则必须提前将int类型改为long型（在2个字节表示一个整数的系统long型占4个字节，能够容纳下-21亿到+21亿的数））。（<strong>注意理解</strong>）</p><p>如果使用Integer来替代int，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Integer;</span><br></pre></td></tr></table></figure></p><p>程序中所有整型变量都用Integer定义。在移植时<strong>只须修改typedef定义体一处</strong>即可:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> Integer;</span><br></pre></td></tr></table></figure></p><h2 id="26-文件（难点、抽象）"><a href="#26-文件（难点、抽象）" class="headerlink" title="26. 文件（难点、抽象）"></a>26. 文件（难点、抽象）</h2><h3 id="1-两种类型的文件"><a href="#1-两种类型的文件" class="headerlink" title="1. 两种类型的文件"></a>1. 两种类型的文件</h3><ul><li>程序文件<ul><li>源程序文件（.c）</li><li>目标文件（.obj）</li><li>可执行文件（.exe）</li></ul></li><li>数据文件<ul><li>按数据的组织类型分为<ul><li>ASCII文件（文本文件）：每个字节放一个字符的ASCII代码</li><li>二进制文件（映像文件）：存储在内存的数据的映像</li></ul></li></ul></li></ul><h3 id="2-数据在磁盘上如何存储"><a href="#2-数据在磁盘上如何存储" class="headerlink" title="2. 数据在磁盘上如何存储"></a>2. 数据在磁盘上如何存储</h3><p>字符一律以ASCII形式存储，数值型数据既可以用ASCII形式存储，也可以用二进制形式存储。 </p><h3 id="3-文件指针"><a href="#3-文件指针" class="headerlink" title="3. 文件指针"></a>3. 文件指针</h3><p>一种C编译环境提供的stdio.h头文件中有以下的文件类型声明：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">short</span> level;<span class="comment">//缓冲区“满”或“空”的程度</span></span><br><span class="line"><span class="keyword">unsigned</span> flags;<span class="comment">//文件状态标志</span></span><br><span class="line"><span class="keyword">char</span> fd;<span class="comment">//文件描述符</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> hold;<span class="comment">//如缓冲区无内容不读取字符</span></span><br><span class="line"><span class="keyword">short</span> bsize;<span class="comment">//缓冲区的大小</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> * buffer;<span class="comment">//数据缓冲区的位置</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> * curp;<span class="comment">//指针当前的指向</span></span><br><span class="line"><span class="keyword">unsigned</span> istemp;<span class="comment">//临时文件指示器</span></span><br><span class="line"><span class="keyword">short</span> token;<span class="comment">//用于有效性检查</span></span><br><span class="line">&#125; FILE;</span><br></pre></td></tr></table></figure></p><p>（1）不同的C编译系统的FILE类型包含的内容不完全相同，但大同小异。</p><p>（2）在程序中可以直接用FILE类型定义变量。</p><p>（3）每一个FILE类型变量对应一个文件的信息区，在其中存放该文件的有关信息。</p><p>（4）一般不对FILE类型变量命名，也就是<strong>不通过变量的名字来引用这些变量</strong>,而是<strong>设置一个指向FILE类型变量的指针变量</strong>，然后<strong>通过它来引用这些FILE类型变量</strong>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE * fp;<span class="comment">//定义一个指向文件类型数据的指针变量；</span></span><br></pre></td></tr></table></figure></p><p>（5）每一个指针变量指向一个FILE类型变量，每一个FILE类型变量对应一个文件的信息区。指向文件的指针变量是指向内存中的文件信息区的开头。</p><h3 id="4-打开和关闭文件"><a href="#4-打开和关闭文件" class="headerlink" title="4. 打开和关闭文件"></a>4. 打开和关闭文件</h3><p>（1）<strong>打开文件</strong>就是指为文件建立相应的<strong>信息区</strong>（用来存放有关文件的信息）和<strong>文件缓冲区</strong>（用来暂时存放输入输出的数据）。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fopen(文件名,使用文件方式);<span class="comment">//fopen函数的返回值是一个指向文件类型的指针变量。</span></span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fopen(<span class="string">"f1"</span>,<span class="string">"r"</span>);</span><br></pre></td></tr></table></figure></p><p>表示要打开名字为“f1”的文件，使用文件方式为“读入”，fopen函数的返回值是指向文件f1的指针（即f1文件信息区的起始地址）。</p><p><strong>使用文件方式</strong></p><table><thead><tr><th style="text-align:center">文件使用方式</th><th style="text-align:center">含义</th><th style="text-align:center">如果指定的文件不存在</th></tr></thead><tbody><tr><td style="text-align:center">r（只读）</td><td style="text-align:center">为了输入数据，打开一个已存在的文本文件</td><td style="text-align:center">出错</td></tr><tr><td style="text-align:center">w（只写）</td><td style="text-align:center">为了输出数据，打开一个文本文件</td><td style="text-align:center">建立新文件</td></tr><tr><td style="text-align:center">a（追加）</td><td style="text-align:center">向文本末尾添加数据</td><td style="text-align:center">出错</td></tr><tr><td style="text-align:center">rb（只读）</td><td style="text-align:center">为了输入数据，打开一个二进制文件</td><td style="text-align:center">出错</td></tr><tr><td style="text-align:center">wb（只写）</td><td style="text-align:center">为了输出数据，打开一个二进制文件</td><td style="text-align:center">建立新文件</td></tr><tr><td style="text-align:center">ab（追加）</td><td style="text-align:center">在二进制文件末尾添加数据</td><td style="text-align:center">出错</td></tr><tr><td style="text-align:center">r+（读写）</td><td style="text-align:center">为了读和写，打开一个文本文件</td><td style="text-align:center">出错</td></tr><tr><td style="text-align:center">w+（读写）</td><td style="text-align:center">为了读和写，建立一个新的文本文件</td><td style="text-align:center">建立新文件</td></tr><tr><td style="text-align:center">a+（读写）</td><td style="text-align:center">为了读和写，打开一个文本文件</td><td style="text-align:center">出错</td></tr><tr><td style="text-align:center">rb+（读写）</td><td style="text-align:center">为了读和写，打开一个二进制文件</td><td style="text-align:center">出错</td></tr><tr><td style="text-align:center">wb+（读写）</td><td style="text-align:center">为了读和写，建立一个新的二进制文件</td><td style="text-align:center">建立新文件</td></tr><tr><td style="text-align:center">ab+（读写）</td><td style="text-align:center">为了读和写，打开一个二进制文件</td><td style="text-align:center">出错</td></tr></tbody></table><p><strong>注：</strong></p><p>“w”(只写)：如果原来不存在该文件，则在打开文件前建立一个以指定的名字命名的文件。<strong>如果原来存在该文件，则先删除，然后重新建立一个新文件</strong>。</p><p>常用下面的方法打开一个文件：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((fp=fopen(<span class="string">"file1"</span>,<span class="string">"r"</span>))==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"cannot open this file\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">//关闭所有文件，终止正在执行的程序。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（2）<strong>关闭文件</strong>就是指<strong>撤销文件信息区和文件缓冲区</strong>，<strong>使文件指针变量不再指向该文件</strong>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose(文件指针);</span><br></pre></td></tr></table></figure></p><p><strong>fclose函数的返回值</strong>为：</p><ul><li>当成功执行了关闭操作，则返回值为0；</li><li>反之，返回值为EOF（-1）；</li></ul><p>例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose(fp);<span class="comment">//fp为指向文件的指针变量；</span></span><br></pre></td></tr></table></figure></p><h3 id="5-向文件读写字符"><a href="#5-向文件读写字符" class="headerlink" title="5. 向文件读写字符"></a>5. 向文件读写字符</h3><p><strong>读写一个字符的函数</strong></p><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">调用形式</th><th style="text-align:center">功能</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td style="text-align:center">fgetc</td><td style="text-align:center">fgetc(fp)</td><td style="text-align:center">从fp指向的文件读入一个字符</td><td style="text-align:center">读成功，则返回所读的字符；失败则返回文件结束标志EOF（即-1）</td></tr><tr><td style="text-align:center">fputc</td><td style="text-align:center">fputc(ch,fp)</td><td style="text-align:center">把字符ch写到fp指向的文件中</td><td style="text-align:center">输入成功，则返回值是输出的字符；输出失败，则是返回EOF(即-1)</td></tr></tbody></table><p><strong>注:</strong></p><p>C系统已把fputc和fgetc函数定义为宏名putc和getc:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(ch,fp) fputc(ch,fp)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(ch,fp) fgetc(ch,fp)</span></span><br></pre></td></tr></table></figure></p><p>这是在stdio.h文件中定义的。因此，在程序中用putc和fputc作用是一样的，用getc和fgetc的作用也是一样的。</p><h3 id="6-向文件读写一个字符串"><a href="#6-向文件读写一个字符串" class="headerlink" title="6. 向文件读写一个字符串"></a>6. 向文件读写一个字符串</h3><p><strong>读写一个字符串的函数</strong></p><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">调用形式</th><th style="text-align:center">功能</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td style="text-align:center">fgets</td><td style="text-align:center"><strong>fgets(str,n,fp)</strong></td><td style="text-align:center">从fp指向的文件中读入<strong>一个长度为（n-1）的字符串</strong>（不包括字符串结束字符‘\0’）</td><td style="text-align:center">读成功，返回<strong>地址</strong>str；失败则返回NULL</td></tr><tr><td style="text-align:center">fputs</td><td style="text-align:center"><strong>fputs(str,fp)</strong></td><td style="text-align:center">将str指向的字符串输出到fp指向的文件中</td><td style="text-align:center"><strong>输出成功，返回0</strong>；否则<strong>返回非0值</strong></td></tr></tbody></table><p><strong>注：</strong></p><p>如果在读完n-1个字符之前遇到换行符‘\n’或文件结束符EOF，读入即结束，但将所遇到的换行符‘\n’也作为一个字符读入。</p><h3 id="7-用格式化的方式读写文件"><a href="#7-用格式化的方式读写文件" class="headerlink" title="7.用格式化的方式读写文件"></a>7.用格式化的方式读写文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(文件指针,格式字符串，输出表列);<span class="comment">//格式化写函数（写入文件）</span></span><br><span class="line"><span class="built_in">fscanf</span>(文件指针，格式字符串，输入列表);<span class="comment">//格式化读函数（读文件）</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li><strong>fprintf:</strong> 输出时要将内存中的二进制形式转化成字符。</li><li><strong>fscanf:</strong> 读入时要将文件中的ASCII码转换为二进制形式，再保存在内存变量中。</li></ul><p>上面两种转换要花费一定的时间，因此，在<strong>内存与磁盘频繁交换数据</strong>的情况下，<strong>最好不用fprintf和fscanf函数</strong>，<strong>而用</strong>下面介绍的<strong>fread和fwrite</strong>函数进行<strong>二进制的读写</strong>。</p><h3 id="8-用二进制方式对文件进行读写"><a href="#8-用二进制方式对文件进行读写" class="headerlink" title="8.用二进制方式对文件进行读写"></a>8.用二进制方式对文件进行读写</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fread（buffer,size,count,fp);<span class="comment">//执行成功时返回形参count的值（int），即读入数据项的个数；</span></span><br></pre></td></tr></table></figure><ul><li>buffer：表示从文件中读入的数据要存入到内存中的存储块地址；</li><li>size：要读写的字节数（每个数据项的大小）；</li><li>count：要读写的数据项数；（每个数据项的长度为size）</li><li><p>fp: FILE类型指针；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fwrite(buffer,size,count,fp);<span class="comment">//执行成功时返回形参count的值（int），即输出数据项的个数；</span></span><br></pre></td></tr></table></figure></li><li><p>buffer：要输出到文件中的那段数据在内存中的存储区的地址；</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/02/02/C语言笔记/C语言笔记.png&quot; title=&quot;Learn C Language&quot;&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://yuanziwoxin.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记（一）</title>
    <link href="https://yuanziwoxin.github.io/2018/02/01/Python%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://yuanziwoxin.github.io/2018/02/01/Python笔记（一）/</id>
    <published>2018-02-01T10:03:02.000Z</published>
    <updated>2019-04-19T15:23:01.937Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/02/01/Python笔记（一）/Python笔记（一）.jpg" title="Life is short,you need Python!"><a id="more"></a><ul><li><p><strong>1.元组与列表的区别及元组的一些小细节</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type((<span class="number">1</span>))   <span class="comment">#这里显示为int类型，而不是tuple类型，这里把里面的“（）”即括号当作是数学运算中的括号</span></span><br><span class="line">type((<span class="string">'hello'</span>))  <span class="comment">#这里显示为str类型，而不是tuple类型</span></span><br><span class="line">type([<span class="string">"hello"</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="keyword">False</span>]) <span class="comment">#显示为list类型</span></span><br><span class="line">type((<span class="keyword">False</span>,<span class="string">"hello"</span>,<span class="number">1</span>,<span class="number">4</span>)) <span class="comment">#显示为tuple类型</span></span><br><span class="line"><span class="comment">#注意：方括号为list类型，而圆括号为tuple类型</span></span><br><span class="line">type((<span class="number">1</span>,))       <span class="comment">#表示只有一个元素的元组</span></span><br><span class="line">type((<span class="string">"hello"</span>,)) <span class="comment">#表示只有一个元素的元组</span></span><br><span class="line">type(()) <span class="comment">#这里显示为tuple类型</span></span><br><span class="line">type([<span class="number">1</span>]) <span class="comment">#这里显示为list类型</span></span><br><span class="line"><span class="comment"># str,list,tuple都为序列，其许多相应操作都类似</span></span><br></pre></td></tr></table></figure></li><li><p><strong>2. 集合</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type(&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>&#125;)</span><br><span class="line"><span class="comment">#"&#123;&#125;"表示集合，集合的几个特性</span></span><br><span class="line"><span class="comment"># （1）无序（因此不是序列，不可以通过下标标识来取某个元素，也不可以切片）</span></span><br><span class="line"><span class="comment"># （2）不重复</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#空集合</span></span><br><span class="line">set()</span><br><span class="line">type(set()) <span class="comment">#这里显示为set类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集合的几种特殊操作：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>&#125; - &#123;<span class="number">1</span>&#125;  <span class="comment">#两个集合的差集</span></span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">23</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">123</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125; &amp; &#123;<span class="number">34</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>&#125; <span class="comment">#两个集合的交集</span></span><br><span class="line">&#123;<span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>&#125; | &#123;<span class="number">5</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">2</span>&#125; <span class="comment">#两个集合的并集</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>3.  字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'lbj'</span>: <span class="string">'詹姆斯'</span>, <span class="string">'kg'</span>: <span class="string">'加内特'</span>, <span class="string">'kb'</span>: <span class="string">'科比'</span>&#125;</span><br><span class="line">&#123;<span class="string">'lbj'</span>: <span class="string">'詹姆斯'</span>, <span class="string">'kg'</span>: <span class="string">'加内特'</span>, <span class="string">'kb'</span>: <span class="string">'科比'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典的典型操作：通过key值取value值操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'23'</span>: <span class="string">'詹姆斯'</span>, <span class="number">5</span>: <span class="string">'加内特'</span>, <span class="string">'kb'</span>: <span class="string">'科比'</span>,<span class="number">23</span>:<span class="string">'乔丹'</span>&#125;[<span class="string">'23'</span>]</span><br><span class="line"><span class="string">'詹姆斯'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'23'</span>: <span class="string">'詹姆斯'</span>, <span class="number">5</span>: <span class="string">'加内特'</span>, <span class="string">'kb'</span>: <span class="string">'科比'</span>,<span class="number">23</span>:<span class="string">'乔丹'</span>&#125;[<span class="number">23</span>]</span><br><span class="line"><span class="string">'乔丹'</span></span><br><span class="line"><span class="comment">#注意：（1）key值不能重复；</span></span><br><span class="line"><span class="comment">#  （2）23是整数值，‘23’是字符串值，因此这两者当作key时是两个不同的key值；</span></span><br><span class="line"><span class="comment">#  （3）当字典中有两个相同的key值，通过该key值取出来的是后面对应这个value值</span></span><br></pre></td></tr></table></figure></li><li><p><strong>4. 不要使用关键字和保留字作变量名</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(type)  <span class="comment">#正确</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">1</span>)      <span class="comment">#报错</span></span><br><span class="line"><span class="comment">#这样会报以下错误：</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#15&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    type(<span class="number">1</span>)</span><br><span class="line">TypeError: <span class="string">'int'</span> object <span class="keyword">is</span> <span class="keyword">not</span> callable</span><br><span class="line"><span class="comment">#错误即为：不可以把int对象当作函数调用，你已经把type定义为int类型的变量了，所以当你要使用type函数时就会报错。这里的type(1)就相当于1(1),这显然不是一个正确的函数调用。</span></span><br></pre></td></tr></table></figure></li><li><p><strong>5. 值类型和引用类型</strong><br><strong>注意：</strong>int 、str 、tuple(元组)为值类型（<em>不可改变</em>），list、set、dict为引用类型（<em>可改变</em>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a,b)</span><br><span class="line"><span class="number">3</span> <span class="number">1</span><span class="comment">#a(int类型)为值类型（不可改变）， b不随a变化而变化，值仍为1。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>]=<span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a,b)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="string">'hello'</span>] [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'hello'</span>]</span><br><span class="line"><span class="comment"># a（list类型）为引用类型(可改变)，b的值随a的改变而改变。</span></span><br></pre></td></tr></table></figure></li></ul><p>注：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=a+<span class="string">'python'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">hellopython</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">87241952</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=b+<span class="string">'python'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">82488640</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#比较两次id(b)的变化可以知道，执行完b=b+'python'后，b是一个新的字符串了（相当于形成的新字符串存储在新的存储位置，而不是在原字符串的存储位置上进行修改，原字符串并未改变），不是原来的字符串了，因此值类型不可改变。</span></span><br></pre></td></tr></table></figure></p><p>以下代码也进一步说明了值类型不可以改变：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'python'</span>[<span class="number">0</span>]</span><br><span class="line"><span class="string">'p'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'python'</span>[<span class="number">0</span>]=<span class="string">'a'</span></span><br><span class="line"><span class="comment">#报如下错误：</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#9&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="string">'python'</span>[<span class="number">0</span>]=<span class="string">'a'</span></span><br><span class="line">TypeError: <span class="string">'str'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure></p><ul><li><strong>6.  列表的可变与元组的不可变</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表的可变</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">95224576</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(id(a))</span><br><span class="line"><span class="string">'0x5ad0300'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]=<span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">95224576</span><span class="comment">#修改列表中某个元素的值后，该列表的id依然未变，说明列表的可变性。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">[<span class="string">'hello'</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#元组的不可变</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>]=<span class="string">'hello'</span></span><br><span class="line"><span class="comment">#当对元组中的元素进行修改时，会报以下错误（说明元组的不可变性）：</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#7&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a[<span class="number">1</span>]=<span class="string">'hello'</span></span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure></li></ul><p>列表可以利用append函数添加元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><p>而元组不可以利用append函数添加元素，因为元组不可变<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.append(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#12&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    c.append(<span class="number">4</span>)</span><br><span class="line">AttributeError: <span class="string">'tuple'</span> object has no attribute <span class="string">'append'</span></span><br></pre></td></tr></table></figure></p><p>访问元组中的列表的元素（类似于多维数组）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">7</span>,<span class="number">8</span>,[<span class="string">'hello'</span>,<span class="number">9</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>][<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line"><span class="string">'hello'</span><span class="comment">#以类似于三维数组的方式访问到‘hello’</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>][<span class="number">2</span>][<span class="number">0</span>]=<span class="string">'python'</span>  <span class="comment">#把‘hello’改成python</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="string">'python'</span>, <span class="number">9</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="comment">#这里把‘hello’改成了‘python’,</span></span><br><span class="line"><span class="comment">#注意：这里之所以可以改变是因为这里改变的是列表，而不是元组。</span></span><br></pre></td></tr></table></figure></p><ul><li><p><strong>7. 逻辑运算符 </strong><br>（1）对于int、float类型，0被认为False,非0被认为True；<br>（2）对于字符串（str）类型，空字符串被认为False,非空字符被认为是True；<br>（3）对于列表，空列表被认为是False，非空列表被认为是True；（元组、集合、字典则与此类似）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">and</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">'b'</span><span class="comment">#相当于True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' '</span> <span class="keyword">and</span> <span class="string">'b'</span>  </span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="comment">#注意：' '里面是空格，空格也是字符串，所以' '是非空字符串，相当于True，当第一个元素为True时，则整个与运算的结果由第二个元素决定，因此返回第二个元素。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span> <span class="keyword">and</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">''</span>     <span class="comment">#相当于False</span></span><br><span class="line"><span class="comment">#当第一个元素为False时，则整个与运算的结果必定为False，因此返回第一个元素。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">or</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span> <span class="keyword">or</span>  <span class="string">'b'</span></span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="comment">#当第一个元素为True时，则整个或运算的结果必然为True，因此返回第一个元素；</span></span><br><span class="line"><span class="comment">#当第一个元素为False时，则整个或运算的结果由第二个元素决定，因此返回第二个元素。</span></span><br></pre></td></tr></table></figure></li><li><p><strong>8. 成员运算符</strong><br><em>注意：字典中使用成员运算符，是针对 key而言，而不是value</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'lbj'</span> <span class="keyword">in</span> &#123;<span class="string">'lbj'</span>:<span class="number">23</span>&#125;</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">23</span> <span class="keyword">in</span> &#123;<span class="string">'lbj'</span>:<span class="number">23</span>&#125;</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p><strong>9. 身份运算符</strong><br>注意：关系运算符比较的是<em>值的关系</em>,而身份运算符比较的是身份的关系（即存储地址是否相同）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a==b</span><br><span class="line"><span class="keyword">True</span><span class="comment">#值相等</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">False</span><span class="comment">#身份相同（即存储地址相同）</span></span><br><span class="line"><span class="comment">#通过id函数可知1和1.0两者存储的位置不同（即身份不同）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1723716656</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">87465824</span></span><br></pre></td></tr></table></figure></li></ul><p>关系运算符和身份运算符在集合中的应用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a==b </span><br><span class="line"><span class="keyword">True</span><span class="comment">#集合是无序的，只要元素相同，则两个集合的值是相等的。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">False</span><span class="comment">#两者的身份不同（即存储的地址不同）</span></span><br></pre></td></tr></table></figure></p><p>关系运算符和身份运算符在元组中的应用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c==d</span><br><span class="line"><span class="keyword">False</span><span class="comment">#注意：因为元组属于序列，是有序的，顺序不同则两者的值是不同的。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c <span class="keyword">is</span> d</span><br><span class="line"><span class="keyword">False</span><span class="comment">#两者的身份不同（即存储的地址不同）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下证明了元素属于序列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>10. 判断变量的值、身份与类型</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">'hello'</span>)==int</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">'hello'</span>)==str</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>注：虽可以通过type函数加关系运算符来判断变量的类型，但是不推荐使用这种方法，因为type不可以判断变量的子类型。</p><p>推荐使用<em>isinstance</em>函数来判断变量的类型：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'hello'</span>,str)</span><br><span class="line"><span class="keyword">True</span><span class="comment">#‘hello’是str类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'hello'</span>,(int,str,tuple))</span><br><span class="line"><span class="keyword">True</span><span class="comment">#‘hello’是int,str,tuple三种类型中的一种。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'hello'</span>,(int,list,tuple))</span><br><span class="line"><span class="keyword">False</span><span class="comment">#‘hello’是int,list,tuple三种类型中的一种。</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><ul><li><strong>11. 位运算符</strong><br>无论数字是否是二进制（如八进制，十进制等），都会被转化为二进制进行运算。<br>‘&amp;’（按位与）<br>‘|’（按位或）<br>‘^’（按位异或）<br>‘~’（按位取反）<br>‘&lt;&lt;’（左移动）<br>‘&gt;&gt;（右移动）</li><li><strong>12. 表达式</strong><br>表达式（Expression）是运算符（operater）和操作数（operand）所构成的序列。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a+b*c</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">or</span> b <span class="keyword">and</span> c</span><br><span class="line"><span class="number">1</span><span class="comment">#结果为1的原因：and的优先级高于or，所以先执行b and c得到结果为3，再执行a or 3得到结果为1。相当于 a or (b and c)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># not and or的优先级的顺序是not&gt;and&gt;or.</span></span><br></pre></td></tr></table></figure></li></ul><p>运算符优先级（注：同一行的优先级没有进行编排）<br><img src="./2015514101804370.jpg" alt="Alt text"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> a <span class="keyword">or</span> b+<span class="number">2</span> ==c</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="keyword">not</span> a) <span class="keyword">or</span> ((b+<span class="number">2</span>)==c)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#两者是等价的，注意：关系运算符的优先级大于逻辑运算符的，所以'=='的优先级大于not。</span></span><br></pre></td></tr></table></figure><ul><li><strong>13. break 与continue的区别</strong><br>break:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> A:</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span>     </span><br><span class="line">        <span class="comment">#只输出1，后面的2，3以及else中的end字符全都不输出。</span></span><br><span class="line">    print(x)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"end"</span>)</span><br><span class="line"><span class="comment">#结果为：1</span></span><br></pre></td></tr></table></figure></li></ul><p>continue:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> A:</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">continue</span>    </span><br><span class="line">        <span class="comment">#跳过2，不输出，其他的（如1，3，end字符）都输出。</span></span><br><span class="line">    print(x)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"end"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果为：1</span></span><br><span class="line"><span class="comment">#    3</span></span><br><span class="line"><span class="comment">#   end</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>14. 在python中实现类似于其他语言的for(int i=0;i&lt;10;i++)的效果</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python中的for循环主要用来对序列或集合、字典进行遍历或循环</span></span><br><span class="line"><span class="keyword">for</span> target_list <span class="keyword">in</span> expression_list:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><p>for与range<br>（1）顺序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类似于其他语言的for(int i=0;i&lt;10;i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    print(x, end=<span class="string">' | '</span>)</span><br><span class="line"><span class="comment">#注意：这里不会取到10,‘2’表示间隔量</span></span><br></pre></td></tr></table></figure></p><p>输出结果为：0  |  2  |  4  |  6  |  8  |<br>（2）逆序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">0</span>, <span class="number">-2</span>):</span><br><span class="line">    print(y, end=<span class="string">' | '</span>)</span><br><span class="line"><span class="comment">#注意：这里不会取到0,‘2’表示间隔量</span></span><br></pre></td></tr></table></figure></p><p>输出结果为：10  |  8  |  6  |  4  |  2  | </p><ul><li><strong>16. 两种方法实现按某种要求对序列进行访问</strong></li></ul><p>下面两者实现效果相同，<br>(1)法一：使用for循环方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(A), <span class="number">2</span>):</span><br><span class="line">    print(A[i])</span><br></pre></td></tr></table></figure></p><p>(2)法二：使用切片方式（python的特色）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">B = A[<span class="number">0</span>:len(A):<span class="number">2</span>]   <span class="comment">#注意这里的‘2’表示步长（即间隔大小）</span></span><br><span class="line">print(B)</span><br></pre></td></tr></table></figure></p><ul><li><strong>17. 导包问题</strong><br>t文件夹下的c1文件：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用__all__=['','']和‘*’可实现选择性导入变量</span></span><br><span class="line">__all__ =[<span class="string">'a'</span>,<span class="string">'b'</span>]</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><p>与t文件夹在同级目录下的文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> t.c1 <span class="keyword">as</span> m</span><br><span class="line">print(m.a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#引入变量</span></span><br><span class="line"><span class="keyword">from</span> t.c1 <span class="keyword">import</span> a</span><br><span class="line">print(a)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#引入模块</span></span><br><span class="line"><span class="keyword">from</span> t <span class="keyword">import</span> c1</span><br><span class="line">print(c1.a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> t.c1 <span class="keyword">import</span> *</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c) <span class="comment">#会报错，因为__all__=['a','b']并未包括c.</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>18. 包的循环引入问题（比较隐蔽）</strong></li></ul><p>p1.py文件的代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#p1文件引入p2文件</span></span><br><span class="line"><span class="keyword">from</span> p2 <span class="keyword">import</span> b</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></p><p>p2.py文件的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#p2文件又引入p1文件</span></span><br><span class="line"><span class="keyword">from</span> p1 <span class="keyword">import</span> a</span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><p>（1）p1文件引入了p2文件，而p2文件则又引入了p1文件，这就导致了循环引入现象，这是一个很隐蔽的错误。<br>（2）当然也可以是多个文件的循环引入，这发现起来更加困难。所以引入包时要尽量避免循环引入包。</p><ul><li><strong>19. 入口文件和普通模块</strong></li></ul><p>t文件夹下的c4.py代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">This is a t.c4 doc.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'name:  '</span>+__name__)</span><br><span class="line">print(<span class="string">'package:   '</span>+__package__)</span><br><span class="line">print(<span class="string">'doc:   '</span>+__doc__)</span><br><span class="line">print(<span class="string">'file:   '</span>+__file__)</span><br><span class="line"><span class="comment">#print('import:   '+__import__)</span></span><br></pre></td></tr></table></figure></p><p>seven文件夹下的c9.py文件代码如下：（注：c9.py和t文件夹位于seven中的同一级目录）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">This is a seven.c9 doc</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> t.c4</span><br><span class="line"></span><br><span class="line">print(<span class="string">'-----------------c9.py is below---------------'</span>)</span><br><span class="line">print(<span class="string">'name:  '</span>+__name__)</span><br><span class="line">print(<span class="string">'package:   '</span>+(__package__  <span class="keyword">or</span> <span class="string">'当前文件不存在任何包'</span>))</span><br><span class="line">print(<span class="string">'doc:   '</span>+(__doc__  <span class="keyword">or</span> <span class="string">'当前文件不存在文档注释'</span> ))</span><br><span class="line">print(<span class="string">'file:   '</span>+__file__)</span><br></pre></td></tr></table></figure></p><p><strong>注意入口地址的输入方式不同所引发的变化：</strong><br>图一：<br><img src="./TIM截图20180109160709.png" alt="Alt text"><br>图二：<br><img src="./TIM图片20180109162322.png" alt="Alt text"></p><p>注：c4文件是普通模块，c9是入口文件，入口文件和普通模块在内置变量方面是存在一定的差异的。</p><p>注二：<br><strong>(1)利用‘python -m’把可执行文件当作一个模块来运行（把入口文件当作普通模块来执行，不过应注意该指令执行的路径是基于该普通模块的包的上一级目录）。</strong><br><strong>(2)如果作为一个普通模块必须有一个包的。</strong></p><p><img src="./TIM图片20180109170437.png" alt="Alt text"><br>‘python -m’指令后面接的是一个命名空间加一个模块名称，而不是文件路径。</p><ul><li><strong>20. 判断这是入口文件还是普通文件</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#判断这是入口文件还是普通文件</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'This is a entrance document!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'This is a module!'</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>21. 相对导入和绝对导入（难点）</strong><br>项目文件结构<br><img src="./TIM图片20180109194836.png" alt="Alt text"></li></ul><p><strong>（1）</strong>利用相对导入方式导入上一层目录结构下的m1.py模块：<br>package2\m1.py文件代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"> This is m1.py doc</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">m_1 = <span class="number">1</span></span><br><span class="line">print(<span class="string">'m1’s package:  '</span>+__package__)</span><br></pre></td></tr></table></figure></p><p>package2\pacakge4\m2.py文件代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"> This is m2.py doc</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> ..m1 <span class="keyword">import</span> m_1 <span class="comment">#引入上一层目录下的m1.py(利用相对导入的方式)</span></span><br><span class="line">m_2 = <span class="number">2</span></span><br><span class="line">print(<span class="string">'m2’s package: '</span>+__package__)</span><br></pre></td></tr></table></figure></p><p>LearnPython\main.py代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> package2.package4.m2</span><br><span class="line">print(<span class="string">'main’s package: '</span>+str(__package__))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><img src="./TIM图片20180109201813.png" alt="Alt text"></p><p><strong>注：</strong><br>（1）”<strong>from</strong> xxx <strong>import</strong> xxx”这样的方式才可以使用相对导入，”<strong>import</strong> xxx”不可以使用相对导入的方式。<br>（2）绝对导入必须从顶级包开始，如这里的import     package2.package4.m2就是采用的绝对导入，package2为顶级包。</p><p><strong>(2)</strong> LearnPython\main.py代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .package2.package4.m2 <span class="keyword">import</span> m_2</span><br><span class="line">print(<span class="string">'main’s package: '</span>+str(__package__))</span><br></pre></td></tr></table></figure></p><p>结果会报如下错误：<br><img src="./TIM截图20180109200401.png" alt="Alt text"><br>注意：<br>（1）一个模块的顶级包与main.py(入口文件)所在的层级有关。<br>（2）main.py是不属于如何包的，这里的LearnPython不是顶级包。<br>（3）package2\package4\m2.py的顶级包是package2而不是LearnPython，LearnPython并不是顶级包。</p><p><strong>（3）</strong>LearnPython\main.py代码同（2）所示:<br>但是如果利用 ‘python -m’指令把main.py不当作入口文件执行，而当作普通模块来执行，则不会报错。<br>结果执行如下所示：<br><img src="./TIM截图20180109203058.png" alt="Alt text"><br><strong>(4)</strong> package2\package4\m3.py代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ...m5 <span class="keyword">import</span> m_5 <span class="comment">#引入上上级目录(即到了LearnPython目录)下的m5.py模块</span></span><br><span class="line">m_3 = <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>LearnPython\m5.py代码如下：（注意：m5.py和main.py是在同一级目录下）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m_5 = <span class="number">5</span></span><br><span class="line">print(<span class="string">'m5’s package:  '</span>+__package__)</span><br></pre></td></tr></table></figure></p><p>LearnPython\main.py代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> package2.package4.m3 <span class="keyword">import</span> m_3</span><br><span class="line">print(<span class="string">'main’s package: '</span>+str(__package__))</span><br></pre></td></tr></table></figure></p><p><strong>运行时会报如下错误：<em>超越顶级包错误</em></strong><br><img src="./TIM截图20180109204804.png" alt="Alt text"><br><strong><em>注意：</em>相对导入一定不可超越顶级包。</strong>（这里的LearnPython并不是顶级包，package1，package2，package3才是顶级包。）</p><ul><li><strong>22. 函数中的关键字参数、默认参数和可变参数 </strong></li></ul><p><strong>（1）关键字参数：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">关键参数</span></span><br><span class="line"><span class="string">默认参数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">damages</span><span class="params">(skill1, skill2)</span>:</span></span><br><span class="line">    damages1 = skill1*<span class="number">3</span></span><br><span class="line">    damages2 = skill2*<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> damages1, damages2</span><br><span class="line">skill1_damages,skill2_damages = damages(skill2 = <span class="number">2</span>, skill1 = <span class="number">10</span>)   </span><br><span class="line"> <span class="comment">#这里括号里面的就是两个典型的关键字参数，</span></span><br><span class="line"> <span class="comment">#使用关键字参数的一个突出特点就是不用按形参顺序引入实参。</span></span><br><span class="line">print(skill1_damages, skill2_damages)</span><br></pre></td></tr></table></figure></p><p><strong>(2)默认参数：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">information</span><span class="params">(name, gender=<span class="string">'男'</span>, age=<span class="string">'25'</span>, school=<span class="string">'八一小学'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'姓名： '</span> + name)</span><br><span class="line">    print(<span class="string">'性别： '</span> + gender)</span><br><span class="line">    print(<span class="string">'年龄： '</span> + str(age))</span><br><span class="line">    print(<span class="string">'学校： '</span> + school)</span><br><span class="line">print(<span class="string">'------------------------------------'</span>)</span><br><span class="line">information(<span class="string">'张三'</span>, <span class="string">'男'</span>, <span class="number">16</span>, <span class="string">'光明小学'</span>)</span><br><span class="line">print(<span class="string">'------------------------------------'</span>)</span><br><span class="line">information(<span class="string">'李四'</span>)</span><br><span class="line">print(<span class="string">'------------------------------------'</span>)</span><br><span class="line">information(<span class="string">'赵六'</span>, <span class="string">'女'</span>, <span class="number">16</span>)</span><br><span class="line">print(<span class="string">'------------------------------------'</span>)</span><br><span class="line">information(<span class="string">'王二'</span>, age=<span class="number">18</span>, school=<span class="string">'红旗小学'</span>)   <span class="comment">#修改王二的年龄和学校</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong><br>（1）不能出现有默认参数和没有默认参数的混在一起，没有默认参数的形参必须放在前面：<br>         如def information(name, gender=’男’, age=’25’, school=’八一小学’，teacher)<br>（2）实参书写时要注意按顺序进行一一对应；<br>       如只要修改‘王二’的年龄，print(‘王二’,18)这样书写是错误的；<br>      应这样书写（使用关键字参数,这样就不用按顺序引入实参了）：print(‘王二’,age=’20’)</p><p><strong>(3) 可变参数（*param）</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(*param)</span>:</span></span><br><span class="line">    print(param)</span><br><span class="line">    print(type(param))</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果：（可知可变参数是元组类型的。）<br><img src="./TIM截图20180109235755.png" alt="Alt text"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(*param)</span>:</span></span><br><span class="line">    print(param)</span><br><span class="line">    print(type(param))</span><br><span class="line">    </span><br><span class="line">demo((<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">demo((<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>),<span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">a = (<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">demo(a)</span><br><span class="line"></span><br><span class="line">b = (<span class="number">8</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>) </span><br><span class="line">demo(*b)<span class="comment">#实参里面加‘*’相当于序列解包。要传递元组，调用时需加上‘*’</span></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="./TIM截图20180110000949.png" alt="Alt text"></p><p><strong>注意必须参数、关键字参数、默认参数和可变参数混合的几种情况：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#必须参数必须放在可变参数之前</span></span><br><span class="line"><span class="comment">#param为必须参数，param2为默认参数，param为可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(param1,param2 = <span class="string">'4'</span>,*param)</span>:</span> <span class="comment">#可变参数放在默认参数之后</span></span><br><span class="line">     print(param1, param2, param)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果：（一 一 对应，多余的全部当作元组对应于可变参数）<br><img src="./TIM截图20180110002425.png" alt="Alt text"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(param1,*param,param2 = <span class="string">'4'</span>)</span>:</span> <span class="comment">#可变参数放在默认参数之前</span></span><br><span class="line">     print(param1, param2, param)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure><p>运行结果:<br><img src="./TIM截图20180110003452.png" alt="Alt text"></p><p>要实现使‘hello’对应于默认参数可以利用关键字参数实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(param1,*param,param2 = <span class="string">'4'</span>)</span>:</span></span><br><span class="line">     print(param1, param, param2)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,param2 =<span class="string">"hello"</span>) <span class="comment">#利用关键字参数方法（param2 = 'hello'）把默认参数的实参值指定为‘hello’</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180110003939.png" alt="Alt text"></p><ul><li><strong>23. 关键字可变参数</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(**param)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">(<span class="number">1</span>)这样在调用时可以传递多个关键字参数，此时python会将其转化为字典类型dict。</span><br><span class="line">(<span class="number">2</span>)若调用时想传递字典类型而不转化为多维数组，调用时需加上**。</span><br><span class="line">a=&#123;<span class="string">'bj'</span>:<span class="string">'32c'</span>,<span class="string">'sh'</span>:<span class="string">'31c'</span>&#125;</span><br><span class="line">demo(**a)</span><br><span class="line">(<span class="number">3</span>)遍历字典类型数据方法：(注：param为关键字可变参数即**param)</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> param.items():</span><br><span class="line">    print(key, <span class="string">':'</span>, value)</span><br></pre></td></tr></table></figure><p>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">city_weather</span><span class="params">( **param1)</span>:</span></span><br><span class="line">    print(param1)</span><br><span class="line">    print(type(param1))</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> param1.items():</span><br><span class="line">        <span class="comment">#print(key+' : '+value) 这种输出方法也可以,输出效果与下面相同</span></span><br><span class="line">        print(key, <span class="string">':'</span>, value)</span><br><span class="line">        </span><br><span class="line">city_weather(bj=<span class="string">'10c'</span>, sh=<span class="string">'20c'</span>, nc=<span class="string">'18c'</span>)</span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">'nb'</span>:<span class="string">'15c'</span>, <span class="string">'hz'</span>:<span class="string">'16c'</span>, <span class="string">'ja'</span>:<span class="string">'19c'</span>&#125;</span><br><span class="line">city_weather(**a)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180110214951.png" alt="Alt text"></p><ul><li><strong>24. 全局变量和局部变量  </strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">()</span>:</span></span><br><span class="line">    c = <span class="number">20</span></span><br><span class="line">    <span class="comment"># a = '' 在其他语言要加上这行，才能在for循环外面引用a变量，</span></span><br><span class="line">    <span class="comment"># 而Python不用加这行也可以在for循环外面引用a变量，因为python没有块级作用域（for,while）的概念</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">        a = <span class="string">'abc'</span></span><br><span class="line">        c += <span class="number">1</span></span><br><span class="line">    print(c)</span><br><span class="line">    print(a)</span><br><span class="line">demo()</span><br></pre></td></tr></table></figure><p>注意：<br>（1）Python和其他语言的一个重要区别：Python没有块级作用域的概念！！！<br>（2）函数内部for循环外部可以引用for循环内部的变量<br>（3）python中可以在for循环外部访问for循环内部定义的变量，if-else和while也是如此!!因为在python里for、while和if-else不能形成作用域。所以其中的变量视作与函数内变量同一级别。代码块无法形成一个作用域</p><ul><li><strong>一个问题：为何全局变量不能在函数内部的for循环内部使用</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">50</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#c = 20</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">        c += <span class="number">1</span></span><br><span class="line">    print(c)</span><br><span class="line">demo()</span><br></pre></td></tr></table></figure></li></ul><p>c变量不是全局变量吗？为什么还会报“局部变量引用前应该先赋值”的错误？</p><ul><li><strong>25. global关键字的使用（将局部变量转变为全局变量）</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> c</span><br><span class="line">    c = <span class="number">2</span></span><br><span class="line">demo()   <span class="comment">#注意不要忘了调用函数！！！</span></span><br><span class="line">print(c) <span class="comment">#c变成全局变量之后，函数外部也可以引用该变量。</span></span><br><span class="line"><span class="comment">#结果将打印c的值</span></span><br></pre></td></tr></table></figure><p>注：使用import 导入该模块后，其他模块也可以使用该模块的全局变量。</p><ul><li><p><strong>26. 类和对象（重点和难点）、面向对象思想</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">（1）有意义的面向对象的代码</span></span><br><span class="line"><span class="string">（2）类 = 面向对象</span></span><br><span class="line"><span class="string">（3）类、 对象</span></span><br><span class="line"><span class="string">（4）实例化（类和对象就是通过实例化关联起来的；）</span></span><br><span class="line"><span class="string">（5）类基本的作用是封装代码</span></span><br><span class="line"><span class="string">（6）在类的内部不能执行类中的方法，类只负责定义，类的方法必须在类的外面调用执行</span></span><br><span class="line"><span class="string">（7）不推荐在同一模块下面即定义类，又调用执行类中的方法，类的定义和调用类中的方法最好放在不同的模块中。</span></span><br><span class="line"><span class="string">（8）类经过实例化后得到一个具体的对象（类就像一个打印机，通过一个打印机可以产生各种各样的对象）</span></span><br><span class="line"><span class="string">（9）可以把类中的数据成员（变量）当作类的特征、把类中的函数当作类的行为，在类中，行为与特征是两大要点。</span></span><br><span class="line"><span class="string">（10）类的定义：类似现实世界或思维世界中的实体在计算机中的反映，它将数据以及这些数据上的操作封装在一起。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'lee'</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stu_information</span><span class="params">(self)</span>:</span>  <span class="comment">#类中的函数定义一定要加‘self’关键字</span></span><br><span class="line">        print(<span class="string">'姓名： '</span> + self.name)  <span class="comment">#在引用类中的变量时也需要在变量之前加上‘self’关键字(如self.name)</span></span><br><span class="line">        print(<span class="string">'年龄： '</span> + str(self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#不推荐在同一模块下面即定义类，又调用执行类中的方法，类的定义和调用类中的方法最好放在不同的模块中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># student = Student() #类的实例化</span></span><br><span class="line"><span class="comment"># student.stu_information() #调用类中的方法</span></span><br></pre></td></tr></table></figure></li><li><p><strong>27. 构造函数 </strong></p></li></ul><p>（1）构造函数只能返回None类型，不能定义返回其他类型。<br>（2）构造函数通常用于初始化对象的属性。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'lee'</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        <span class="comment">#构造函数</span></span><br><span class="line">        <span class="comment">#构造函数初始化对象的属性</span></span><br><span class="line">        self.name = name  <span class="comment">#等号左边为定义的实例变量，等号右边表示要传的参数。</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">student = Student(<span class="string">'kg'</span>,<span class="number">15</span>)     <span class="comment">#在类的实例化的时候，就调用了一次构造函数。注意：实例化时一定要记得加上与构造函数的形参相对应的实参。</span></span><br><span class="line">a = student.__init__(<span class="string">'kb'</span>,<span class="number">36</span>)      <span class="comment">#构造函数也可以显式调用，如student.__init__('kb',36)</span></span><br><span class="line">print(a)</span><br><span class="line">print(type(a))</span><br><span class="line">print(student.name)</span><br><span class="line">print(student.age)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180111182105.png" alt="Alt text"></p><p>构造函数初始化对象的属性的方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name </span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure></p><ul><li><strong>28. 类变量和实例变量的区别（重点与难点）</strong></li></ul><p>（1）类变量是与类相关的变量，不受对象的影响；<br>（2）实例变量是与对象相关的变量，受对象的影响；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#类变量</span></span><br><span class="line">    name = <span class="string">'lee'</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">    <span class="comment">#类变量：与类相关的变量，实例变量：与对象相关的变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        <span class="comment">#实例变量</span></span><br><span class="line">        <span class="comment">#这里的self后面的name是实例变量，通过"self.实例变量名"的方式定义实例变量</span></span><br><span class="line">        self.name = name  <span class="comment">#等号左边为定义的实例变量，等号右边表示要传的参数。</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">student1 = Student(<span class="string">'王二小'</span>,<span class="number">16</span>)</span><br><span class="line">student2 = Student(<span class="string">'刘胡兰'</span>,<span class="number">20</span>)</span><br><span class="line">print(student1.name)</span><br><span class="line">print(student2.name)    <span class="comment">#实例变量与对象相关，不同对象的实例变量的值不同</span></span><br><span class="line">print(Student.name)     <span class="comment">#类变量只与类有关，与对象无关</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180111185959.png" alt="Alt text"></p><ul><li><strong>29. 类与对象的变量查找顺序</strong></li></ul><p>（1）错误的实例变量定义方式导致的后果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#类变量</span></span><br><span class="line">    name = <span class="string">'lee'</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">    <span class="comment">#类变量：与类相关的变量，实例变量：与对象相关的变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">       <span class="comment">#正确的实例变量的定义方法      </span></span><br><span class="line">       <span class="comment"># self.name = name  </span></span><br><span class="line">       <span class="comment"># self.age = age</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">#这里使用错误的实例变量定义方法，这样就会导致对象不存在变量（即实例变量），所以显示出来的对象的属性字典（变量字典）为空。</span></span><br><span class="line">        name = name</span><br><span class="line">        age = age</span><br><span class="line"></span><br><span class="line"><span class="comment">#__dict__ : 类的属性（包含一个字典，由类的数据属性组成）</span></span><br><span class="line"></span><br><span class="line">student1 = Student(<span class="string">'王二小'</span>,<span class="number">16</span>)</span><br><span class="line">print(student1.__dict__)  <span class="comment">#对象的属性字典</span></span><br><span class="line">print(Student.__dict__)   <span class="comment">#类的属性字典</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180111194359.png" alt="Alt text"><br>（2）正确的实例变量定义方法的运行结果为：<br><img src="./TIM截图20180111193112.png" alt="Alt text"><br>（3）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#类变量</span></span><br><span class="line">    name = <span class="string">'lee'</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">    <span class="comment">#类变量：与类相关的变量，实例变量：与对象相关的变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">    <span class="comment">#这里使用错误的实例变量定义方法，这样就会导致对象的实例变量表为空，所以当在该表中寻找某个实例变量时，是找不到的。</span></span><br><span class="line">        name = name</span><br><span class="line">        age = age</span><br><span class="line"></span><br><span class="line">student1 = Student(<span class="string">'王二小'</span>,<span class="number">16</span>)</span><br><span class="line">print(student1.name)  <span class="comment">#对象的实例变量</span></span><br><span class="line">print(Student.name)   <span class="comment">#类变量</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180111195127.png" alt="Alt text"><br><strong>注意：</strong><br><strong>python寻找变量的机制：</strong><br>当python尝试去寻找一个实例变量时，首先在对象的实例变量表中寻找，如果没有找到则继续在类变量表中寻找，如果有父类，则继续父类的类变量表中寻找，而不是直接返回None。</p><ul><li><strong>30. self 与实例方法 </strong></li></ul><p>（1）python中类的实例方法的参数列表中需要有self，但是在调用时不需要传入。<br>在实例方法中也可以将self定义成别的名字（如this），但python建议为self。</p><p>（2）self  就是当前调用的某一个方法的对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下面两种都可以称为实例方法</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">   </span><br><span class="line">        self.name = name </span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stu_information</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        print(<span class="string">'姓名： '</span> + self.name) </span><br><span class="line">        print(<span class="string">'年龄： '</span> + str(self.age))</span><br></pre></td></tr></table></figure></p><ul><li><strong>31. 在实例方法中访问类变量的方法以及在类外部访问实例变量的方法 </strong></li></ul><p><strong>(1)</strong> 在实例方法中访问实例变量:  self.变量名<br><strong>(2)</strong> 在实例方法中访问类变量:<br>①类名.变量名  ②self.<strong>class</strong>.变量名<br><strong>(3)</strong> 在类外部访问类变量:<br>①类名.变量名      ②实例.变量名<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#类变量</span></span><br><span class="line">    sum1 = <span class="number">0</span></span><br><span class="line">    name = <span class="string">'lee'</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">       </span><br><span class="line">        self.name = name  <span class="comment">#等号左边为定义的实例变量，等号右边表示要传的参数。</span></span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">        print(self.name) <span class="comment">#打印的是实参变量的值</span></span><br><span class="line">        print(name)      <span class="comment">#打印的是传递的形参值</span></span><br><span class="line">        print(Student.name) <span class="comment">#打印的是类变量的值</span></span><br><span class="line">        print(<span class="string">'在实例方法中访问类变量的方法一：'</span>, Student.sum1) <span class="comment">#打印的是类变量sum1的值</span></span><br><span class="line">        print(<span class="string">'在实例方法中访问类变量的方法二：'</span>,  self.__class__.sum1) <span class="comment">#打印的是类变量sum1的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student = Student(<span class="string">'叮当'</span>,<span class="number">12</span>)</span><br><span class="line">print(<span class="string">'在类的外部访问类变量的方法：'</span>, Student.sum1)   <span class="comment">#在类的外部访问类变量</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>32. 类方法 </strong></li></ul><p><strong>(1)</strong> 类变量的使用的一个小例子：<br>每次把一个类实例化成对象，类变量sum1就加1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#类变量</span></span><br><span class="line">    sum1 = <span class="number">0</span></span><br><span class="line">    name = <span class="string">'lee'</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">       </span><br><span class="line">        self.name = name </span><br><span class="line">        self.age = age</span><br><span class="line">        self.__class__.sum1 += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'当前学生人数为：'</span>,self.__class__.sum1)</span><br><span class="line"></span><br><span class="line">student1 = Student(<span class="string">'叮'</span>,<span class="number">11</span>)</span><br><span class="line">student2 = Student(<span class="string">'当'</span>,<span class="number">12</span>)</span><br><span class="line">student3 = Student(<span class="string">'叮当'</span>,<span class="number">13</span>)</span><br></pre></td></tr></table></figure></p><p><strong>(2)类方法定义和调用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">类方法</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#类变量</span></span><br><span class="line">    sum1 = <span class="number">0</span></span><br><span class="line">    name = <span class="string">'lee'</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">    <span class="comment">#实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">       </span><br><span class="line">        self.name = name </span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plus_sum</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.sum1 += <span class="number">1</span></span><br><span class="line">        print(cls.sum1)</span><br><span class="line"></span><br><span class="line">student1 = Student(<span class="string">'叮'</span>,<span class="number">11</span>)</span><br><span class="line"><span class="comment">#调用类方法：类名.类方法</span></span><br><span class="line">Student.plus_sum()          <span class="comment">#这里虽然可以使用对象调用类方法如"student1.plus_sum()"，</span></span><br><span class="line">                            <span class="comment">#但是不建议这样做，这样容易导致逻辑混乱。</span></span><br><span class="line">student2 = Student(<span class="string">'当'</span>,<span class="number">12</span>)</span><br><span class="line">Student.plus_sum()</span><br><span class="line">student3 = Student(<span class="string">'叮当'</span>,<span class="number">13</span>)</span><br><span class="line">Student.plus_sum()</span><br></pre></td></tr></table></figure><p>注：<br>（1）这里的cls表示class类，也可以使用别的名字表示，但是建议使用cls这个名字作为参数。<br>（2）此外，类方法中操作类变量，直接使用‘cls.类变量’即可。而且python里对象也可以调用类方法。</p><ul><li><strong>33. 静态方法</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">静态方法</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#类变量</span></span><br><span class="line">    sum1 = <span class="number">0</span></span><br><span class="line">    name = <span class="string">'lee'</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">       </span><br><span class="line">        self.name = name </span><br><span class="line">        self.age = age</span><br><span class="line">       </span><br><span class="line">    <span class="comment">#类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plus_sum</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.sum1 += <span class="number">1</span></span><br><span class="line">        print(cls.sum1)</span><br><span class="line">      <span class="comment"># print(self.name)    #会报错：self没有定义。所以类方法中不能访问实例变量</span></span><br><span class="line">        print(name)         <span class="comment">#去掉self也会报错：name没有定义。且去掉name就不是访问实例变量了。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        print(Student.sum1)     <span class="comment">#静态方法可以访问类变量，不过只能使用“类名.类变量”的方式</span></span><br><span class="line">      <span class="comment"># print(self.name)        #会报错：self没有定义。所以静态方法中不能访问实例变量</span></span><br><span class="line">        print(name)             <span class="comment">#去掉self也会报错：name没有定义。且去掉name就不是访问实例变量了。</span></span><br><span class="line">        print(<span class="string">'This is a static method!'</span>)   </span><br><span class="line"></span><br><span class="line">student1 = Student(<span class="string">'叮'</span>,<span class="number">11</span>)</span><br><span class="line"><span class="comment">#调用类方法：类名.类方法</span></span><br><span class="line">Student.plus_sum()       </span><br><span class="line"></span><br><span class="line"><span class="comment">#调用静态方法（类和对象都可以调用静态方法）</span></span><br><span class="line">student1.add(<span class="number">1</span>, <span class="number">3</span>) <span class="comment">#通过对象调用静态方法</span></span><br><span class="line">Student.add(<span class="number">2</span>, <span class="number">4</span>)  <span class="comment">#通过类调用静态方法</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong><br>（1）静态方法无需传入类似self，cls之类的参数，而且它可以被对象和类调用。静态方法可以访问类变量。<br>（2）静态方法和类方法都不可以访问实例变量。<br>（3）尽量少用静态方法，因为它和类与对象的关系很弱，和普通函数区别不大。当某个方法比较纯粹，与类和对象的关系不是很强，可以考虑静态方法。</p><ul><li><strong>34. 成员的可见性：公开与私有 </strong></li></ul><p>（1）改变类下面的变量的值最好用方法，不要直接对变量进行更改。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#类变量</span></span><br><span class="line">    sum1 = <span class="number">0</span></span><br><span class="line">    name = <span class="string">'lee'</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span>  </span><br><span class="line">        self.name = name </span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">marking</span><span class="params">(self, score)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> score &lt; <span class="number">0</span> :</span><br><span class="line">             score = <span class="number">0</span></span><br><span class="line">             <span class="keyword">return</span> <span class="string">'不能打负分！'</span></span><br><span class="line">         self.score = score</span><br><span class="line">         print(self.name + <span class="string">'同学的分数为：'</span>+ str(self.score))</span><br><span class="line">      </span><br><span class="line">student1 = Student(<span class="string">'叮'</span>,<span class="number">11</span>)</span><br><span class="line"><span class="comment">#student1.score = -1    #修改类下面的变量不应该直接对变量进行更改。</span></span><br><span class="line">result = student1.marking(<span class="number">66</span>)  <span class="comment">#而应该通过方法进行更改。</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>（2）为了防止直接对类下面的变量进行更改，可以通过成员的可见性进行控制，将成员设置成私有即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#私有方法</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__func</span><span class="params">(self,param)</span>:</span></span><br><span class="line">       self.__param = <span class="number">0</span> <span class="comment">#私有变量：变量名之前加双下划线</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong><br>(1) python中定义<strong>私有变量或私有方法</strong>只需在名称前加<strong>双下划线</strong>即可，<strong>但</strong>若在<strong>名称结尾</strong>也加了双下划线则不是私有的。<br>(2) 应尽量避免定义开头和结尾都有双下划线的变量或函数名称。</p><p><strong>(3)</strong> <strong>实例私有变量</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">成员可见性:公开和私有</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#类变量</span></span><br><span class="line">    sum1 = <span class="number">0</span></span><br><span class="line">    name = <span class="string">'lee'</span></span><br><span class="line">    age  = <span class="number">18</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">       </span><br><span class="line">        self.name = name </span><br><span class="line">        self.age = age</span><br><span class="line">        self.__score = <span class="number">0</span>    <span class="comment">#类中的score实例变量已被定义为私有实例变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">marking</span><span class="params">(self, score)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> score &lt; <span class="number">0</span> :</span><br><span class="line">             score = <span class="number">0</span></span><br><span class="line">             <span class="keyword">return</span> <span class="string">'不能打负分！'</span></span><br><span class="line">         self.__score = score</span><br><span class="line">         print(self.name + <span class="string">'同学的分数为：'</span>+ str(self.__score))</span><br><span class="line"></span><br><span class="line">student1 = Student(<span class="string">'叮'</span>,<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">result = student1.marking(<span class="number">66</span>)  </span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">student1.__score = <span class="number">-1</span>    <span class="comment">#这里的__score便不是上面的私有类中的实例变量__score,这是两回事。这是一个新的实例变量。</span></span><br><span class="line">print(student1.__score)</span><br><span class="line">print(student1.__dict__)</span><br><span class="line"></span><br><span class="line">student2 = Student(<span class="string">'王二小'</span>,<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">print(student2.__score)  <span class="comment">#会报错，因为Student的__score是私有实例变量，在类的外部是访问不到的。</span></span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><img src="./TIM截图20180112222846.png" alt="Alt text"><br>将上面的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(student2.__score)</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(student2._Student__score)  <span class="comment">#注意：Student前面是单下划线</span></span><br></pre></td></tr></table></figure></p><p>是可以访问到私有实例变量的。</p><ul><li><strong>35. 继承（重点和难点） </strong></li></ul><p>父类文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">继承</span></span><br><span class="line"><span class="string">这是父类文件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span><span class="params">()</span>:</span></span><br><span class="line">    sum1 = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_work</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'This is a parent method !'</span>)</span><br></pre></td></tr></table></figure></p><p>子类文件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">继承</span></span><br><span class="line"><span class="string">这是子类文件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> n10 <span class="keyword">import</span> Human</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Human)</span>:</span></span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, school, name, age)</span>:</span> <span class="comment">#子类的构造函数要引入父类的构造函数中的参数</span></span><br><span class="line">         self.school = school</span><br><span class="line">         <span class="comment">#Human.__init__(self, name, age)  #注意：使用类调用父类的构造函数需要引入self参数。因为这就是一个普通的方法调用，没有人帮忙把self参数传入进去，所以需要把所有的参数传入进去。</span></span><br><span class="line">          super(Student,self).__init__(name,age) <span class="comment">#推荐使用这种方法调用父类中的构造函数，这种方法也可以用于调用父类中的实例方法。</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">do_work</span><span class="params">(self)</span>:</span></span><br><span class="line">         super(Student, self).do_work()   <span class="comment">#调用父类中的实例方法</span></span><br><span class="line">         print(<span class="string">'Studying!!! '</span>)</span><br><span class="line">student1 = Student(<span class="string">'八一小学'</span>,<span class="string">'王二小'</span>,<span class="number">18</span>) <span class="comment">#而这里之所以不用传入self参数，是因为在实例化的时候Python自动把self参数传入了。</span></span><br><span class="line">print(student1.sum1)    <span class="comment">#通过对象访问类变量（继承自父类）</span></span><br><span class="line">print(Student.sum1)     <span class="comment">#通过类访问类变量</span></span><br><span class="line">print(student1.school)  <span class="comment">#通过对象访问实例变量(子类特有的)</span></span><br><span class="line">print(student1.name)    <span class="comment">#通过对象访问实例变量（继承自父类）</span></span><br><span class="line">print(student1.age)</span><br><span class="line">student1.do_work() </span><br><span class="line"><span class="comment">#而这里之所以不用传入self参数，是因为这里是通过student1对象来调用方法的，self在这里就是指代student1对象，调用会自动把student1这个对象传入进去</span></span><br></pre></td></tr></table></figure></p><p><strong>调用父类中的构造函数(两种)：</strong><br>方法一：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Human.__init__(self, name, age)</span><br></pre></td></tr></table></figure></p><p>方法二：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super(Student,self).__init__(name,age) <span class="comment">#推荐使用这种方法调用父类中的构造函数，这种方法也可以用于调用父类中的实例方法。</span></span><br></pre></td></tr></table></figure></p><p><strong>调用父类中的实例方法:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super(Student, self).do_work()   <span class="comment">#调用父类中的实例方法</span></span><br></pre></td></tr></table></figure></p><p><strong>一个重要的对比及区别：</strong><br>(1) 使用类调用父类的构造函数需要引入self参数。因为这就是一个普通的方法调用，没有人帮忙把self参数传入进去，所以需要把所有的参数传入进去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Human.__init__(self, name, age)</span><br></pre></td></tr></table></figure></p><p>(2)这里之所以不用传入self参数，是因为在实例化的时候Python自动把self参数传入了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student1 = Student(<span class="string">'八一小学'</span>,<span class="string">'王二小'</span>,<span class="number">18</span>)</span><br></pre></td></tr></table></figure></p><p>(3)这里之所以不用传入self参数，是因为这里是通过student1对象来调用方法的，self在这里就是指代student1对象，调用会自动把student1这个对象传入进去<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student1.do_work()</span><br></pre></td></tr></table></figure></p><ul><li><p><strong>36. 正则表达式 </strong></p><p>正则表达式:是一个特殊的字符序列,用于检测一个与我们设定的字符序列是否相匹配.<br>如：<br>快速检索文本,实现一些文本替换.<br>检测一串数字是否是电话号码.<br>检测一个字符串是否符合 email 的标准<br>把一个文本里指定的单词替换成另外一个单词.<br><strong>(1)小试牛刀：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">正则表达式</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = <span class="string">'c++|java|c|C#|javascript|python'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#（1）使用内置方法判断是否a变量中是否存在某个字符串</span></span><br><span class="line">r = a.index(<span class="string">'python'</span>) &gt; <span class="number">-1</span>   <span class="comment">#大于-1说明存在</span></span><br><span class="line">print(r)</span><br><span class="line"><span class="comment">#(2)用in关键字也可以判断a变量是否存在某个字符串</span></span><br><span class="line">r1 = <span class="string">'python'</span> <span class="keyword">in</span> a</span><br><span class="line">print(r1)</span><br><span class="line"><span class="comment">#(3)通过正则表达式判断a中是否存在某个字符串</span></span><br><span class="line">result = re.findall(<span class="string">'python'</span>,a)   <span class="comment">#返回为list</span></span><br><span class="line">print(result)</span><br><span class="line"><span class="keyword">if</span> len(result) &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'a中存在python这个字符串！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'a中不存在python这个字符串！'</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>(2)正则表达式之字符集：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">正则表达式之字符集</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">'abcd,haha,hell,appl,afcd,efdg,accd'</span></span><br><span class="line"></span><br><span class="line">r1 = re.findall(<span class="string">'a[bf]cd'</span>, s)  <span class="comment">#查找第二个字符是b或f字母的字符串，且第一个字符为a,第三个为c,第四个为d</span></span><br><span class="line">print(r1)</span><br><span class="line">r2 = re.findall(<span class="string">'a[b-f]cd'</span>, s) <span class="comment">#查找第二个字符是b到f字母中的一个字母的字符串，且第一个字符为a,第三个为c,第四个为d</span></span><br><span class="line">print(r2)</span><br><span class="line">r3 = re.findall(<span class="string">'a[^bf]cd'</span>, s) <span class="comment">#查找第二个字符既不是b也不是f的字符串，且第一个字符为a,第三个为c,第四个为d</span></span><br><span class="line">print(r3)</span><br></pre></td></tr></table></figure></p><p><strong>（3）正则表达式之概括字符集</strong></p><p>常见的概括字符集：<br><strong>\d: </strong>0-9的数字，等价于[0-9]<br><strong>\D:</strong> 非数字，等价于[^0-9]<br><strong>\w：</strong>匹配包括<strong>下划线</strong>的任何单词字符。类似但不等价于“[A-Za-z0-9<em>]”，这里的”单词”字符使用Unicode字符集。<br><strong>\W：</strong>匹配任何非单词字符。等价于“[^A-Za-z0-9</em>]”。<br><strong>\s：</strong>匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]<br><strong>\S：</strong>匹配任何可见字符。等价于[^ \f\n\r\t\v]</p><p><strong>(4) 数量词</strong><br>(1)数量词可以控制正则表达式选取的字符的长度，但是感觉按照数量词从大到小进行匹配，遇到不符合表达式的字符就停止，到新的字符重新开始匹配。<br>因此，案例中每个单词后边因为有了空格、数字才使得{3,6}数量词成立，如果将这些非单词字符去掉，那么输出的就都是按照最大的数量词匹配出来的字符。<br>(2)而且数量词并不只是在匹配单词的时候可以用，数字也可以。<br>(3)python在进行正则表达式匹配时倾向于<strong>贪婪</strong>。在匹配字符串时若在结尾加上?则可进行<strong>非贪婪</strong>匹配。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line">a = <span class="string">'Java45python html&amp;php'</span></span><br><span class="line"><span class="comment">#找出a中的字符个数在3到6个的单词</span></span><br><span class="line">r1 = re.findall(<span class="string">'[A-Za-z]&#123;3,6&#125;'</span>, a)  <span class="comment">#贪婪：尽可能地按最大数量词匹配单词。（如这里的python是从起始字符p开始后面一直到第6个都是字符，所以都匹配选取出来。）</span></span><br><span class="line">print(r1)</span><br><span class="line">r2 = re.findall(<span class="string">'[A-Za-z]&#123;3,6&#125;?'</span>, a) <span class="comment">#非贪婪（后面加问号）：尽可能地按最小数量词匹配单词(如这里匹配到3个字符就结束了匹配)</span></span><br><span class="line">print(r2)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180113215857.png" alt="Alt text"><br><strong>（5）匹配0次、1次或无限次</strong></p><p>‘*’  ：  0次或无限多次<br>‘+’ ： 1次或无限多次<br>‘?’ ： 0次或1次<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  re</span><br><span class="line">a = <span class="string">'pytho0python1pythonn2'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">r1 = re.findall(<span class="string">'python*'</span>, a)  <span class="comment"># *号表示*号前面的n字母出现0次或无限多次</span></span><br><span class="line">print(r1)</span><br><span class="line">r2 = re.findall(<span class="string">'python+'</span>, a)  <span class="comment"># +号表示+号前面的n字母可以出现1次或无限多次</span></span><br><span class="line">print(r2)</span><br><span class="line">r3 = re.findall(<span class="string">'python?'</span>, a)  <span class="comment"># ?号表示?号前面的n字母可以出现0次或1次</span></span><br><span class="line">print(r3)    <span class="comment">#这里输出的第三个元素是'python'</span></span><br><span class="line"></span><br><span class="line">r4 = re.findall(<span class="string">'python&#123;1,2&#125;'</span>, a)  <span class="comment">#注意与?号的区别</span></span><br><span class="line">print(r4)    <span class="comment">#注意这里选取匹配时采用的是贪婪模式，所以输出的第二个元素是'pythonn'(多一个n)</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180113222757.png" alt="Alt text"><br><strong>（6） 边界匹配符</strong></p><p>^ : 起始边界符<br>$ : 结束边界符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">正则表达式之边界匹配符</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">qq = <span class="string">'10005000'</span></span><br><span class="line"></span><br><span class="line">r1 = re.findall(<span class="string">'[0-9]&#123;4,8&#125;'</span>, qq) <span class="comment">#这种方式排除位数小于4位的QQ号，但是不可以排除位数大于8位的QQ号，当大于8位时，会截取前8位</span></span><br><span class="line">print(r1)</span><br><span class="line"></span><br><span class="line">r2 = re.findall(<span class="string">'^\d&#123;4, 8&#125;$'</span>, qq)     <span class="comment">#筛选位数为4到8位的QQ号</span></span><br><span class="line">print(r2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#效果与上面相同</span></span><br><span class="line"><span class="comment"># r2 = re.findall('^[0-9]&#123;4, 8&#125;$', qq) #筛选位数为4到8位的QQ号</span></span><br><span class="line"><span class="comment"># print(r2)</span></span><br></pre></td></tr></table></figure></p><p><strong>(7) 组</strong><br><strong>注：</strong><br>( )可以在正则表达式中使用<strong>组</strong>的概念,<br>( )里的元素是<strong>且</strong>关系，[ ]里的元素是<strong>或</strong>关系。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a =  <span class="string">'pythonpythonuythonpythonpython'</span></span><br><span class="line"></span><br><span class="line">r1 = re.findall(<span class="string">'(python)&#123;3&#125;'</span>, a)  <span class="comment">#表示Python以组的形式匹配 连续出现3次才算匹配成功</span></span><br><span class="line"><span class="comment">#返回的值（即r1的值）为['python'],若不存在连续3个python，则返回[]即空列表</span></span><br><span class="line">print(r1)</span><br></pre></td></tr></table></figure></p><p><strong>(8) 匹配模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">正则表达式之匹配模式</span></span><br><span class="line"><span class="string">re.I 表示匹配时忽略大小写</span></span><br><span class="line"><span class="string">re.S 表示匹配时匹配所有字符包括换行符（\n）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.    表示匹配除换行符（\n）以外的所有字符</span></span><br><span class="line"><span class="string">re.S 可以影响'.'的行为，平时'.'表示匹配除换行符之外的所有字符，</span></span><br><span class="line"><span class="string">加入re.S匹配模式之后，'.'就可以匹配所有的字符（包括换行符）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">'javaC#\nPythonC++'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r1 = re.findall('c#.&#123;1&#125;',a , re.I)        #忽略大小写匹配c#然后匹配任意一个字符（不包括'\n'即换行符）</span></span><br><span class="line">r1 = re.findall(<span class="string">'c#.&#123;1&#125;'</span>, a, re.I | re.S) <span class="comment">#忽略大小写匹配c#然后匹配任意一个字符（包括'\n'即换行符）</span></span><br><span class="line">print(r1)</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="./TIM截图20180114005723.png" alt="Alt text"><br><strong>（9）re.sub正则替换</strong></p><p>（1）re.sub(‘正则表达式’,’即将覆盖原有字符串的新字符串’,”老字符串”,该字符被替换的次数,正则表达式的附加条件)<br>（2）替换的次数（count）为0表示为无限替换，如果为1则表示第一次匹配成功后替换，之后不再匹配替换。<br>（3）如果定义一个函数后  替换位置可以换成函数<br>def convert(value):<br>    pass<br>r = re.sub(“C#”,convert,lanuage,0)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">'pythonjavaC#htmlC#javascriptC##c++'</span></span><br><span class="line"></span><br><span class="line">re.sub(<span class="string">'C#'</span>, <span class="string">'Go'</span>, a, <span class="number">3</span>)      <span class="comment">#只有把该函数返回值赋值给新的字符串才能使输出的结果发生改变，因为字符串是不可改变的。</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">r1 = re.sub(<span class="string">'C#'</span>, <span class="string">'__Go__'</span>, a, <span class="number">1</span>)    <span class="comment"># count=0(默认值),也依然会把字符中的三个C#全部替换，设置成1则只替换第一个。（count=0表示无限次替换）</span></span><br><span class="line">print(r1)                        </span><br><span class="line"></span><br><span class="line">r2 = a.replace(<span class="string">'C#'</span>,<span class="string">'__Ruby__'</span>)   <span class="comment">#如果只是简单进行一些字符的替换可以使用“字符串.replace()"的内置函数完成</span></span><br><span class="line">print(r2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(value)</span>:</span></span><br><span class="line">    print(value)      <span class="comment">#注意观察value的值</span></span><br><span class="line">    matched = value.group() <span class="comment">#group()是获取当前匹配的内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'!!_'</span> + matched +<span class="string">'_!!'</span></span><br><span class="line"></span><br><span class="line">r3 = re.sub(<span class="string">'C#'</span>, convert, a, <span class="number">3</span>)</span><br><span class="line">print(r3)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180114153554.png" alt="Alt text"></p><p><strong>re.sub( )</strong>中为何要引入函数参数，其一个原因就是引入函数可以写一些具体的逻辑，这是相比只能引入一些变量参数而言的一个极大的优势。<br>如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">'AB389408HE67632'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(value)</span>:</span></span><br><span class="line">    matched = value.group()</span><br><span class="line">    <span class="keyword">if</span> int(matched) &gt;= <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'9'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'0'</span></span><br><span class="line"></span><br><span class="line">r1 = re.sub(<span class="string">'\d'</span>,convert ,a)  <span class="comment">#将字符串中是数字的且大于6的全部转换为9，小于6的全部转换为0</span></span><br><span class="line">print(r1)</span><br></pre></td></tr></table></figure></p><p><strong>（10）match 和 search函数</strong></p><p><strong>match函数：</strong>从字符串开始位置（即首字符）开始匹配，匹配成功则返回一个对象，否则返回None。<br><strong>search函数：</strong>搜索整个字符串，找到第一个匹配的结果，则返回一个对象；如果没有一个符合条件的结果，则返回None。<br><strong>注：</strong><br>（1）可以使用group函数从对象取出符合的结果的内容。<br>（2）这两个函数一旦匹配到结果就立即返回，而停止匹配（这是与findall函数的最大区别）。<br>（3）findall函数返回结果为list类型，    match与search返回类型为对象（如果需要获取对象截取内容 需要用group( )方法）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">正则表达式之match和search函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">'WA6fj4a52f34hfu'</span></span><br><span class="line"></span><br><span class="line">r1 = re.match(<span class="string">'\d'</span>, s) <span class="comment"># match函数是从第一个字符开始匹配，如果不符合条件就返回None，如果符合就返回包含该字符的对象。（如这里因为第一个字符为W，不是数字，所以返回None）</span></span><br><span class="line">print(r1)</span><br><span class="line"></span><br><span class="line">r2 = re.search(<span class="string">'\d'</span>, s) <span class="comment"># search函数是匹配选取出第一个包含符合条件的值的对象。（如这里为第一个符合的值为6）</span></span><br><span class="line">print(r2)</span><br><span class="line">print(r2.group())     <span class="comment">#用group获取匹配的值的内容</span></span><br><span class="line"></span><br><span class="line">r3 = re.findall(<span class="string">'\d'</span>, s)   <span class="comment"># findall函数是匹配所有符合条件的值，而search 和 match函数只匹配选取出第一个符合条件的值。</span></span><br><span class="line">print(r3)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180114161935.png" alt="Alt text"></p><p><strong>（11）group分组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">正则表达式之group分组</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">s = <span class="string">'life is short,i use python,i love python'</span></span><br><span class="line"></span><br><span class="line">r1 = re.search(<span class="string">'life(.*)python(.*)python'</span>,s)   <span class="comment">#（.*）表示一个分组，括号表示一个分组。</span></span><br><span class="line">print(r1.group(<span class="number">0</span>))  <span class="comment"># group(0)是一种特殊情况，返回的是正则表达式的完整匹配结果</span></span><br><span class="line">print(r1.group(<span class="number">1</span>))  <span class="comment"># 如果要返回完整匹配结果中的第1个分组应使用group(1),表示匹配中间的第一个分组</span></span><br><span class="line">print(r1.group(<span class="number">2</span>))  <span class="comment"># group(2)表示完整匹配结果中间的第2个分组</span></span><br><span class="line">print(r1.group(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>))  <span class="comment">#可以使用这一行代码，返回上面三行代码的返回结果，返回的形式是以元组形式</span></span><br><span class="line">print(r1.groups())  <span class="comment">#用groups()返回完整匹配结果中间的所有分组，以字符串元组的形式返回</span></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="./TIM截图20180114170336.png" alt="Alt text"><br>注：<br>‘ .* ‘表示匹配所有字符（除换行符以外）无限次，常用于模糊查询（匹配）。</p><ul><li><strong>37. JSON</strong></li></ul><p><strong>（1）</strong>JSON全称为JavaScript Object Notation即JavaScript对象标记。<br><strong>（2）</strong>JSON 是一种轻量级的数据交换格式 。<br><strong>（3）</strong>符合JSON格式的字符串叫作 JSON字符串。<br><strong>（4）</strong>JSON 的优势：</p><pre><code>1. 易于阅读2. 易于解析3. 网络传输效率高4. __适合跨语言交换数据__</code></pre><ul><li><strong>38. 反序列化</strong></li></ul><p>反序列化：将某种格式的（如JSON格式）数据类型转化为特定语言（如Python）的数据类型的过程<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_str = <span class="string">'&#123;"name": "王二小", "age": 15, "girl": false&#125;'</span>  <span class="comment">#注意：JSON数据格式中字符串用“双引号”括起来，JSON数据格式是与语言无关的，这点很容易造成错误。</span></span><br><span class="line">json_array = <span class="string">'[&#123;"name": "王二小", "age": 15, "girl": false&#125;, &#123;"name": "刘胡兰", "age": 18, "girl": true&#125;]'</span></span><br><span class="line">r = json.loads(json_str)  <span class="comment">#使用json.loads()函数把json数据格式转化为Python相应的数据格式，</span></span><br><span class="line"><span class="comment">#（1）JSON中的&#123;key:value,...&#125;格式（即JSON的一个数据对象）对应于Python中的字典数据类型（dict）</span></span><br><span class="line"><span class="comment">#（2）JSON中的array（数组）如（[&#123;"name":"王小二",...&#125;,&#123;"name":"刘胡兰", ...&#125;]）对应于Python中的列表类型（list）</span></span><br><span class="line">print(type(r))</span><br><span class="line">print(r)</span><br><span class="line">print(r[<span class="string">'name'</span>])    <span class="comment">#通过字典的访问数据项的形式就可以访问某个数据项的值</span></span><br><span class="line">print(r[<span class="string">'age'</span>])    </span><br><span class="line"></span><br><span class="line">r1 = json.loads(json_array)</span><br><span class="line">print(type(r1))</span><br><span class="line">print(r1)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180114183848.png" alt="Alt text"></p><p><strong>JSON数据类型与Python数据类型的对应关系</strong></p><table><thead><tr><th style="text-align:center">JSON</th><th style="text-align:center">Python</th></tr></thead><tbody><tr><td style="text-align:center">object</td><td style="text-align:center">dict</td></tr><tr><td style="text-align:center">array</td><td style="text-align:center">list</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">str</td></tr><tr><td style="text-align:center">number</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">number</td><td style="text-align:center">float</td></tr><tr><td style="text-align:center">true</td><td style="text-align:center">True</td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">False</td></tr><tr><td style="text-align:center">null</td><td style="text-align:center">None</td></tr></tbody></table><ul><li><strong>39. 序列化</strong></li></ul><p><strong>序列化：</strong>特定语言下（如Python）的数据类型转化为某种数据格式的数据类型（如JSON）的过程。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">序列化：特定语言下（如Python）的数据类型转化为某种数据格式的数据类型（如JSON）的过程</span></span><br><span class="line"><span class="string">json.loads() 用于反序列化</span></span><br><span class="line"><span class="string">json.dumps() 用于序列化</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#python下的列表数据类型</span></span><br><span class="line">student = [</span><br><span class="line">            &#123;<span class="string">'name'</span>:<span class="string">'熊大'</span>, <span class="string">'age'</span>:<span class="number">16</span>, <span class="string">'male'</span>:<span class="keyword">True</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'name'</span>:<span class="string">'熊二'</span>, <span class="string">'age'</span>:<span class="number">13</span>, <span class="string">'male'</span>:<span class="keyword">True</span>&#125;</span><br><span class="line">          ]</span><br><span class="line"> </span><br><span class="line">r = json.dumps(student)   <span class="comment">#序列化：这里Python下的列表数据类型（list）转化为JSON字符串,在JSON数据格式里就是array类型</span></span><br><span class="line">print(r)</span><br><span class="line">print(type(r))  <span class="comment"># 转化之后的结果放在Python就是str类型</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180114192222.png" alt="Alt text"></p><ul><li><strong>40. 序列化和反序列化的区别</strong></li></ul><p>(1) <strong>反序列化：</strong>将某种格式的（如JSON格式）数据类型转化为特定语言（如Python）的数据类型的过程<br>(2)<strong>序列化：</strong>特定语言下（如Python）的数据类型转化为某种数据格式的数据类型（如JSON）的过程<br>(3) <strong>json.loads()</strong> 用于反序列化<br>(4) <strong>json.dumps()</strong> 用于序列化</p><ul><li><strong>41. JSON理解的一些常见误区</strong></li></ul><p><strong>（1）</strong>应该跳出特定语言的范畴来理解JSON. (JSON并不是专属于特定语言里的，如JavaScript)<br><strong>（2）</strong>JSON和JavaScript一样，都是W3C标准script（ECMA Script）的实现方式之一。<br>由于JS是目前主流的Web前端语言，而JSON被大量用于JavaScript的交互层, 因此常被误解为附属于JavaScript。<br><strong>（3）JSON对象</strong>：JSON本身没有对象的概念，通常这个问题是关联到javascript里时带出来的。<br><strong>（4）</strong>JSON有自己的数据类型（虽然和Javascript的数据类型有些类似），JSON更多的是作为不同语言传输数据的中间类型（即 JSON是一种<strong>中间数据类型</strong>）。<br><strong>（5） JSON字符串</strong>：符合JSON数据格式的字符串。<br><strong>（6）REST服务</strong>的标志性特点就是轻量，正好与JSON的特点相匹配，因此在REST服务中应该多采用JSON而不是XML</p><ul><li><strong>42. 枚举类型</strong></li></ul><p><strong>(1)</strong> python中所有枚举类型都是enum模块下Enum类的子类。<br><strong>(2)</strong> 枚举中的标识最好全部使用大写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum   <span class="comment">#从内置的enum模块下导入Enum类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    BLCAK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">print(VIP.YELLOW)   <span class="comment">#输出的结果为VIP.YELLOW</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong><br>枚举的意义重在标签而不在于数值，使用print(VIP.YELLOW)打印结果不是1而是VIP.YELLOW，这也符合枚举的意义。<br><strong>(3)</strong> 枚举的<strong>优点</strong>：</p><ol><li><p>定义枚举类后不能从外部更改标签属性。(枚举类型中的值不能更改。)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这样并不能更改枚举类型变量的值，会报错。</span></span><br><span class="line">VIP.YELLOW = <span class="number">6</span></span><br></pre></td></tr></table></figure></li><li><p>可以防止相同标签的定义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#相同标签是不可以重复定义的</span></span><br><span class="line">YELLOW = <span class="number">1</span></span><br><span class="line">YELLOW = <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在枚举中YELLOW和GREEN的是可以相同的</span></span><br><span class="line"><span class="comment">#枚举类中不同枚举类型的值可以相同，但此时这两个枚举类型中的第二个名称是第一个的别名，建议使用第一个的名称+_ALIAS作为名称。</span></span><br><span class="line">YELLOW = <span class="number">1</span></span><br><span class="line">GREEN = <span class="number">1</span>   <span class="comment">#GREEN就相当于YELLOW的别名，并不是一个独立的枚举类型</span></span><br></pre></td></tr></table></figure><p><strong>(4)</strong>用字典类型和类表示枚举值的<strong>缺点</strong>：</p><ol><li><p>可变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#改变类变量的值（假设name为Student类的类变量）</span></span><br><span class="line">Student.name = <span class="string">'wanger'</span> <span class="comment">#是可修改的（即可变）</span></span><br></pre></td></tr></table></figure></li><li><p>没有防止相同值的功能。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'YELLOW'</span>:<span class="number">1</span>, <span class="string">'GREEN'</span>:<span class="number">1</span>&#125; <span class="comment">#字典中值相同是可以的</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>（5）枚举类型，枚举名字，枚举值</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">枚举类型，枚举的名字，枚举值</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">print(VIP.GREEN) <span class="comment">#枚举类型,返回VIP.GREEN</span></span><br><span class="line">print(type(VIP.GREEN)) <span class="comment">#返回结果为&lt;enum 'VIP'&gt;</span></span><br><span class="line"></span><br><span class="line">print(VIP.GREEN.name) <span class="comment">#枚举名字（是str类型）,返回GREEN</span></span><br><span class="line">print(type(VIP.GREEN.name)) <span class="comment">#返回结果为&lt;class 'str'&gt;</span></span><br><span class="line"></span><br><span class="line">print(VIP.GREEN.value) <span class="comment">#枚举值</span></span><br><span class="line">print(VIP[<span class="string">'GREEN'</span>]) <span class="comment">#表示通过枚举名字获取枚举类型，返回VIP.GREEN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用for循环遍历枚举类中的枚举类型</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> VIP:</span><br><span class="line">    print(v)</span><br></pre></td></tr></table></figure></p><p><strong>（6） 枚举类型比较</strong></p><p><strong>(1).</strong> 枚举类型之间可以进行等值比较(==)，但直接和数值比较会返回False，如：<br>    VIP.GREEN == 2 返回False<br><strong>(2).</strong> 枚举类型之间不支持大小比较操作符(&gt;、&lt;)的.<br><strong>(3).</strong>枚举类型可以进行身份比较(is)，如：<br>VIP.GREEN is VIP.GREEN 返回 True<br><strong>(4).</strong> 不同枚举类中的枚举类型进行比较都会返回False。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP1</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    BLACK =<span class="number">4</span></span><br><span class="line">    RED = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">r1 = VIP.GREEN == VIP.GREEN  <span class="comment">#返回True，枚举类型之间可以进行等值比较</span></span><br><span class="line">print(r1)</span><br><span class="line"></span><br><span class="line">r2 = VIP.GREEN == VIP.YELLOW <span class="comment">#返回False</span></span><br><span class="line">print(r2)</span><br><span class="line"></span><br><span class="line">r2_1 = VIP.GREEN == VIP1.GREEN <span class="comment">#返回False，不同枚举类中的枚举类型进行比较时会返回False，即使两者的值相等</span></span><br><span class="line">print(r2_1)</span><br><span class="line"></span><br><span class="line">r3 = VIP.GREEN == <span class="number">2</span>    <span class="comment">#返回False，因为枚举类型不可以直接与数字进行等值比较   </span></span><br><span class="line">print(r3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># r4 = VIP.GREEN &gt; VIP.YELLOW #会报错，因为枚举类型不可以进行大小比较</span></span><br><span class="line"><span class="comment"># print(r4)</span></span><br><span class="line"></span><br><span class="line">r5 = VIP.GREEN <span class="keyword">is</span> VIP.GREEN <span class="comment">#返回True，枚举类型可以进行身份比较（is）</span></span><br><span class="line">print(r5)</span><br></pre></td></tr></table></figure></p><p><strong>(7) 枚举的一些常见误区</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    YELLOW_ALIAS = <span class="number">1</span>  <span class="comment">#这是别名（值相同）</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用for循环只能遍历枚举类中的枚举类型（不包括别名）</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> VIP:</span><br><span class="line">    print(v)</span><br><span class="line"></span><br><span class="line"><span class="comment">#别名也会被遍历，打印出枚举名字</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> VIP.__members__:</span><br><span class="line">    print(v) </span><br><span class="line"></span><br><span class="line"><span class="comment">#以元组的形式显示</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> VIP.__members__.items():</span><br><span class="line">    print(v)</span><br></pre></td></tr></table></figure></p><p><strong>注：</strong><br>枚举类中不同枚举类型的值可以相同，但此时这两个枚举类型中的第二个名称是第一个的别名，建议使用第一个的名称+_ALIAS作为名称。<br><strong>（8）由枚举类型的值获取枚举类型（枚举转换）</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过数值获取枚举类型   枚举类名(枚举类型的值)</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">print(VIP(a))</span><br></pre></td></tr></table></figure></p><p><strong>（9）枚举的小结</strong></p><p>（1）python中枚举类是通过<strong>单例</strong>实现的，<strong>无法实例化</strong>。<br>（2）使用enum模块中的<strong>unique装饰器</strong>可以避免一个枚举类中出现<strong>值相同</strong>的枚举类型<br>（3）enum模块中的<strong>IntEnum类</strong>被继承后，定义的枚举类型的值只能为int类型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> IntEnum,unique</span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(IntEnum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">1</span>      <span class="comment">#会报错：加了“@unique”的装饰器，枚举类型不能出相同的值。</span></span><br><span class="line">    BLACK = <span class="string">'str'</span>  <span class="comment">#会报错：继承了IntEnum类，枚举类型的值只能为int类型的</span></span><br><span class="line">    RED = <span class="number">4</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>43. 函数</strong></li></ul><p><strong>(1)</strong> python中一切皆对象，函数也是对象。<br><strong>(2)</strong> python中的函数不仅可以赋值给变量，还可以作为另外一个函数的参数传递，也可以作为另外一个函数的返回结果。</p><ul><li><strong>44. 闭包（难点！！！！！）</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>python在函数内部还可以定义函数，但该函数作用域只在外部函数内部有效，除非作为外部函数的返回值被返回，在外部函数的外部用一个变量接收后就可以调用它了。</span><br><span class="line"><span class="number">2.</span>python中闭包的定义：由函数及其在定义时外部的环境变量（不能是全局变量）构成的整体。</span><br><span class="line">闭包 = 函数 + 环境变量（函数定义时候）</span><br><span class="line"><span class="number">3.</span>f.__closure__ 返回环境变量，此时的环境变量为一个对象</span><br><span class="line">  f.__closure__[<span class="number">0</span>].cell_contents 返回环境变量的值</span><br><span class="line"><span class="number">4.</span>f()指调用函数</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">curve_pre</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">25</span> <span class="comment">#如果a = 25(闭包中的环境变量)放在curve函数中就不是闭包了，必须放在curve之外和curve_pre之内</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">curve</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a * x * x</span><br><span class="line">    <span class="keyword">return</span> curve</span><br><span class="line">a = <span class="number">10</span>    <span class="comment">#如果前面的a = 25被注释，则a取值为这里的10</span></span><br><span class="line"><span class="comment">#闭包中的环境变量a（即a=25）被调用，全局变量a（即a=10）不会被调用，没有才被调用.</span></span><br><span class="line">f = curve_pre()</span><br><span class="line">print(f(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">print(f.__closure__) <span class="comment">#返回环境变量，是一个对象</span></span><br><span class="line">print(f.__closure__[<span class="number">0</span>].cell_contents) <span class="comment">#返回环境变量的值</span></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="./TIM截图20180115182205.png" alt="Alt text"></p><p><strong>（1）</strong>闭包的意义在于保存了一个环境。尤其是函数中调用函数时，如果没有闭包，很容易被外部变量所影响。</p><p><strong>（2）</strong>闭包必须满足2个条件，函数嵌套函数，并且内部函数需要引用外部函数的变量（环境变量）。</p><p>未构成闭包情况：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        a = <span class="number">2</span>  <span class="comment"># 此时a被Python认为是一个局部变量，与外面的a是没有关系的，并没有去引用外面的环境变量，所以此时闭包是不存在的，且这与闭包的意义在于保存了一个环境。尤其是函数中调用函数时，如果没有闭包，很容易被外部变量所影响，而且这与f2()函数有没有返回结果没有关系.(此时a已经被重新赋值)</span></span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line">f = f1()</span><br><span class="line">f()</span><br><span class="line">print(f)</span><br><span class="line">print(f.__closure__)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180115221220.png" alt="Alt text"><br>构成闭包情况：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        c = <span class="number">2</span> * a  <span class="comment">#闭包的环境变量不能在函数里被重新赋值</span></span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line">f = f1()</span><br><span class="line">f()</span><br><span class="line">print(f)</span><br><span class="line">print(f.__closure__)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180115221905.png" alt="Alt text"></p><ul><li><strong>45.  旅行者行走问题解决方法：非闭包方法和闭包方法</strong></li></ul><p><strong>（1）非闭包方法</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">旅行者行走问题</span></span><br><span class="line"><span class="string">（1）用非闭包的方法</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">position</span><span class="params">(move)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x   <span class="comment">#将 x 声明为全局变量，这样函数内部的x就会被全部当作全局变量，而不是局部变量</span></span><br><span class="line">    new_pos = x + move</span><br><span class="line">    x =new_pos    <span class="comment"># 如果没有"global x"声明，这里就会把x当作局部变量，从而会报局部变量未被定义的错误。</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">print(position(<span class="number">3</span>))</span><br><span class="line">print(position(<span class="number">4</span>))</span><br><span class="line">print(position(<span class="number">6</span>))</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180115230056.png" alt="Alt text"></p><p><strong>注：</strong><br>即便是此变量被赋值为全局变量，但如果在函数内部出现了变量赋值，即使出现在函数最后一条语句，这个变量也会被认为是局部变量，执行时不再往外找值，赋值前使用报未定义的错误。<br>解决办法之一是将变量赋值为global。<br><strong>（2）闭包方法</strong></p><p>闭包有保存现场的一个功能，有记忆性。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">旅行者行走问题</span></span><br><span class="line"><span class="string">（2）用闭包的方法</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">origin = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">position</span><span class="params">(pos)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(step)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> pos  <span class="comment">#定义pos为非局部变量，这里的pos是环境变量。从而形成闭包。</span></span><br><span class="line">        new_pos = pos + step</span><br><span class="line">        pos =new_pos</span><br><span class="line">        <span class="keyword">return</span> pos</span><br><span class="line">    <span class="keyword">return</span> go</span><br><span class="line">f = position(origin)</span><br><span class="line">print(f(<span class="number">3</span>))</span><br><span class="line">print(f(<span class="number">4</span>))</span><br><span class="line">print(f(<span class="number">6</span>))</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180115231652.png" alt="Alt text"></p><ul><li><p><strong>46. 匿名函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">匿名函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">print(add(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">#匿名函数(定义函数时不需要函数名)</span></span><br><span class="line"><span class="comment">#lambda parameter_list(变量列表): expression（只能是表达式，不能是代码块）</span></span><br><span class="line">reslut = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line">print(reslut(<span class="number">1</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure></li><li><p><strong>47. 三元表达式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三元表达式</span></span><br><span class="line"><span class="comment">#其他语言的写法一般为：x &gt; y ? x : y</span></span><br><span class="line">x = <span class="number">6</span></span><br><span class="line">y = <span class="number">4</span></span><br><span class="line">result = x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p><strong>48. map</strong></p></li></ul><p>（1）用法：map(func,list)<br>第二个参数可以是list 或者其他集合类型<br>意思是 对list执行func函数，然后返回一个map对象<br>r = map(func,list)  #返回的是 map对象<br>（2）可以根据需要将map对象（如r）转换为需要的类型。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="comment"># for x in list_x:</span></span><br><span class="line"><span class="comment">#     print(square(x))</span></span><br><span class="line">result = map(square,list_x)</span><br><span class="line">print(result)        <span class="comment">#返回一个map对象</span></span><br><span class="line">print(list(result))  <span class="comment">#转换为list类型输出</span></span><br></pre></td></tr></table></figure></p><p><strong>map和lambda（匿名函数）的结合使用场景</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">list_y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">result = map(<span class="keyword">lambda</span> x, y: x + y ,list_x, list_y)</span><br><span class="line">print(result)        <span class="comment">#返回一个map对象</span></span><br><span class="line">print(list(result))  <span class="comment">#转换为list类型输出</span></span><br></pre></td></tr></table></figure></p><p><strong>注： </strong><br>map可以接受多个参数（* iterables），map后面的参数集合长度（如这里的list_x, list_y）最好一样，如果不一致，map会按照长度最小的计算。</p><ul><li><strong>49. reduce</strong></li></ul><p>reduce函数用于连续计算，连续调用参数中的lambda表达式；第一个参数是函数，第二个参数是序列或者集合，第三个参数是初始值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">reduce :连续计算</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="comment">#主要用于连续计算，不只是累加。（连续调用lambda）</span></span><br><span class="line">r = reduce(<span class="keyword">lambda</span> x, y: x + y,list_x) <span class="comment">#这里相当于((((((1+2)+3)+4)+5)+6)+7)的计算过程，即求列表中元素的累加和</span></span><br><span class="line">print(r)</span><br><span class="line"></span><br><span class="line">list_y = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'python'</span>, <span class="string">'1'</span>,<span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line">r1 = reduce(<span class="keyword">lambda</span> x, y: x + y, list_y, <span class="string">'hello'</span>)  <span class="comment">#这里的第三个参数是指初始值，即在进行计算之前的值是初始值'hello'</span></span><br><span class="line">print(r1)</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="./TIM截图20180116160437.png" alt="Alt text"></p><ul><li><strong>50. filter(过滤器)</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">filter:过滤器</span></span><br><span class="line"><span class="string">filter最重要的是判断True或者False,True则返回，False则过滤掉。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">list_x = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">r1 = filter(<span class="keyword">lambda</span> x: <span class="keyword">True</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="keyword">False</span>, list_x)</span><br><span class="line">print(r1)</span><br><span class="line">print(list(r1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#上述也可以简写为</span></span><br><span class="line">r2 = filter(<span class="keyword">lambda</span> x: x, list_x)</span><br><span class="line">print(list(r2))</span><br></pre></td></tr></table></figure><ul><li><strong>51. 装饰器（难点）</strong></li></ul><p><strong>编程原则：对修改是封闭的，对扩展是开放的。</strong><br><strong>(1) 写在装饰器之前（未使用装饰器）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'This is a function1!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'This is a function2!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_time</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(time.time())</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line">print_time(f1)</span><br><span class="line">print_time(f2)</span><br></pre></td></tr></table></figure><p><strong>(2) 装饰器的实现</strong></p><p>这里与（1）类似，没有体现出装饰器的特点和优势。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>  <span class="comment">#实现装饰器要用到嵌套函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span>    <span class="comment">#通过wrapper封装实现不改变原来函数的新功能</span></span><br><span class="line">        print(time.time()) </span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'This is a function1!'</span>)</span><br><span class="line"><span class="comment">#这里改变了函数调用的方式</span></span><br><span class="line">f = decorator(f1)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure></p><p><strong>（3）装饰器的使用</strong><br>使用装饰器：在定义的函数前面加上”@decorator”<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>  <span class="comment">#实现装饰器要用到嵌套函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span>    <span class="comment">#通过wrapper封装实现不改变原来函数的新功能</span></span><br><span class="line">        print(time.time()) </span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment">#(1)使用装饰器一个最大的特点是：不用改变函数调用的方式。</span></span><br><span class="line"><span class="comment">#(2)通过在f1()上面添加了一个装饰器就能添加新的功能，且不用改变f1()函数</span></span><br><span class="line"><span class="meta">@decorator     </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'This is a function1!'</span>)</span><br><span class="line"><span class="comment">#使用装饰器后，就可以按照普通的函数调用方式就可以调用函数，并且也可以添加新功能</span></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure></p><p><strong>(4) 装饰器之优化：使用装饰器的函数引入多个参数</strong></p><p>关键解决之道：在wrapper函数中引入<strong>可变参数</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>  <span class="comment">#实现装饰器要用到嵌套函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span>    <span class="comment">#使用可变参数（*args），这样使用装饰器的函数传入的参数个数可以是多个。</span></span><br><span class="line">        print(time.time()) </span><br><span class="line">        func(*args)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="comment">#使用装饰器一个最大的特点是：不用改变函数调用的方式。</span></span><br><span class="line"><span class="comment">#通过在f1()上面添加了一个装饰器就能添加新的功能，且不用改变f1()函数</span></span><br><span class="line"><span class="meta">@decorator  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(param)</span>:</span>          <span class="comment">#一个参数</span></span><br><span class="line">    print(<span class="string">'This is a function1! '</span>+ param)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(param1,param2)</span>:</span>  <span class="comment">#两个参数</span></span><br><span class="line">    print(<span class="string">'This is a function2! '</span>+ param1)</span><br><span class="line">    print(<span class="string">'This is a function2! '</span>+ param2)</span><br><span class="line"><span class="comment">#使用装饰器后，就可以按照普通的函数调用方式就可以调用函数，并且也可以添加新功能</span></span><br><span class="line">f1(<span class="string">'Test function1_param'</span>)</span><br><span class="line">f2(<span class="string">'Test function2_param1'</span>,<span class="string">'Test function2_param2'</span>)</span><br></pre></td></tr></table></figure></p><p><strong>(5) 装饰器之优化：使用装饰器的函数引入了多个参数，且引入了关键字可变参数</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">装饰器：当使用装饰器的函数传入的参数包含关键字参数，只使用可变参数是不能引入关键字参数的，</span></span><br><span class="line"><span class="string">       除了使用可变参数（*args）还要使用关键字可变参数（**kw）的。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#完整的装饰器实现方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*agrs, **kw)</span>:</span>   <span class="comment">#需要引入可变参数和关键字可变参数</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func(*agrs, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(f1_param1)</span>:</span></span><br><span class="line">    print(<span class="string">'This is function1! '</span> + f1_param1)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(f2_param1, f2_param2)</span>:</span></span><br><span class="line">    print(<span class="string">'This is function2! '</span> + f2_param1)</span><br><span class="line">    print(<span class="string">'This is function2! '</span> + f2_param2)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(f3_param1, f3_param2, **kw)</span>:</span>  <span class="comment">#关键字可变参数</span></span><br><span class="line">    print(<span class="string">'This is function3! '</span> + f3_param1)</span><br><span class="line">    print(<span class="string">'This is function3! '</span> + f3_param2)</span><br><span class="line">    print(<span class="string">'This is function3! '</span> + str(kw))</span><br><span class="line">    print(<span class="string">'This is function3! '</span>, kw)</span><br><span class="line"></span><br><span class="line">f1(<span class="string">'Test function1_param1'</span>)</span><br><span class="line">f2(<span class="string">'Test function2_param1'</span>, <span class="string">'Test function2_param2'</span>)</span><br><span class="line">f3(<span class="string">'Test function3_param1'</span>, <span class="string">'Test function3__param2'</span>,a = <span class="number">1</span>,c= <span class="string">'python'</span>, b = <span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180116212037.png" alt="Alt text"></p><ul><li><strong>52. VSCode调试代码技巧</strong><br>F5    开始调试<br>F10  单步调试<br>F5    跳断点<br>F11  进入函数或对象的内部</li><li><strong>53. 爬虫思路</strong></li></ul><p><img src="./5a40f2500001526e19201080.jpg" alt="Alt text"></p><ul><li><p><strong>53. 爬虫一些拓展 </strong><br>(1) BeautifulSoup , Scrapy<br>(2) 爬虫，反爬虫，反反爬虫<br>(3) ip被封（多次爬取同一网站）<br>(4) 代理IP库</p></li><li><p><strong>54. Python中使用字典实现Switch… Case …</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">在Python中利用字典实现switch...case...</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">day = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sunday</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Sunday'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_monday</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Monday'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_thursday</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Thursday'</span></span><br><span class="line"><span class="comment">#当day为其他值的时候，返回Unknown</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_unknown</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Unknown'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字典中key对应的值为函数</span></span><br><span class="line">switcher = &#123;</span><br><span class="line">    <span class="number">0</span> : get_sunday,</span><br><span class="line">    <span class="number">1</span> : get_monday,</span><br><span class="line">    <span class="number">2</span> : get_thursday,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典访问的方式有两种：（1）通过下标访问的方式； （2）通过get()方法访问的方式。</span></span><br><span class="line"></span><br><span class="line">result = switcher.get(day,get_unknown)()  <span class="comment">#当day的值为其他值时，调用get_unknown函数</span></span><br><span class="line"><span class="comment">#print(switcher[day]) </span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li><li><p><strong>55. 列表推导式、集合推导式、字典推导式、元组推导式</strong></p></li></ul><p><strong>（1）列表推导式</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">b=  [ i * i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i &gt; <span class="number">4</span>]  <span class="comment">#列表推导式</span></span><br><span class="line">print(b)  <span class="comment"># b是一个列表</span></span><br></pre></td></tr></table></figure></p><p><strong>（2）集合推导式</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">d = &#123; i * i <span class="keyword">for</span> i <span class="keyword">in</span> c <span class="keyword">if</span> i &gt; <span class="number">4</span>&#125;  <span class="comment">#集合推导式</span></span><br><span class="line">print(d)  <span class="comment"># d是一个集合</span></span><br></pre></td></tr></table></figure></p><p><strong>（3）字典编写列表推导式、字典推导式、元组表达式</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;</span><br><span class="line">    <span class="string">'王二小'</span> : <span class="number">16</span>,</span><br><span class="line">    <span class="string">'刘胡兰'</span> : <span class="number">20</span>,</span><br><span class="line">    <span class="string">'嘎子'</span>   : <span class="number">13</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b = [ key <span class="keyword">for</span> key, value <span class="keyword">in</span> a.items() ]  <span class="comment">#字典编写列表推导式,不能同时输出key和value</span></span><br><span class="line">c = &#123; value:key <span class="keyword">for</span> key, value <span class="keyword">in</span> a.items()&#125;  <span class="comment">#字典推导式，可以更换key和value的顺序</span></span><br><span class="line">d = ( key <span class="keyword">for</span> key, value <span class="keyword">in</span> a.items())        <span class="comment">#元组推导式，返回的是一个generator对象，因为元组是不可变，所以它的行为和列表、元组等一些可变序列不一样，且不建议使用元组推导式</span></span><br><span class="line"><span class="comment">#d是一个generator对象</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d:   <span class="comment">#遍历generator对象</span></span><br><span class="line">    print(x)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180118172719.png" alt="Alt text"></p><ul><li><strong>56. None</strong></li></ul><p><strong>（1）</strong>None表示空，表示不存在，和’’(空字符)、’[]’(空列表)、’False’是不一样的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">''</span></span><br><span class="line">b = []</span><br><span class="line">c = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">print(a == <span class="keyword">None</span>)</span><br><span class="line">print(b == <span class="keyword">None</span>)</span><br><span class="line">print(c == <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">print(a <span class="keyword">is</span> <span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180118174151.png" alt="Alt text"><br><strong>（2）判空</strong></p><p>a = None时使用’ not  a ‘ 和‘ is None ’两者效果相同。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">a = func()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">    print(<span class="string">'S'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'F'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    print(<span class="string">'S'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'F'</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180118190333.png" alt="Alt text"></p><p>a = [ ]时两者效果不同，所以判空时不要将这两种方式混为一谈。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">    print(<span class="string">'S'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'F'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    print(<span class="string">'S'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'F'</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180118190706.png" alt="Alt text"><br><strong>（3）</strong><br>判空推荐使用下面两种方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a:</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a:</span><br></pre></td></tr></table></figure><p>这样无论是<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">None</span></span><br><span class="line">a = <span class="string">''</span></span><br><span class="line">a =[]</span><br><span class="line">a = <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>这四种形式，以上两种判空操作都有效。所以不建议使用‘if a is None’判空。</p><ul><li><strong>57. 对象存在也不一定是True</strong></li></ul><p><strong>（1）</strong>对象存在，且不存在“<strong> </strong>len<strong>__ ( )”内置方法和“</strong> <strong>bool__</strong> ( )”内置方法，则对象的bool值为True。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">test = Test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> test:</span><br><span class="line">    print(<span class="string">'S'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'F'</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果：输出 ‘S’<br><strong>（2）</strong>对象存在，且类中定义了“<strong> </strong>len<strong>__ ( )”内置方法，则对象的bool值取决于“</strong> <strong>len__</strong> ( )”内置方法的返回值。<br>| “<strong> </strong>len<em>__</em> ( )”内置函数的返回值 | 对象的bool值 |<br>| :——————————: |:———-:|<br>|0|False|<br>|非0|True|<br>|True|True|<br>|False|False|<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> test:</span><br><span class="line">    print(<span class="string">'S'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'F'</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果：输出‘F’</p><p><strong>（3）</strong> 对象存在，且类中定义了“<strong> </strong>len<strong>__ ( )”内置方法和“</strong> <strong>bool__</strong> ( )”内置方法，则对象的值取决于“<strong> </strong>bool<strong>__ ( )”内置方法的返回值。（注意：“</strong> <strong>bool__</strong> ( )”的返回值只能是bool类型的，即True或False）<br>| “<strong> </strong>bool<strong> </strong> ( )”内置函数的返回值 | 对象的bool值 |<br>| :——————————: |:———-:|<br>|True|True|<br>|False|False|<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"><span class="keyword">if</span> test:</span><br><span class="line">    print(<span class="string">'S'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'F'</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果：输出 ‘S’</p><p><strong>注：</strong><br><strong>（1）永远不要认为对象不为None（即对象存在），对象的bool值就一定是True </strong><br><strong>（2）“</strong> <strong>bool</strong> <strong> ( )”内置方法是Python3中的方法，其在Python2中对应的内置方法是“</strong> <strong>nonzero __</strong> ( )”方法<strong></strong>（3）’’, [ ] , None 都表示False__</p><ul><li><strong>58. 全局函数</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#全局函数必须在类中定义了，在类外部才能被调用。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(len(<span class="string">'a009'</span>))  <span class="comment">#调用全局函数len</span></span><br><span class="line"><span class="comment">#打印结果为4，即字符串长度为4个</span></span><br></pre></td></tr></table></figure><ul><li><strong>59. 装饰器的副作用</strong></li></ul><p>（1）未使用装饰器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">     This is f1</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(f1.__name__)</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180118210745.png" alt="Alt text"><br>（2）使用装饰器时，会改变函数的名字，变为装饰器中的闭包函数名字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">     This is f1</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(f1.__name__)</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure></p><p>运行结果为：<br><img src="./TIM截图20180118211358.png" alt="Alt text"></p><p>（3）使用装饰器，为了不改变函数的名字，应该在闭包函数前使用装饰器（”@wraps( func )”）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps  <span class="comment">#首先要引入wraps装饰器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)   #注意：不要忘了加func这个函数参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">     This is f1</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(f1.__name__)</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="./TIM截图20180118212122.png" alt="Alt text"></p><p><strong>注:</strong><br>（1）加上（“@wraps（func）“）这个装饰器之所以可以使原函数的名字不改变，是因为这里的func事实上就是f1函数，使用wraps这个装饰器后，就把f1函数的信息复制给了wrapper闭包函数，虽然在执行f1函数时实际执行的函数是wrapper，所以原函数的名字仍然为f1；若没有这个wraps装饰器，则因为实际执行的函数是wrapper，所以原函数的名字被改变为wrapper。<br>（2）函数名字改变会导致在后续编程中出现很多莫名其妙的错误，因此再使用装饰器的时候，要注意函数名字改变的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/02/01/Python笔记（一）/Python笔记（一）.jpg&quot; title=&quot;Life is short,you need Python!&quot;&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://yuanziwoxin.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Quick Start</title>
    <link href="https://yuanziwoxin.github.io/2018/01/30/Hexo%20Quick%20Start/"/>
    <id>https://yuanziwoxin.github.io/2018/01/30/Hexo Quick Start/</id>
    <published>2018-01-30T03:05:09.000Z</published>
    <updated>2019-04-19T15:14:51.111Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><img src="/2018/01/30/Hexo%20Quick%20Start/HexoQuickStart.jpg" title="Have quick start of Hexo!"><br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;&lt;img src=&quot;/2018/01/30/Hexo%20Quick%20Start/HexoQuickStart.jpg&quot; title=&quot;Have quick start of Hexo!&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://yuanziwoxin.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
